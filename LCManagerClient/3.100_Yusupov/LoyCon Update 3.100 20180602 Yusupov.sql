BEGIN TRY
DECLARE @version SMALLINT = 0
IF OBJECT_ID('version') IS NULL BEGIN
	CREATE TABLE version (value SMALLINT)
	INSERT INTO version (value) VALUES (0)
END ELSE
	ALTER TABLE version ALTER COLUMN value SMALLINT
SELECT TOP 1 @version = value FROM version IF @@ROWCOUNT = 0 INSERT INTO version (value) VALUES (0)
WHILE @version IS NOT NULL BEGIN -- цикл обновления версий
SELECT TOP 1 @version = value FROM version IF @version IS NULL SET @version = 0

DECLARE @database NVARCHAR(128)

IF @version = 300 BEGIN
	SELECT '3.01 20170810 Смирнов'

	--Добавлен идентификатор оператора для отображения на карте сайта только партнёров оператора
	IF OBJECT_ID('Poses') IS NOT NULL DROP PROCEDURE Poses
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Poses
	@partner SMALLINT = NULL,
	@campaign INT = NULL,
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	IF @partner = 0 SET @partner = NULL IF @campaign = 0 SET @campaign = NULL
	IF @campaign IS NOT NULL SELECT cp.id, cp.name, c.name, r.name, p.address, p.phone, p.mapposition, pr.givescard AS IsCardIssue FROM pos p LEFT JOIN partner pr ON p.partner = pr.id LEFT JOIN city c ON p.city = c.id LEFT JOIN region r ON c.region = r.id LEFT JOIN campaign AS cp ON pr.id = cp.partner WHERE cp.id = @campaign AND pr.operator = @operator
	ELSE IF @partner IS NULL SELECT p.id, pr.name, p.code, r.name, c.name, p.address, p.phone, p.mapposition, p.shown, p.issues, p.adds, p.redeems, pr.givescard AS IsCardIssue FROM pos p LEFT JOIN partner pr ON p.partner = pr.id LEFT JOIN city c ON p.city = c.id LEFT JOIN region r ON c.region = r.id WHERE pr.operator = @operator
	ELSE SELECT p.id, pr.name, p.code, r.name, c.name, p.address, p.phone, p.mapposition, p.shown, p.issues, p.adds, p.redeems, pr.givescard AS IsCardIssue FROM pos p LEFT JOIN partner pr ON p.partner = pr.id LEFT JOIN city c ON p.city = c.id LEFT JOIN region r ON c.region = r.id WHERE p.partner = @partner AND pr.operator = @operator
	RETURN (0)'

END ELSE IF @version = 301 BEGIN
	SELECT '3.02 20170814 Смирнов'

	--Добавлена отправка сообщений на адрес электронной почты, указанный как для связи с оператором
	IF OBJECT_ID('MessageAdd') IS NOT NULL DROP PROCEDURE MessageAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE MessageAdd
	@client INT = NULL,
	@text NVARCHAR(1000) = NULL,
	@subject NVARCHAR(100) = NULL,
	@email NVARCHAR(100) = NULL,
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	IF @client = 0 SET @client = NULL IF @text = '''' SET @text = NULL IF @subject = '''' SET @subject = NULL IF @email = '''' SET @email = NULL
	IF @text IS NULL BEGIN SET @errormessage = ''Не задан текст сообщения'' RETURN(1) END
	IF @subject IS NULL BEGIN SET @errormessage = ''Не задана заголовок сообщения'' RETURN(2) END
	IF @operator IS NULL BEGIN SET @errormessage = N''Не задан оператор'' RETURN(3) END
	IF @text IS NULL SET @text = ''Текст сообщения в процедуре MessageAdd не заполнен''
	IF @client IS NOT NULL BEGIN INSERT INTO message (client, text, rectime, subject, operator) VALUES (@client, @text, GETDATE(), @subject, @operator) END
	IF @email IS NOT NULL BEGIN INSERT INTO message (email, text, rectime, subject, operator) VALUES (@email, @text, GETDATE(), @subject, @operator) END
	DECLARE @header NVARCHAR(100) = NULL, 
			@emailaddress NVARCHAR(20) = NULL, 
			@emailsender NVARCHAR(20) = NULL, 
			@operatorname NVARCHAR(50) = NULL, 
			@operatorlkuaddress NVARCHAR(200) = NULL,
			@emailto NVARCHAR(50) = NULL
	SELECT @emailsender = emailsender, @emailaddress = emailaddress, @operatorname = ISNULL(name, ''), @operatorlkuaddress = ISNULL(lkuaddress, ''), @emailto = email FROM operator WHERE id = @operator
	IF(@emailaddress IS NOT NULL AND @emailsender IS NOT NULL AND @email IS NOT NULL)
		EXEC EmailSendPulse @emailTo = @emailto, @header = @subject, @body = @text, @fromHeader = @emailsender, @from = @emailaddress
	RETURN (0)'
	
	
END ELSE IF @version = 302 BEGIN
	SELECT '3.03 20170814 Медянин'
	
	-- В таблицу бонусных правил добавлен признак действия на клиентов в день рождения
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'birthday' AND id = (SELECT id FROM sysobjects WHERE name = 'chequerule'))
		ALTER TABLE chequerule ADD birthday BIT
	
	-- В расчет бонусов по чеку добавлена дата рождения клиента и обработка признака бонусного правила "День рождения"
	IF OBJECT_ID('_BonusCheque') IS NOT NULL DROP PROCEDURE _BonusCheque
	EXEC sp_executesql @statement = N'CREATE PROCEDURE _BonusCheque
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@bonus NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@chequetime DATETIME = NULL,
	@item INT = NULL,
	@birthdate DATE = NULL
	AS SET NOCOUNT ON
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN (1) END
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан партнер'' RETURN (2) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма'' RETURN (3) END
	IF @cheque IS NULL BEGIN SET @errormessage = ''Не задан чек'' RETURN (4) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN (5) END
	IF @amount IS NULL SET @amount = 0 IF @paidbybonus IS NULL SET @paidbybonus = 0
	SET @bonus = 0
	DECLARE @chequerule SMALLINT, @interest NUMERIC(9,2), @fixed NUMERIC(9,2), @begindate DATE, @enddate DATE, @operator SMALLINT = NULL, @cardlevel SMALLINT = NULL, @level SMALLINT = NULL, @nopaidbybonus BIT = NULL, @expdays SMALLINT = NULL, @expirydate DATE = NULL, @active BIT = NULL, @actdays TINYINT = NULL, @cardtype SMALLINT = NULL, @type SMALLINT = NULL, @match BIT = 1, @rulepartner SMALLINT = NULL, @rulecode NVARCHAR(10) = NULL, @begweekday TINYINT = NULL, @endweekday TINYINT = NULL, @begtime TIME(0) = NULL, @endtime TIME(0) = NULL, @weekday TINYINT = NULL, @time TIME(0) = NULL, @stop BIT = NULL, @minsum NUMERIC(9,2), @maxsum NUMERIC(9,2), @friendcard BIGINT = NULL, @friend BIT = NULL, @birthday BIT = NULL, @chequedate DATE = NULL
	SET @chequedate = @chequetime
	SELECT @operator = operator FROM partner WHERE id = @partner
	SELECT @cardlevel = level, @cardtype = type, @friendcard = friendcard FROM card WHERE number = @card
	DECLARE tBonusCheque CURSOR LOCAL FAST_FORWARD FOR SELECT id, interest, fixed, begdate, enddate, level, expdays, actdays, nopaidbybonus, cardtype, partner, code, begweekday, endweekday, begtime, endtime, stop, minsum, maxsum, friend, birthday FROM chequerule WHERE active = 1 AND (partner = @partner OR operator = @operator) ORDER BY priority
	OPEN tBonusCheque
	FETCH NEXT FROM tBonusCheque INTO @chequerule, @interest, @fixed, @begindate, @enddate, @level, @expdays, @actdays, @nopaidbybonus, @type, @rulepartner, @rulecode, @begweekday, @endweekday, @begtime, @endtime, @stop, @minsum, @maxsum, @friend, @birthday
	WHILE @@FETCH_STATUS = 0 BEGIN
		SET @bonus = 0 SET @match = 1
		IF @expdays IS NULL SET @expdays = 365 SET @expirydate = GETDATE() + @expdays
		SET @active = NULL IF @actdays IS NULL OR @actdays = 0 SET @active = 1
		SET @weekday = DATEPART(DW, @chequetime - 1)
		IF @weekday = 0 SET @weekday = 7
		SET @time = @chequetime
		IF @match = 1 AND @rulepartner IS NOT NULL
			IF NOT @partner = @rulepartner
				SET @match = 0
		IF @match = 1 AND @begindate IS NOT NULL
			IF NOT @chequetime >= @begindate
				SET @match = 0
		IF @match = 1 AND @enddate IS NOT NULL
			IF NOT @chequetime < DATEADD(DAY, 1, @enddate)
				SET @match = 0
		IF @match = 1 BEGIN
			IF @rulecode IS NOT NULL BEGIN
				IF @code IS NULL
					SET @match = 0
				ELSE BEGIN
					IF NOT @code = @rulecode
						SET @match = 0
				END
			END
		END
		IF @match = 1 AND @begweekday IS NOT NULL
			IF @weekday < @begweekday
				SET @match = 0
		IF @match = 1 AND @endweekday IS NOT NULL
			IF @weekday > @endweekday
				SET @match = 0
		IF @match = 1 AND @begtime IS NOT NULL
			IF @time < @begtime
				SET @match = 0
		IF @match = 1 AND @endtime IS NOT NULL
			IF @time > @endtime
				SET @match = 0
		IF @match = 1 AND @minsum IS NOT NULL
			IF @amount < @minsum
				SET @match = 0
		IF @match = 1 AND @maxsum IS NOT NULL
			IF @amount > @maxsum
				SET @match = 0
		IF @match = 1 AND @level IS NOT NULL
			IF @cardlevel IS NOT NULL BEGIN
				IF NOT @cardlevel = @level
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @type IS NOT NULL
			IF @cardtype IS NOT NULL BEGIN
				IF NOT @cardtype = @type
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @birthday IS NOT NULL
			IF @birthdate IS NULL
				SET @match = 0
			ELSE IF @chequedate IS NULL
				SET @match = 0
			ELSE IF NOT @chequedate = @birthdate
				SET @match = 0
		IF @match = 1 BEGIN
			IF @interest IS NOT NULL BEGIN
				IF @nopaidbybonus IS NULL OR @nopaidbybonus = 0
					SET @bonus = @bonus + @amount * @interest / 100
				ELSE
					SET @bonus = @bonus + (@amount - @paidbybonus) * @interest / 100
			END
			IF @fixed IS NOT NULL SET @bonus = @bonus + @fixed
			IF @friend IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@card, GETDATE(), @bonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 1, @item)
			ELSE IF @friendcard IS NOT NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@friendcard, GETDATE(), @bonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 8, @item)
		END
		IF @match = 1 AND @stop = 1
			BREAK
		FETCH NEXT FROM tBonusCheque INTO @chequerule, @interest, @fixed, @begindate, @enddate, @level, @expdays, @actdays, @nopaidbybonus, @type, @rulepartner, @rulecode, @begweekday, @endweekday, @begtime, @endtime, @stop, @minsum, @maxsum, @friend, @birthday
	END
	CLOSE tBonusCheque
	DEALLOCATE tBonusCheque     
	RETURN (0)'
	
	-- В триггер чеков добавлено получение даты рождения, которую клиент дал оператору, для дальнейшего применения бонусного правила, действующего в день рождения
	IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'tCheque')) DROP TRIGGER tCheque
	EXEC sp_executesql @statement = N'CREATE TRIGGER tCheque ON cheque AFTER INSERT, DELETE, UPDATE AS
	DECLARE @id_old INT, @id_new INT, @card_old BIGINT, @card_new BIGINT, @partner_old SMALLINT, @partner_new SMALLINT, @amount_old NUMERIC(9,2), @amount_new NUMERIC(9,2), @paidbybonus_old NUMERIC(9,2), @paidbybonus_new NUMERIC(9,2), @amount NUMERIC(9,2), @paidbybonus NUMERIC(9,2), @refund_old BIT, @refund_new BIT, @operator SMALLINT, @quantity SMALLINT, @client INT, @norules_old BIT, @norules_new BIT, @chequetime_old DATETIME, @chequetime_new DATETIME, @birthdate DATE = NULL
	DECLARE tCheque CURSOR LOCAL FAST_FORWARD FOR SELECT d.id AS id_old, i.id AS id_new, d.card AS card_old, i.card AS card_new, d.partner AS partner_old, i.partner AS partner_new, d.amount AS amount_old, i.amount AS amount_new, d.paidbybonus AS paidbybonus_old, i.paidbybonus AS paidbybonus_new, d.refund AS refund_old, i.refund AS refund_new, d.norules AS norules_old, i.norules AS norules_new, d.chequetime AS chequetime_old, i.chequetime AS chequetime_new FROM deleted d FULL JOIN inserted i ON d.id = i.id
	OPEN tCheque
	FETCH NEXT FROM tCheque INTO @id_old, @id_new, @card_old, @card_new, @partner_old, @partner_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @refund_old, @refund_new, @norules_old, @norules_new, @chequetime_old, @chequetime_new
	WHILE @@FETCH_STATUS = 0 BEGIN
		SET @operator = NULL IF @partner_old IS NOT NULL SELECT @operator = operator FROM partner WHERE id = @partner_old ELSE SELECT @operator = operator FROM partner WHERE id = @partner_new
		SET @client = NULL IF @card_old IS NOT NULL SELECT @client = client FROM card WHERE number = @card_old ELSE SELECT @client = client FROM card WHERE number = @card_new
		SET @birthdate = NULL SELECT @birthdate = birthdate FROM clientoperator WHERE client = @client AND operator = @operator
		IF @id_old IS NOT NULL BEGIN
			IF @id_new IS NOT NULL BEGIN
				IF @card_old = @card_new BEGIN
					IF @amount_new != @amount_old BEGIN
						SET @amount = @amount_new - @amount_old
						SET @paidbybonus = @paidbybonus_new - @paidbybonus_old
						IF @norules_new IS NULL OR @norules_new = 0
							EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @id_old, @refund = @refund_old, @chequetime = @chequetime_old, @birthdate = @birthdate
						IF @operator IS NULL
							UPDATE client SET purchasesum = purchasesum + @amount WHERE id = @client
						ELSE
							UPDATE card SET purchasesum = purchasesum + @amount WHERE number = @card_new
					END
				END ELSE BEGIN
					SET @amount = - @amount_old
					SET @paidbybonus = @paidbybonus_old
					IF @norules_old IS NULL OR @norules_old = 0
						EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @id_old, @refund = @refund_old, @chequetime = @chequetime_old, @birthdate = @birthdate
					IF @norules_new IS NULL OR @norules_new = 0
						EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @id_new, @refund = @refund_new, @chequetime = @chequetime_new, @birthdate = @birthdate
					SET @quantity = 1 IF @refund_old = 1 BEGIN SET @amount = - @amount_old SET @quantity = -1 END
					IF @operator IS NULL
						UPDATE client SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE id = @client
					ELSE
						UPDATE card SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE number = @card_old
					SET @operator = NULL SELECT @operator = operator FROM partner WHERE id = @partner_new
					SET @client = NULL SELECT @client = client FROM card WHERE number = @card_new
					SET @quantity = 1 IF @refund_new = 1 SET @quantity = -1
					IF @operator IS NULL
						UPDATE client SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE id = @client
					ELSE
						UPDATE card SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE number = @card_new
				END
			END ELSE BEGIN
				SET @amount = - @amount_old
				SET @paidbybonus = @paidbybonus_old 
				IF @norules_old IS NULL OR @norules_old = 0
					EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @amount = @amount, @paidbybonus = @paidbybonus, @refund = @refund_old, @chequetime = @chequetime_old, @birthdate = @birthdate
				SET @quantity = 1 IF @refund_old = 1 SET @quantity = -1
				IF @operator IS NULL
					UPDATE client SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE id = @client
				ELSE
					UPDATE card SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE number = @card_old
			END
		END ELSE BEGIN
			IF @norules_new IS NULL OR @norules_new = 0
				EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @id_new, @refund = @refund_new, @chequetime = @chequetime_new, @birthdate = @birthdate
			SET @quantity = 1 IF @refund_new = 1 SET @quantity = -1
			IF @operator IS NULL
				UPDATE client SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE id = @client
			ELSE
				UPDATE card SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE number = @card_new
		END
		FETCH NEXT FROM tCheque INTO @id_old, @id_new, @card_old, @card_new, @partner_old, @partner_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @refund_old, @refund_new, @norules_old, @norules_new, @chequetime_old, @chequetime_new
	END
	CLOSE tCheque'
	
	-- В триггер позиций чека добавлено получение даты рождения, которую клиент дал оператору, для дальнейшего применения бонусного правила, действующего в день рождения
	IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'tItem')) DROP TRIGGER tItem
	EXEC sp_executesql @statement = N'CREATE TRIGGER tItem ON item AFTER INSERT, DELETE, UPDATE AS
	DECLARE @id_old INT, @id_new INT, @cheque_old INT, @cheque_new INT, @card_old BIGINT, @card_new BIGINT, @partner_old SMALLINT, @partner_new SMALLINT, @amount_old NUMERIC(9,2), @amount_new NUMERIC(9,2), @paidbybonus_old NUMERIC(9,2), @paidbybonus_new NUMERIC(9,2), @code_old NVARCHAR(10), @code_new NVARCHAR(10), @amount NUMERIC(9,2), @paidbybonus NUMERIC(9,2), @refund_old BIT, @refund_new BIT, @operator SMALLINT, @norules_old BIT, @norules_new BIT, @chequetime_old DATETIME, @chequetime_new DATETIME, @birthdate DATE = NULL, @client INT = NULL
	DECLARE tItem CURSOR LOCAL FAST_FORWARD FOR SELECT d.id AS id_old, i.id AS id_new, d.cheque AS cheque_old, i.cheque AS cheque_new, d.code AS code_old, i.code AS code_new, d.amount AS amount_old, i.amount AS amount_new, d.paidbybonus AS paidbybonus_old, i.paidbybonus AS paidbybonus_new, d.norules AS norules_old, i.norules AS norules_new, cd.card AS card_old, ci.card AS card_new, cd.partner AS partner_old, ci.partner AS partner_new, cd.refund AS refund_old, ci.refund AS refund_new, cd.chequetime AS chequetime_old, ci.chequetime AS chequetime_new FROM deleted d FULL JOIN inserted i ON d.id = i.id LEFT JOIN cheque cd ON cd.id = d.cheque LEFT JOIN cheque ci ON ci.id = i.cheque
	OPEN tItem
	FETCH NEXT FROM tItem INTO @id_old, @id_new, @cheque_old, @cheque_new, @code_old, @code_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @norules_old, @norules_new, @card_old, @card_new, @partner_old, @partner_new, @refund_old, @refund_new, @chequetime_old, @chequetime_new
	WHILE @@FETCH_STATUS = 0 BEGIN
		SET @operator = NULL IF @partner_old IS NOT NULL SELECT @operator = operator FROM partner WHERE id = @partner_old ELSE SELECT @operator = operator FROM partner WHERE id = @partner_new
		SET @client = NULL IF @card_old IS NOT NULL SELECT @client = client FROM card WHERE number = @card_old ELSE SELECT @client = client FROM card WHERE number = @card_new
		SET @birthdate = NULL SELECT @birthdate = birthdate FROM clientoperator WHERE client = @client AND operator = @operator
		IF @id_old IS NOT NULL BEGIN
			IF @id_new IS NOT NULL BEGIN
				IF @card_old = @card_new BEGIN
					IF @amount_new != @amount_old BEGIN
						SET @amount = @amount_new - @amount_old
						SET @paidbybonus = @paidbybonus_new - @paidbybonus_old
						IF @norules_new IS NULL OR @norules_new = 0
							EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @cheque_old, @refund = @refund_old, @code = @code_old, @chequetime = @chequetime_old, @item = @id_old, @birthdate = @birthdate
					END
				END ELSE BEGIN
					SET @amount = - @amount_old
					SET @paidbybonus = @paidbybonus_old
					IF @norules_old IS NULL OR @norules_old = 0
						EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @cheque_old, @refund = @refund_old, @code = @code_old, @chequetime = @chequetime_old, @item = @id_old, @birthdate = @birthdate
					IF @norules_new IS NULL OR @norules_new = 0
						EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @cheque_new, @refund = @refund_new, @code = @code_new, @chequetime = @chequetime_new, @item = @id_new, @birthdate = @birthdate
				END
			END ELSE BEGIN
				SET @amount = - @amount_old
				SET @paidbybonus = @paidbybonus_old 
				IF @norules_old IS NULL OR @norules_old = 0
					EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @cheque_old, @refund = @refund_old, @code = @code_old, @chequetime = @chequetime_old, @item = @id_old, @birthdate = @birthdate
			END
		END ELSE BEGIN
			IF @norules_new IS NULL OR @norules_new = 0
				EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @cheque_new, @refund = @refund_new, @code = @code_new, @chequetime = @chequetime_new, @item = @id_new, @birthdate = @birthdate
		END
		FETCH NEXT FROM tItem INTO @id_old, @id_new, @cheque_old, @cheque_new, @code_old, @code_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @norules_old, @norules_new, @card_old, @card_new, @partner_old, @partner_new, @refund_old, @refund_new, @chequetime_old, @chequetime_new
	END
	CLOSE tItem'
	
	
END ELSE IF @version = 303 BEGIN
	SELECT '3.04 20170815 Медянин'
	
	-- В триггере E-mail исправлена ошибка - удалялся E-mail у клиента, даже если E-mail и ссылка на клиента в E-mail не менялись
	IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'tEmail')) DROP TRIGGER tEmail
	EXEC sp_executesql @statement = N'CREATE TRIGGER tEmail ON email AFTER INSERT, DELETE, UPDATE AS
	DECLARE @email NVARCHAR(30), @count TINYINT, @email_old NVARCHAR(30), @email_new NVARCHAR(30), @client_old INT, @client_new INT
	DECLARE tEmail CURSOR LOCAL FAST_FORWARD FOR SELECT d.email AS email_old, i.email AS email_new, d.client AS client_old, i.client AS client_new FROM deleted d FULL JOIN inserted i ON d.email = i.email
	OPEN tEmail
	FETCH NEXT FROM tEmail INTO @email_old, @email_new, @client_old, @client_new
	WHILE @@FETCH_STATUS = 0 BEGIN
		SET @count = 0
		SET @email = NULL
		IF @email_old IS NOT NULL BEGIN
			IF @email_new IS NOT NULL BEGIN
				IF @email_new = @email_old BEGIN
					IF @client_old IS NOT NULL BEGIN
						IF @client_new IS NOT NULL BEGIN
							IF @client_old != @client_new BEGIN
								UPDATE client SET email = @email_new WHERE id = @client_new
								SET @email = NULL
								SELECT @email = email FROM client WHERE id = @client_old
								IF @email IS NOT NULL UPDATE client SET email = NULL WHERE id = @client_old
							END
						END
					END ELSE
						IF @client_new IS NOT NULL
							UPDATE client SET email = @email_new WHERE id = @client_new
				END ELSE BEGIN
					IF @client_new IS NOT NULL
						UPDATE client SET email = @email_new WHERE id = @client_new
					IF @client_old IS NOT NULL BEGIN
						SET @email = NULL
						SELECT @email = email FROM client WHERE id = @client_old
						IF @email IS NOT NULL UPDATE client SET email = NULL WHERE id = @client_old
					END
				END
			END ELSE BEGIN
				IF @client_old IS NOT NULL BEGIN
					SET @email = NULL
					SELECT @email = email FROM client WHERE id = @client_old
					IF @email IS NOT NULL UPDATE client SET email = NULL WHERE id = @client_old
				END
			END
		END ELSE
			IF @client_new IS NOT NULL
				UPDATE client SET email = @email_new WHERE id = @client_new
		FETCH NEXT FROM tEmail INTO @email_old, @email_new, @client_old, @client_new
	END
	CLOSE tEmail'
	
END ELSE IF @version = 304 BEGIN
	SELECT '3.05 20170818 Смирнов'

	--Процедура пересчёта уровней для оператора М5-Бонус
	IF OBJECT_ID('M5BonusLevels') IS NOT NULL DROP PROCEDURE M5BonusLevels
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[M5BonusLevels] @errormessage nvarchar(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @operator SMALLINT = NULL, 
			@card BIGINT = NULL, 
			@leveldate DATE = NULL, 
			@min DATETIME = NULL, 
			@max DATETIME = NULL, 
			@true BIT = 1, 
			@sum NUMERIC(18,2) = 0, 
			@level SMALLINT = NULL, 
			@level1 SMALLINT = NULL, 
			@level2 SMALLINT = NULL, 
			@level3 SMALLINT = NULL
	SELECT @operator = id FROM operator WHERE name = ''M5-BONUS''
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Оператор не найден'' RETURN(1) END
	SELECT @level1 = id FROM level WHERE operator = @operator AND name = ''SILVER''
	SELECT @level2 = id FROM level WHERE operator = @operator AND name = ''GOLD''
	DECLARE tM5BonusLevels CURSOR LOCAL FAST_FORWARD FOR SELECT number, leveldate FROM card WHERE operator = @operator
	OPEN tM5BonusLevels
	FETCH NEXT FROM tM5BonusLevels INTO @card, @leveldate
	WHILE @@FETCH_STATUS = 0 BEGIN				
		SELECT @sum = SUM(amount) FROM cheque WHERE card = @card
		IF @sum >= 10000 SET @level = @level2		
		ELSE SET @level = @level1
		UPDATE card SET leveldate = getdate(), level = @level WHERE number = @card
		FETCH NEXT FROM tRalfLevels INTO @card, @leveldate
	END
	CLOSE tM5BonusLevels
	DEALLOCATE tM5BonusLevels
	RETURN(0)'

END ELSE IF @version = 305 BEGIN
	SELECT '3.06 20170822 Смирнов'

	--Добавлены выходными параметрами номер карты и номер телефона
	IF OBJECT_ID('BalanceGet') IS NOT NULL DROP PROCEDURE BalanceGet
	EXEC sp_executesql @statement = N'create procedure BalanceGet
	@card BIGINT = NULL OUTPUT,
	@phone BIGINT = NULL OUTPUT,
	@partner SMALLINT = NULL,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT
	IF NOT @result = 0 RETURN (@result)
	SELECT @phone = COALESCE(cr.phone, ct.phone) FROM card AS cd LEFT JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator LEFT JOIN client AS ct ON cd.client = ct.id WHERE cd.number = @card
	RETURN (0)'

END ELSE IF @version = 306 BEGIN
	SELECT '3.07 20170825 Смирнов'

	--Добавлено согласие на получение смс и email
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
			@to date = null, 
			@operator smallint = NULL,
			@errormessage nvarchar(100) OUTPUT 
		AS
		BEGIN
			IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
			BEGIN
				SET @errormessage = N''Оператор не найден''
				RETURN(1)
			END

			DECLARE @beginDate DATE, @endDate DATE
			--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
			--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

			SET @to = DATEADD(DAY, 1, (@to))
			SET @beginDate = @from
			SET @endDate = @to

			DECLARE @cheques AS TABLE
			(
				id INT,
				amount DECIMAL(9,2),
				refund BIT,
				card BIGINT,
				UNIQUE CLUSTERED (id, amount, refund)
			)
			INSERT INTO @cheques (id, amount, refund, card)
			SELECT
				id,
				amount,
				refund,
				card
			FROM
				cheque
			WHERE
				chequetime >= @beginDate 
				AND chequetime < @endDate
				AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			
			SELECT
				COALESCE((SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cr.pos), (SELECT name FROM operator WHERE id = @operator)) AS brand,
				COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos),N''Нет'') AS address,
				COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
				CASE ct.gender
					WHEN 0 THEN N''Женский''
					WHEN 1 THEN N''Мужской''
					ELSE N''Неизвестен''
				END, 
				COALESCE(ct.phone, cr.phone, 0) AS phone,
				coalesce(ct.email, cr.email, '''') as email,
				cd.number,
				COALESCE(cp.Name, '''') AS ClientType, 
				(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
				COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
				COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
				COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],			
				(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
				COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
				cd.fullbalance,
				(SELECT condition FROM level WHERE id = cd.level) AS condition,
				COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
				ct.allowsms,
				ct.allowemail
			FROM
				client AS ct
				INNER JOIN card AS cd ON ct.id = cd.client
				LEFT JOIN clientoperator AS cr ON ct.id = cr.client
				LEFT JOIN cardtype AS cp ON cd.type = cp.id
			WHERE
				cd.operator = @operator
				AND cr.operator = @operator
			RETURN(0)
		END'

	--Добавлено согласие на получение смс и email
	IF OBJECT_ID('Reports.PartnerClient') IS NOT NULL DROP PROCEDURE Reports.PartnerClient
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerClient @from date = NULL,
				@to date = NULL, 
				@operator smallint = NULL,
				@partner SMALLINT = NULL,
				@errormessage nvarchar(100) OUTPUT
		AS
		BEGIN
			IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
			BEGIN
				SET @errormessage = N''Оператор не найден''
				RETURN(1)
			END

			IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
			BEGIN
				SET @errormessage = N''Партнёр не найден''
				RETURN(1)
			END

			DECLARE @beginDate DATE, @endDate DATE
			--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
			--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

			SET @to = DATEADD(DAY, 1, (@to))
			SET @beginDate = @from
			SET @endDate = @to

			DECLARE @cheques AS TABLE
			(
				id INT,
				amount DECIMAL(9,2),
				refund BIT,
				card BIGINT,
				chequetime DATETIME,
				pos SMALLINT
				UNIQUE CLUSTERED (id, amount, refund)
			)
			INSERT INTO @cheques (id, amount, refund, card, chequetime, pos)
			SELECT
				id,
				amount,
				refund,
				card,
				chequetime,
				pos
			FROM
				cheque
			WHERE
				chequetime >= @beginDate 
				AND chequetime < @endDate
				AND pos IN (SELECT id FROM pos WHERE partner = @partner)
			
			SELECT
				(SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cs.pos) AS brand,
				(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cs.pos) AS address,
				COALESCE(cr.name, '''') + '' '' + COALESCE(cr.surname, '''') + '' '' + COALESCE(cr.patronymic, '''') AS fullName,
				CASE cr.gender
					WHEN 0 THEN N''Женский''
					WHEN 1 THEN N''Мужской''
					ELSE N''Неизвестен''
				END AS gender,
				COALESCE(cr.phone, ct.phone, 0) AS phone,
				COALESCE(cr.email, ct.email, '''') AS email,
				cd.number,
				COALESCE(ce.Name, '''') AS ClientType, 
				chequetime,
				CASE cs.refund
					WHEN 0 THEN N''Покупка''
					WHEN NULL THEN N''Покупка''
					WHEN 1 THEN N''Возврат''
				END AS OperationType,
				CASE
					WHEN cs.amount >= 0 THEN cs.amount
					WHEN cs.amount < 0 THEN (-1)*cs.amount
				END AS [Сумма операции],
				COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus >= 0 AND cheque = cs.id), 0) AS [Начислено бонусов],
				COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus <= 0 AND cheque = cs.id), 0) AS [Списано бонусов],
				(SELECT condition FROM level WHERE id = cd.level) AS condition,
				COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
				ct.allowsms,
				ct.allowemail
			FROM
				@cheques AS cs
				INNER JOIN card AS cd ON cs.card = cd.number
				INNER JOIN client AS ct ON cd.client = ct.id
				INNER JOIN clientoperator AS cr ON ct.id = cr.client
				LEFT JOIN cardtype AS ce ON cd.type = ce.id
			WHERE
				cd.operator = @operator
				AND cr.operator = @operator
			ORDER BY
				chequetime DESC
			RETURN(0)
		END'

	--Добавлено согласие на получение смс и email
	IF OBJECT_ID('[Reports].[PosClient]') IS NOT NULL DROP PROCEDURE [Reports].[PosClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PosClient
			@from date = null,
			@to date = null, 
			@operator smallint = NULL,
			@partner smallint = NULL,
			@pos nvarchar(10) = NULL,
			@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END
		IF(NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(2)
		END
		IF(NOT EXISTS(SELECT id FROM pos WHERE code = @pos))
		BEGIN
			SET @errormessage = N''Торговая точка не найдена''
			RETURN(3)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos = (SELECT id FROM pos WHERE partner = @partner AND code = @pos)
			
		SELECT
			(SELECT name FROM partner WHERE id = @partner) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = @partner AND code = @pos) AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],			
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
		RETURN(0)
	END'

END ELSE IF @version = 307 BEGIN
	SELECT '3.08 20170828 Смирнов'

	--Добавлен необязательным входным параметром идентификатор оператора и выходными параметрами номер телефона, номер карты и идентификатор клиента
	IF OBJECT_ID('ClientSetPassword') IS NOT NULL DROP PROCEDURE ClientSetPassword
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientSetPassword
	@phone BIGINT = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@password NVARCHAR(20) = NULL,
	@client INT = NULL OUTPUT,
	@operator SMALLINT = NULL,
	@card BIGINT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result TINYINT = NULL
	IF @client IS NULL OR @client = 0
	BEGIN
		DECLARE @phone_code NVARCHAR(10) = NULL
		IF @code IS NULL BEGIN SET @errormessage = ''Не введен временный код'' RETURN(1) END
		IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(2) END
		SET @phone %= 10000000000
		IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(3) END
		SELECT @client = client, @phone_code = code FROM phone WHERE number = @phone
		IF (@client = 0 OR @client IS NULL) SELECT @client = c.client, @phone_code = p.code FROM phone p LEFT JOIN card c ON p.card = c.number WHERE p.number = @phone
		IF (@client = 0 OR @client IS NULL) BEGIN SET @errormessage = ''Неверно задан номер телефона'' RETURN(4) END
		IF NOT @phone_code = @code BEGIN SET @client = NULL SET @errormessage = ''Задан ошибочный временный код'' RETURN(5) END
	END
	IF (@operator IS NULL OR @operator = 0)
	BEGIN
		UPDATE client SET password = @password WHERE id = @client
		SELECT @phone = phone FROM client WHERE id = @client
	END
	ELSE
	BEGIN
		UPDATE clientoperator SET password = @password WHERE client = @client AND operator = @operator
		SELECT @phone = phone FROM clientoperator WHERE client = @client AND operator = @operator
		SELECT @card = number FROM card WHERE client = @client AND operator = @operator
	END
	RETURN (0)'

END ELSE IF @version = 308 BEGIN
	SELECT '3.09 20170917 Смирнов'

	IF OBJECT_ID('ClientFriendLink') IS NOT NULL DROP PROCEDURE ClientFriendLink
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientFriendLink
	@client INT,
	@phone BIGINT = NULL,
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@card BIGINT = NULL, 
	@link NVARCHAR(100) = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, @operatorlkuaddress NVARCHAR(200) = NULL
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	SELECT @operatorlkuaddress = lkuaddress FROM operator WHERE id = @operator
	IF @operatorlkuaddress IS NULL BEGIN SET @errormessage = ''Для Оператора не задан адрес Личного кабинета Участника'' RETURN(11) END
	SET @link = @operatorlkuaddress + ''/friend/?client='' + CONVERT(NVARCHAR, @client) + ''&operator='' + CONVERT(NVARCHAR, @operator)
	RETURN (0)'

	-- Исправлено название процедуры.
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @cardoperator SMALLINT = NULL, @virtual BIT = NULL, @welcomebonus NUMERIC(9,2) = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @result INT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL, @base10 BIGINT = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend FROM operator WHERE id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend FROM operator WHERE name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END ELSE BEGIN
		SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 AND @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть карта данного Оператора'' RETURN(12) END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL
	BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	RETURN (0)'

END ELSE IF @version = 309 BEGIN
	SELECT '3.10 20170919 Смирнов'

	--содержит список наименований ролей
	IF OBJECT_ID('role', 'U') IS NULL
	BEGIN
		CREATE TABLE role
		(
			id SMALLINT PRIMARY KEY IDENTITY(1,1),
			name NVARCHAR(50) NOT NULL,
			description NVARCHAR(1000) NULL
		)
	END

	--содержит описание функциональности сайта и доступа к нему
	IF OBJECT_ID('permission', 'U') IS NULL
	BEGIN
		CREATE TABLE permission
		(
			id SMALLINT PRIMARY KEY IDENTITY(1,1),
			code NVARCHAR(20) NOT NULL,
			name NVARCHAR(50) NOT NULL,
			description NVARCHAR(1000) NULL
		)
	END

	--сопоставление роли и функциональности
	IF OBJECT_ID('rolepermission', 'U') IS NULL
	BEGIN
		CREATE TABLE rolepermission
		(
			role SMALLINT FOREIGN KEY REFERENCES role(id) NOT NULL,
			permission SMALLINT FOREIGN KEY REFERENCES permission(id) NOT NULL
		)
	END

	--содержит информацию о роли клиента
	IF OBJECT_ID('clientrole', 'U') IS NULL
	BEGIN
		CREATE TABLE clientrole
		(
			role SMALLINT FOREIGN KEY REFERENCES role(id) NOT NULL,
			client INT FOREIGN KEY REFERENCES client(id) NOT NULL
		)
	END

	--содержит информацию о принадлежности записи в таблице client оператору и партнёру
	IF OBJECT_ID('manager', 'U') IS NULL
	BEGIN
		CREATE TABLE manager
		(
			client INT FOREIGN KEY REFERENCES client(id) NOT NULL,
			operator SMALLINT,
			partner SMALLINT
		)
	END

	IF OBJECT_ID('Initiate') IS NOT NULL DROP PROCEDURE Initiate
	EXEC sp_executesql @statement = N'create procedure Initiate
	AS SET NOCOUNT ON
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailpassword'') INSERT INTO parameter (name, value) VALUES (''emailpassword'', ''no-reply0910'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailaddress'') INSERT INTO parameter (name, value) VALUES (''emailaddress'', ''no-reply@loycon.ru'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailprovider'') INSERT INTO parameter (name, value) VALUES (''emailprovider'', ''yandex'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailsender'') INSERT INTO parameter (name, value) VALUES (''emailsender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge1'') INSERT INTO parameter (name, value) VALUES (''smscharge1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge2'') INSERT INTO parameter (name, value) VALUES (''smscharge2'', N''р.Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge3'') INSERT INTO parameter (name, value) VALUES (''smscharge3'', N''б. '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smspassword'') INSERT INTO parameter (name, value) VALUES (''smspassword'', ''Yu2910aTew'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem1'') INSERT INTO parameter (name, value) VALUES (''smsredeem1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem2'') INSERT INTO parameter (name, value) VALUES (''smsredeem2'', N''Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem3'') INSERT INTO parameter (name, value) VALUES (''smsredeem3'', N'' б.
Баланс - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem4'') INSERT INTO parameter (name, value) VALUES (''smsredeem4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund1'') INSERT INTO parameter (name, value) VALUES (''smsrefund1'', N''Возврат - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund2'') INSERT INTO parameter (name, value) VALUES (''smsrefund2'', N'' р.
Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund3'') INSERT INTO parameter (name, value) VALUES (''smsrefund3'', N'' б.
Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund4'') INSERT INTO parameter (name, value) VALUES (''smsrefund4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsregcode'') INSERT INTO parameter (name, value) VALUES (''smsregcode'', ''Для завершения регистрации в программе введите код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssendcode'') INSERT INTO parameter (name, value) VALUES (''smssendcode'', ''Ваш временный код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssender'') INSERT INTO parameter (name, value) VALUES (''smssender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsusername'') INSERT INTO parameter (name, value) VALUES (''smsusername'', ''mredcard'')
	IF EXISTS(SELECT value FROM version) UPDATE version SET value = 200 ELSE INSERT INTO version (value) VALUES (200)
	IF NOT EXISTS(SELECT id FROM clientstatus WHERE id = 0) INSERT INTO clientstatus (id, name) VALUES (0, ''Активен'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 0) INSERT INTO cardstatus (id, name) VALUES (0, ''Активна'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 1) INSERT INTO cardstatus (id, name) VALUES (1, ''Блокирована'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 2) INSERT INTO cardstatus (id, name) VALUES (2, ''Ограничена'')
	DECLARE @operator SMALLINT = NULL, @partner SMALLINT = NULL, @region TINYINT = NULL, @city SMALLINT = NULL
	SELECT @operator = id FROM operator WHERE name = ''Оператор''
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO operator (name) VALUES (''Оператор'')
		SET @operator = SCOPE_IDENTITY()
	END
	SELECT @partner = id FROM partner WHERE operator = @operator AND name = ''Партнер''
	IF @partner IS NULL BEGIN
		INSERT INTO partner (name, operator) VALUES(''Партнер'', @operator)
		SET @partner = SCOPE_IDENTITY()
	END
	SELECT @region = id FROM region WHERE name = ''Москва''
	IF @region IS NULL BEGIN
		INSERT INTO region (name) VALUES(''Москва'')
		SET @region = SCOPE_IDENTITY()
	END
	SELECT @city = id FROM city WHERE region = @region AND name = ''Москва''
	IF @city IS NULL BEGIN
		INSERT INTO city (name, region) VALUES(''Москва'', @region)
		SET @city = SCOPE_IDENTITY()
	END
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 1) INSERT INTO messagestatus (code, name) VALUES (1, ''Отправлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 2) INSERT INTO messagestatus (code, name) VALUES (2, ''Доставлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 3) INSERT INTO messagestatus (code, name) VALUES (3, ''Спам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 4) INSERT INTO messagestatus (code, name) VALUES (4, ''Отписка'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 5) INSERT INTO messagestatus (code, name) VALUES (5, ''Был переход по ссылкам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 6) INSERT INTO messagestatus (code, name) VALUES (6, ''Устройство пользователя'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent1'') INSERT INTO parameter (name, value) VALUES(''smsagent1'', N''С Вашего счета списано '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent2'') INSERT INTO parameter (name, value) VALUES(''smsagent2'', N''На Ваш счет начислено '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent3'') INSERT INTO parameter (name, value) VALUES(''smsagent3'', N'' бонусов! Подробности: '')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadAll'') INSERT INTO permission (code, name) VALUES(''ReadAll'', ''Read all'')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadWriteAll'') INSERT INTO permission (code, name) VALUES(''ReadWriteAll'', ''Read and write all'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Reader'') INSERT INTO role (name) VALUES(''Reader'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Writer'') INSERT INTO role (name) VALUES(''Writer'')
	RETURN(0)'

	EXEC Initiate

END ELSE IF @version = 310 BEGIN
	SELECT '3.11 20170921 Смирнов'

	--Исправлено. Отображается наименование партнёра при возврате
	IF OBJECT_ID('[Reports].[OperatorSales]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorSales @from date = NULL,
				@to date = NULL, 
				@operator smallint = NULL,
				@errormessage nvarchar(100) OUTPUT
		AS
		BEGIN
			IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
			BEGIN
				SET @errormessage = N''Оператор не найден''
				RETURN(1)
			END

			DECLARE @bonuses AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @bonuscheques AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT,
				chequeamount NUMERIC(9,2),
				operationtype NVARCHAR(20)
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @beginDate DATE, @endDate DATE

			SET @to = DATEADD(DAY, 1, (@to))
			SET @beginDate = @from
			SET @endDate = @to

			INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
			SELECT
				CASE 
					WHEN bs.bonus > 0 THEN bs.bonus
					WHEN bs.bonus <= 0 THEN 0
				END AS bonusAdded,
				CASE 
					WHEN bs.bonus > 0 THEN 0
					WHEN bs.bonus <= 0 THEN (-1)*bs.bonus
				END AS bonusRedeemed,
				bs.cheque,
				COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
				bs.proctime,
				bs.card,
				bs.partner
			FROM
				bonus AS bs
				LEFT JOIN bonussource AS be ON bs.source = be.code
			WHERE
				bs.operator = @operator
				AND bs.proctime >= @beginDate
				AND bs.proctime < @endDate
			
			INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
			SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
		
			INSERT INTO	@bonuscheques(bonusAdded, bonusRedeemed, bonussource, proctime, card, partner)
			SELECT bonusAdded, bonusRedeemed, bonussource, proctime, card, partner FROM @bonuses WHERE cheque IS NULL

			UPDATE 
				bs 
			SET 
				bs.partner = ce.partner,
				bs.pos = ce.pos, 
				bs.chequeamount = ce.amount, 
				bs.proctime = ce.chequetime,
				bs.operationtype = (CASE ce.refund
										WHEN 0 THEN N''Покупка''
										WHEN NULL THEN N''Покупка''
										WHEN 1 THEN N''Возврат''
									END) 
			FROM 
				@bonuscheques AS bs 
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			
			SELECT
				(SELECT name FROM partner WHERE id = bs.partner) AS brand,
				(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = bs.partner AND ps.id = bs.pos) AS address,
				COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
				CASE cr.gender
					WHEN 0 THEN N''Женский''
					WHEN 1 THEN N''Мужской''
					ELSE N''Неизвестен''
				END AS gender,
				COALESCE(cr.phone, ct.phone, 0) AS phone,
				COALESCE(cr.email, ct.email, '''') AS email,
				cd.number,
				COALESCE(ce.Name, '''') AS ClientType,
				bs.proctime AS chequetime,
				COALESCE(bs.operationtype, bs.bonussource),
				CASE
					WHEN bs.chequeamount >= 0 THEN bs.chequeamount
					WHEN bs.chequeamount < 0 THEN (-1)*bs.chequeamount
					WHEN bs.chequeamount IS NULL THEN 0
				END AS [Сумма операции],
				bs.bonusAdded AS [Начислено бонусов],
				bs.bonusRedeemed AS [Списано бонусов]
			FROM
				@bonuscheques AS bs
				INNER JOIN card AS cd ON bs.card = cd.number
				INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
				INNER JOIN client AS ct ON ct.id = cd.client
				LEFT JOIN cardtype AS ce ON cd.type = ce.id
			WHERE
				cd.operator = @operator
			ORDER BY
				bs.proctime DESC
			RETURN(0)
		END'
	
	
END ELSE IF @version = 311 BEGIN
	SELECT '3.12 20170928 Белянский'
	
	IF OBJECT_ID('BirthdayBonuses') IS NOT NULL DROP PROCEDURE BirthdayBonuses
	EXEC sp_executesql @statement = N'CREATE PROCEDURE BirthdayBonuses
@errormessage NVARCHAR(100) = NULL OUTPUT
AS
  SET NOCOUNT ON
  DECLARE @today DATE = GETDATE()
         ,@birthdaybonus NUMERIC(9, 2) = NULL
         ,@card BIGINT = NULL
         ,@operator SMALLINT = NULL
         ,@begindate DATE = NULL
         ,@redeemed NUMERIC(9, 2) = NULL
         ,@daysbeforebirthday SMALLINT = NULL
         ,@expdaysbirthday SMALLINT = NULL
         ,@birthdate DATE = NULL
         ,@expdate DATE = NULL
         ,@bonus NUMERIC(9, 2) = NULL
         ,@phone BIGINT = NULL
         ,@remaindatebonus DATE = NULL
         ,@cnt INT = 0
         ,@i INT = 0

  -- Объявляем табличную переменную
  DECLARE @OperatorBirthday TABLE (
    Id SMALLINT IDENTITY
   ,Operator SMALLINT
   ,BirthdayBonus NUMERIC(9, 2)
   ,DaysBeforeBirthday SMALLINT
   ,ExpDaysBirthday SMALLINT
  )

  -- Заполняем таблицу данными операторов, у которых включен функционал начисления бонусов в день рождения
  INSERT INTO @OperatorBirthday (Operator, BirthdayBonus, DaysBeforeBirthday, ExpDaysBirthday)
    SELECT
      o.Id
     ,o.BirthdayBonus
     ,o.DaysBeforeBirthday
     ,o.ExpDaysBirthday
    FROM dbo.Operator o
    WHERE o.BirthdayBonus > 0

  -- Узнаем количество строк в таблице
  SELECT
    @cnt = COUNT(*)
  FROM @OperatorBirthday
  -- Задаем начальное значение
  SET @i = 1

  -- Цикл по операторам
  WHILE @cnt >= @i
  BEGIN
  SELECT
    @operator = Operator
   ,@birthdaybonus = BirthdayBonus
   ,@daysbeforebirthday = DaysBeforeBirthday
   ,@expdaysbirthday = ExpDaysBirthday
  FROM @OperatorBirthday
  WHERE Id = @i

  IF @daysbeforebirthday IS NULL
    OR @daysbeforebirthday < 0
    SET @daysbeforebirthday = 0

  SET @birthdate = DATEADD(DAY, @daysbeforebirthday, @today)

  -- Курсор начисления бонусов клиентам оператора
  DECLARE tBirthdateAdd CURSOR LOCAL FAST_FORWARD FOR SELECT
    c.number
   ,co.phone
  FROM card c
  LEFT JOIN clientoperator co
    ON c.client = co.client
  WHERE c.Operator = @operator
  AND co.Operator = @operator
  AND MONTH(co.birthdate) = MONTH(@birthdate)
  AND DAY(co.birthdate) = DAY(@birthdate)
  OPEN tBirthdateAdd
  FETCH NEXT FROM tBirthdateAdd INTO @card, @phone
  WHILE @@fetch_status = 0
  BEGIN
  -- Начисление бонусов
  EXEC BonusAdd @card = @card
               ,@operator = @operator
               ,@bonus = @birthdaybonus
               ,@source = 6
  SET @remaindatebonus = DATEADD(DAY, @expdaysbirthday, @today)
  -- Отправка сообщения
  EXEC ClientNotificationBonus @phone = @phone
                              ,@operator = @operator
                              ,@added = @birthdaybonus
                              ,@birthdaybonus = 1
                              ,@birthdaydate = @remaindatebonus
                              ,@errormessage = @errormessage OUTPUT
  FETCH NEXT FROM tBirthdateAdd INTO @card, @phone
  END
  CLOSE tBirthdateAdd
  DEALLOCATE tBirthdateAdd
  -- Конец курсора

  -- Увеличивам значение на 1
  SET @i = @i + 1
  END
  -- Конец цикла по операторам

  SET NOCOUNT OFF
  RETURN (0)'
	
	IF OBJECT_ID('BirthdayRedeemBonuses') IS NOT NULL DROP PROCEDURE BirthdayRedeemBonuses
	EXEC sp_executesql @statement = N'CREATE PROCEDURE BirthdayRedeemBonuses
@errormessage NVARCHAR(100) = NULL OUTPUT
AS
  SET NOCOUNT ON
  DECLARE @today DATE = GETDATE()
         ,@birthdaybonus NUMERIC(9, 2) = NULL
         ,@card BIGINT = NULL
         ,@operator SMALLINT = NULL
         ,@begindate DATE = NULL
         ,@redeemed NUMERIC(9, 2) = NULL
         ,@daysbeforebirthday SMALLINT = NULL
         ,@expdaysbirthday SMALLINT = NULL
         ,@birthdate DATE = NULL
         ,@expdate DATE = NULL
         ,@bonus NUMERIC(9, 2) = NULL
         ,@phone BIGINT = NULL
         ,@remaindatebonus DATE = NULL
         ,@cnt INT = 0
         ,@i INT = 0

  -- Объявляем табличную переменную
  DECLARE @OperatorBirthday TABLE (
    Id SMALLINT IDENTITY
   ,Operator SMALLINT
   ,BirthdayBonus NUMERIC(9, 2)
   ,DaysBeforeBirthday SMALLINT
   ,ExpDaysBirthday SMALLINT
  )

  -- Заполняем таблицу данными операторов, у которых включен функционал начисления бонусов в день рождения
  INSERT INTO @OperatorBirthday (Operator, BirthdayBonus, DaysBeforeBirthday, ExpDaysBirthday)
    SELECT
      o.Id
     ,o.BirthdayBonus
     ,o.DaysBeforeBirthday
     ,o.ExpDaysBirthday
    FROM dbo.Operator o
    WHERE o.BirthdayBonus > 0

  -- Узнаем количество строк в таблице
  SELECT
    @cnt = COUNT(*)
  FROM @OperatorBirthday
  -- Задаем начальное значение
  SET @i = 1

  -- Цикл по операторам
  WHILE @cnt >= @i
  BEGIN
  SELECT
    @operator = Operator
   ,@birthdaybonus = BirthdayBonus
   ,@daysbeforebirthday = DaysBeforeBirthday
   ,@expdaysbirthday = ExpDaysBirthday
  FROM @OperatorBirthday
  WHERE Id = @i

  IF @daysbeforebirthday IS NULL
    OR @daysbeforebirthday < 0
    SET @daysbeforebirthday = 0

  -- Если бонусы должны сгорать
  IF @expdaysbirthday IS NOT NULL
  BEGIN
    SET @birthdate = DATEADD(DAY, @daysbeforebirthday - @expdaysbirthday, @today)
    -- Курсор списания бонусов клиентам оператора
    DECLARE tBirthdayRedeem CURSOR LOCAL FAST_FORWARD FOR SELECT
      c.number
    FROM card c
    LEFT JOIN clientoperator co
      ON c.client = co.client
    WHERE c.Operator = @operator
    AND co.Operator = @operator
    AND MONTH(co.birthdate) = MONTH(@birthdate)
    AND DAY(co.birthdate) = DAY(@birthdate)
    OPEN tBirthdayRedeem
    FETCH NEXT FROM tBirthdayRedeem INTO @card
    WHILE @@fetch_status = 0
    BEGIN
    -- Перед списанием проверяем что есть положительный бонус
    IF EXISTS (SELECT
          1
        FROM dbo.bonus b
        WHERE b.card = @card
        AND b.bonus > 0
        AND b.source = 6
        AND b.proctime > DATEADD(DAY, (-2) * @expdaysbirthday, GETDATE()))
    BEGIN
      SELECT
        @redeemed = -SUM(bonus)
      FROM bonus
      WHERE card = @card
      AND ((bonus < 0
      AND (Refund IS NULL
      OR Refund = 0))
      OR (bonus > 0
      AND Refund = 1))
      AND proctime > DATEADD(DAY, (-1) * @expdaysbirthday, GETDATE())
      IF @redeemed IS NULL
        SET @redeemed = 0
      IF @redeemed <= @birthdaybonus
      BEGIN
        SET @bonus = @redeemed - @birthdaybonus
        SELECT
          @card AS card
         ,@operator AS operator
        EXEC BonusAdd @card = @card
                     ,@operator = @operator
                     ,@bonus = @bonus
                     ,@source = 6
      END
    END
    FETCH NEXT FROM tBirthdayRedeem INTO @card
    END
    CLOSE tBirthdayRedeem
    DEALLOCATE tBirthdayRedeem
  -- Конец курсора
  END

  -- Увеличивам значение на 1
  SET @i = @i + 1
  END
  -- Конец цикла по операторам

  SET NOCOUNT OFF
  RETURN (0)'
	
	
END ELSE IF @version = 312 BEGIN
	SELECT '3.13 20170929 Медянин'
	
	IF OBJECT_ID('BirthdayProcess') IS NOT NULL DROP PROCEDURE BirthdayProcess
	EXEC sp_executesql @statement = N'CREATE PROCEDURE BirthdayProcess
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @today DATE = GETDATE(), @birthdaybonus NUMERIC(9,2) = NULL, @card BIGINT = NULL, @operator SMALLINT = NULL, @begindate DATE = NULL, @redeemed NUMERIC(9,2) = NULL, @daysbeforebirthday SMALLINT = NULL, @expdaysbirthday SMALLINT = NULL, @birthdate DATE = NULL, @expdate DATE = NULL, @bonus NUMERIC(9,2) = NULL, @phone BIGINT = NULL, @remaindatebonus DATE = NULL
	DECLARE tBirthday CURSOR LOCAL FAST_FORWARD FOR SELECT id, birthdaybonus, daysbeforebirthday, expdaysbirthday FROM operator WHERE birthdaybonus > 0
	OPEN tBirthday
	FETCH NEXT FROM tBirthday INTO @operator, @birthdaybonus, @daysbeforebirthday, @expdaysbirthday
	WHILE @@FETCH_STATUS = 0 BEGIN
		IF @daysbeforebirthday IS NULL OR @daysbeforebirthday < 0 SET @daysbeforebirthday = 0
		SET @birthdate = DATEADD(day, @daysbeforebirthday, @today)
		DECLARE tBirthdateAdd CURSOR LOCAL FAST_FORWARD FOR SELECT c.number, co.phone FROM card c LEFT JOIN clientoperator co ON c.client = co.client WHERE c.operator = @operator AND co.operator = @operator AND MONTH(co.birthdate) = MONTH(@birthdate) AND DAY(co.birthdate) = DAY(@birthdate)
		OPEN tBirthdateAdd
		FETCH NEXT FROM tBirthdateAdd INTO @card, @phone
		WHILE @@FETCH_STATUS = 0 BEGIN
			IF NOT EXISTS (SELECT id FROM bonus WHERE card = @card AND source = 6 AND proctime > GETDATE() - 364)
				EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @birthdaybonus, @source = 6
			SET @remaindatebonus = DATEADD(DAY, @expdaysbirthday, @today)
			IF @phone IS NOT NULL
				EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @birthdaybonus, @birthdaybonus = 1, @birthdaydate = @remaindatebonus, @errormessage = @errormessage OUTPUT
			FETCH NEXT FROM tBirthdateAdd INTO @card, @phone
		END
		CLOSE tBirthdateAdd
		DEALLOCATE tBirthdateAdd
		IF @expdaysbirthday IS NOT NULL	BEGIN
			SET @birthdate = DATEADD(day, @daysbeforebirthday - @expdaysbirthday, @today)
			DECLARE tBirthdayRedeem CURSOR LOCAL FAST_FORWARD FOR SELECT c.number FROM card c LEFT JOIN clientoperator co ON c.client = co.client WHERE c.operator = @operator AND co.operator = @operator AND MONTH(co.birthdate) = MONTH(@birthdate) AND DAY(co.birthdate) = DAY(@birthdate)
			OPEN tBirthdayRedeem
			FETCH NEXT FROM tBirthdayRedeem INTO @card
			WHILE @@FETCH_STATUS = 0 BEGIN
				SELECT @redeemed = - SUM(bonus) FROM bonus WHERE card = @card AND ((bonus < 0 AND (refund IS NULL OR refund = 0)) OR (bonus > 0 AND refund = 1)) AND proctime > DATEADD(DAY, (-1)*@expdaysbirthday, GETDATE())
				IF @redeemed IS NULL SET @redeemed = 0
				IF @redeemed <= @birthdaybonus BEGIN
					SET @bonus = @redeemed - @birthdaybonus
					select @card AS card, @operator as operator
					IF EXISTS (SELECT id FROM bonus WHERE card = @card AND source = 6 AND proctime > GETDATE() - 364)
						EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @bonus, @source = 6
				END
				FETCH NEXT FROM tBirthdayRedeem INTO @card
			END
			CLOSE tBirthdayRedeem
			DEALLOCATE tBirthdayRedeem			
		END
		FETCH NEXT FROM tBirthday INTO @operator, @birthdaybonus, @daysbeforebirthday, @expdaysbirthday
	END
	CLOSE tBirthday
	DEALLOCATE tBirthday
	RETURN (0)'
	
END ELSE IF @version = 313 BEGIN
	SELECT '3.14 20171003 Смирнов'

	--Удалены бонусы не за покупки. Бонусы при возвратах указываются со знаком "минус"
	IF OBJECT_ID('[Reports].[PosSales]') IS NOT NULL DROP PROCEDURE [Reports].[PosSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PosSales
			@from date = NULL,
			@to date = NULL, 
			@operator smallint = NULL,
			@partner smallint = NULL,
			@pos nvarchar(10) = NULL,
			@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END
		IF(NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(2)
		END
		IF(NOT EXISTS(SELECT id FROM pos WHERE code = @pos))
		BEGIN
			SET @errormessage = N''Торговая точка не найдена''
			RETURN(3)
		END

		DECLARE @bonuses AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @bonuscheques AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT,
			chequeamount NUMERIC(9,2),
			operationtype NVARCHAR(20)
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @beginDate DATE, @endDate DATE

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
		SELECT
			CASE 
				WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
				WHEN bs.bonus > 0 AND bs.refund = 1 THEN (-1)*bs.bonus
				WHEN bs.bonus <= 0 THEN 0
			END AS bonusAdded,
			CASE 
				WHEN bs.bonus > 0 THEN 0
				WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
				WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
			END AS bonusRedeemed,
			bs.cheque,
			COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
			bs.proctime,
			bs.card,
			bs.partner
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			bs.operator = @operator
			AND bs.proctime >= @beginDate
			AND bs.proctime < @endDate
			
		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
		SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
		
		UPDATE 
			bs 
		SET 
			bs.partner = ce.partner,
			bs.pos = ce.pos, 
			bs.chequeamount = ce.amount, 
			bs.proctime = ce.chequetime,
			bs.operationtype = (CASE ce.refund
									WHEN 0 THEN N''Покупка''
									WHEN NULL THEN N''Покупка''
									WHEN 1 THEN N''Возврат''
								END) 
		FROM 
			@bonuscheques AS bs 
			INNER JOIN cheque AS ce ON bs.cheque = ce.id
			
		SELECT
			(SELECT name FROM partner WHERE id = @partner) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = @partner AND code = @pos) AS address,
			COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END AS gender,
			COALESCE(cr.phone, ct.phone, 0) AS phone,
			COALESCE(cr.email, ct.email, '''') AS email,
			cd.number,
			COALESCE(ce.Name, '''') AS ClientType, 
			CASE
				WHEN cr.pos = (SELECT id FROM pos WHERE code = @pos) THEN N''Да''
				ELSE N''Нет''
			END,
			COALESCE(bs.operationtype, bs.bonussource),
			CASE
				WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
				WHEN bs.chequeamount IS NULL THEN 0
			END AS [Сумма операции],
			bs.bonusAdded AS [Начислено бонусов],
			bs.bonusRedeemed AS [Списано бонусов],
			bs.proctime AS chequetime
		FROM
			@bonuscheques AS bs
			INNER JOIN card AS cd ON bs.card = cd.number
			INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
			INNER JOIN client AS ct ON ct.id = cd.client
			LEFT JOIN cardtype AS ce ON cd.type = ce.id
		WHERE
			cd.operator = @operator
			AND (bs.pos = (SELECT id FROM pos WHERE partner = @partner AND code = @pos) OR bs.pos IS NULL)
		ORDER BY
			bs.proctime DESC
		RETURN(0)
	END'

	--Удалены бонусы не за покупки. Бонусы при возвратах указываются со знаком "минус"
	IF OBJECT_ID('[Reports].[PartnerSales]') IS NOT NULL DROP PROCEDURE [Reports].[PartnerSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerSales
			@from date = NULL,
			@to date = NULL, 
			@operator smallint = NULL,
			@partner smallint = NULL,
			@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END
		IF(NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(2)
		END

		DECLARE @bonuses AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @bonuscheques AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT,
			chequeamount NUMERIC(9,2),
			operationtype NVARCHAR(20)
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @beginDate DATE, @endDate DATE

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
		SELECT
			CASE 
				WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
				WHEN bs.bonus > 0 AND bs.refund = 1 THEN (-1)*bs.bonus
				WHEN bs.bonus <= 0 THEN 0
			END AS bonusAdded,
			CASE 
				WHEN bs.bonus > 0 THEN 0
				WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
				WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
			END AS bonusRedeemed,
			bs.cheque,
			COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
			bs.proctime,
			bs.card,
			bs.partner
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			bs.operator = @operator
			AND bs.proctime >= @beginDate
			AND bs.proctime < @endDate
			
		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
		SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
		
		UPDATE 
			bs 
		SET 
			bs.partner = ce.partner,
			bs.pos = ce.pos, 
			bs.chequeamount = ce.amount, 
			bs.proctime = ce.chequetime,
			bs.operationtype = (CASE ce.refund
									WHEN 0 THEN N''Покупка''
									WHEN NULL THEN N''Покупка''
									WHEN 1 THEN N''Возврат''
								END) 
		FROM 
			@bonuscheques AS bs 
			INNER JOIN cheque AS ce ON bs.cheque = ce.id
			
		SELECT
			(SELECT name FROM partner WHERE id = @partner) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = @partner AND ps.id = bs.pos) AS address,
			COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END AS gender,
			COALESCE(cr.phone, ct.phone, 0) AS phone,
			COALESCE(cr.email, ct.email, '''') AS email,
			cd.number,
			COALESCE(ce.Name, '''') AS ClientType, 
			CASE
				WHEN cr.pos = bs.pos THEN N''Да''
				ELSE N''Нет''
			END,
			COALESCE(bs.operationtype, bs.bonussource),
			CASE
				WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
				WHEN bs.chequeamount IS NULL THEN 0
			END AS [Сумма операции],
			bs.bonusAdded AS [Начислено бонусов],
			bs.bonusRedeemed AS [Списано бонусов],
			bs.proctime AS chequetime
		FROM
			@bonuscheques AS bs
			INNER JOIN card AS cd ON bs.card = cd.number
			INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
			INNER JOIN client AS ct ON ct.id = cd.client
			LEFT JOIN cardtype AS ce ON cd.type = ce.id
		WHERE
			cd.operator = @operator
			AND (bs.partner = @partner OR bs.partner IS NULL)
		ORDER BY
			bs.proctime DESC
		RETURN(0)
	END'

	--Удалены бонусы не за покупки. Бонусы при возвратах указываются со знаком "минус"
	IF OBJECT_ID('[Reports].[OperatorSales]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorSales @from date = NULL,
				@to date = NULL, 
				@operator smallint = NULL,
				@errormessage nvarchar(100) OUTPUT
		AS
		BEGIN
			IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
			BEGIN
				SET @errormessage = N''Оператор не найден''
				RETURN(1)
			END

			DECLARE @bonuses AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @bonuscheques AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT,
				chequeamount NUMERIC(9,2),
				operationtype NVARCHAR(20)
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @beginDate DATE, @endDate DATE

			SET @to = DATEADD(DAY, 1, (@to))
			SET @beginDate = @from
			SET @endDate = @to

			INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
			SELECT
				CASE 
					WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
					WHEN bs.bonus > 0 AND bs.refund = 1 THEN (-1)*bs.bonus
					WHEN bs.bonus <= 0 THEN 0
				END AS bonusAdded,
				CASE 
					WHEN bs.bonus > 0 THEN 0
					WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
					WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
				END AS bonusRedeemed,
				bs.cheque,
				COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
				bs.proctime,
				bs.card,
				bs.partner
			FROM
				bonus AS bs
				LEFT JOIN bonussource AS be ON bs.source = be.code
			WHERE
				bs.operator = @operator
				AND bs.proctime >= @beginDate
				AND bs.proctime < @endDate
			
			INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
			SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
		
			UPDATE 
				bs 
			SET 
				bs.partner = ce.partner,
				bs.pos = ce.pos, 
				bs.chequeamount = ce.amount, 
				bs.proctime = ce.chequetime,
				bs.operationtype = (CASE ce.refund
										WHEN 0 THEN N''Покупка''
										WHEN NULL THEN N''Покупка''
										WHEN 1 THEN N''Возврат''
									END) 
			FROM 
				@bonuscheques AS bs 
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			
			SELECT
				(SELECT name FROM partner WHERE id = bs.partner) AS brand,
				(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = bs.partner AND ps.id = bs.pos) AS address,
				COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
				CASE cr.gender
					WHEN 0 THEN N''Женский''
					WHEN 1 THEN N''Мужской''
					ELSE N''Неизвестен''
				END AS gender,
				COALESCE(cr.phone, ct.phone, 0) AS phone,
				COALESCE(cr.email, ct.email, '''') AS email,
				cd.number,
				COALESCE(ce.Name, '''') AS ClientType,
				bs.proctime AS chequetime,
				COALESCE(bs.operationtype, bs.bonussource),
				CASE
					WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
					WHEN bs.chequeamount IS NULL THEN 0
				END AS [Сумма операции],
				bs.bonusAdded AS [Начислено бонусов],
				bs.bonusRedeemed AS [Списано бонусов]
			FROM
				@bonuscheques AS bs
				INNER JOIN card AS cd ON bs.card = cd.number
				INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
				INNER JOIN client AS ct ON ct.id = cd.client
				LEFT JOIN cardtype AS ce ON cd.type = ce.id
			WHERE
				cd.operator = @operator
			ORDER BY
				bs.proctime DESC
			RETURN(0)
		END'

	--В столбцах начислено и списано не учитываются бонусы за возвраты
	IF OBJECT_ID('[Reports].[PosClient]') IS NOT NULL DROP PROCEDURE [Reports].[PosClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PosClient
			@from date = null,
			@to date = null, 
			@operator smallint = NULL,
			@partner smallint = NULL,
			@pos nvarchar(10) = NULL,
			@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END
		IF(NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(2)
		END
		IF(NOT EXISTS(SELECT id FROM pos WHERE code = @pos))
		BEGIN
			SET @errormessage = N''Торговая точка не найдена''
			RETURN(3)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos = (SELECT id FROM pos WHERE partner = @partner AND code = @pos)
			
		SELECT
			(SELECT name FROM partner WHERE id = @partner) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = @partner AND code = @pos) AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],			
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
		RETURN(0)
	END'

	--В столбцах начислено и списано не учитываются бонусы за возвраты
	IF OBJECT_ID('Reports.PartnerClient') IS NOT NULL DROP PROCEDURE Reports.PartnerClient
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerClient @from date = NULL,
			@to date = NULL, 
			@operator smallint = NULL,
			@partner SMALLINT = NULL,
			@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			chequetime DATETIME,
			pos SMALLINT
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card, chequetime, pos)
		SELECT
			id,
			amount,
			refund,
			card,
			chequetime,
			pos
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner = @partner)
			
		SELECT
			(SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cs.pos) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cs.pos) AS address,
			COALESCE(cr.name, '''') + '' '' + COALESCE(cr.surname, '''') + '' '' + COALESCE(cr.patronymic, '''') AS fullName,
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END AS gender,
			COALESCE(cr.phone, ct.phone, 0) AS phone,
			COALESCE(cr.email, ct.email, '''') AS email,
			cd.number,
			COALESCE(ce.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			@cheques AS cs
			INNER JOIN card AS cd ON cs.card = cd.number
			INNER JOIN client AS ct ON cd.client = ct.id
			INNER JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS ce ON cd.type = ce.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
		ORDER BY
			chequetime DESC
		RETURN(0)
	END'

	--В столбцах начислено и списано не учитываются бонусы за возвраты
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			
		SELECT
			COALESCE((SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cr.pos), (SELECT name FROM operator WHERE id = @operator)) AS brand,
			COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos),N''Нет'') AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
		RETURN(0)
	END'

	-- добавлены колонки "начислено за возврат" и "списано за возврат", количество клиентов, зарегистрированных партнёром
	IF OBJECT_ID('[Reports].[PartnerBookkeeping]') IS NOT NULL DROP PROCEDURE [Reports].[PartnerBookkeeping]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerBookkeeping 
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Не найден партнёр''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE operator = op.id AND partner = pr.id AND (refund = 0 OR refund IS NULL)) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT SUM(amount) FROM cheque WHERE operator = op.id AND partner = pr.id AND refund = 1) AS RefundSum,
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,
			(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id)) AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
			AND pr.id = @partner
		RETURN(0)
	END'

	-- добавлены колонки "начислено за возврат" и "списано за возврат", количество клиентов, зарегистрированных партнёром
	IF OBJECT_ID('[Reports].[OperatorBookkeeping]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorBookkeeping]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorBookkeeping 
	@operator SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@operatorName NVARCHAR(20) OUTPUT,
	@welcomebonus NUMERIC(9,2) OUTPUT,
	@birthdaybonus NUMERIC(9,2) OUTPUT,
	@qtyclient INT OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SET @operatorName = (SELECT name FROM operator WHERE id = @operator)
		SET @welcomebonus = (SELECT SUM(bonus) FROM bonus WHERE operator = @operator AND proctime >= @from AND proctime < @to AND source = 4)
		SET @birthdaybonus = (SELECT SUM(bonus) FROM bonus WHERE operator = @operator AND bonus > 0 AND proctime >= @from AND proctime < @to AND source = 6)
		SET @qtyclient = (SELECT COUNT(distinct client) FROM clientoperator WHERE operator = @operator)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE operator = op.id AND partner = pr.id AND (refund = 0 OR refund IS NULL)) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT (-1)*SUM(amount) FROM cheque WHERE operator = op.id AND partner = pr.id AND refund = 1) AS RefundSum,
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,			
			(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id)) AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
		RETURN(0)
	END'

	--Отчёт по бонусам не за покупки оператора
	IF OBJECT_ID('[Reports].[OperatorBonus]') IS NOT NULL DROP PROCEDURE [Reports].OperatorBonus
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorBonus
		@from date = null,
		@to date = null, 
		@operator smallint = 40,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		SELECT 
			bs.proctime,
			be.name,
			CASE 
				WHEN bs.bonus > 0 THEN bs.bonus
				WHEN bs.bonus < 0 THEN 0
			END AS bonusAdded,
			CASE 
				WHEN bs.bonus > 0 THEN 0
				WHEN bs.bonus < 0 THEN bs.bonus
			END AS bonusRedeemed,
			COALESCE(cr.surname, '''') + '' '' + coalesce(cr.name, '''') + '' '' + COALESCE(cr.patronymic, '''') as name, 
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			cr.phone,
			cr.email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType 
		FROM
			bonus AS bs
			INNER JOIN bonussource AS be ON bs.source = be.code
			INNER JOIN card AS cd ON bs.card = cd.number
			INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cd.operator = cr.operator
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE	
			cr.operator = @operator
			AND cd.operator = @operator
			AND bs.source > 1
			AND bs.proctime > @from
			AND bs.proctime <= @to
		RETURN(0)
	END'
	
	
END ELSE IF @version = 314 BEGIN
	SELECT '3.15 20171006 Медянин'
	
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @cardoperator SMALLINT = NULL, @virtual BIT = 0, @welcomebonus NUMERIC(9,2) = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @result INT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL, @base10 BIGINT = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend FROM operator WHERE id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend FROM operator WHERE name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END ELSE BEGIN
		SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL
	BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	RETURN (0)'
	
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	IF EXISTS (SELECT * FROM systypes WHERE name = 'ChequeItems') DROP TYPE ChequeItems
	CREATE TYPE ChequeItems AS TABLE(
	 position INT NULL,
	 code NVARCHAR(10) NULL,
	 price NUMERIC(9,2) NULL,
	 quantity NUMERIC(9,2) NULL,
	 amount NUMERIC(9,2) NULL,
	 paidbybonus NUMERIC(9,2) NULL,
	 maxprice NUMERIC(9,2) NULL,
	 noadd BIT NULL,
	 noredeem BIT
	)
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonusid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @noadd BIT, @noredeem BIT, @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @qtyChequePosition INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL SET @added = 0
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL SELECT @partner = id FROM partner WHERE name = @partnername
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount = 0 SET @amount = NULL IF @card = 0 SET @card = NULL IF @phone = 0 SET @phone = NULL IF @paidbybonus = 0 SET @paidbybonus = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление бонусов невозможно на деактивированную карту'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @items IS NOT NULL BEGIN
		DECLARE @itemlen TINYINT = 56, @itemtable ChequeItems, @itemsum NUMERIC(9,2) = 0, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, @itemlen)
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @noadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				SET @noredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus)
			EXEC @result = _BonusCheque @card = @card, @partner = @partner, @amount = @iamount, @paidbybonus = @ipaidbybonus, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
			SET @added = @added + @bonus
		END
		SET @norules = 1
		IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	END ELSE BEGIN
		SET @qtyChequePosition = (SELECT COUNT(*) FROM @chequeitems)
		IF(@qtyChequePosition > 0) BEGIN
			SET @norules = 1
			IF (@amount <> (SELECT SUM(amount) FROM @chequeitems)) BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
		END
	END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @nowrite IS NOT NULL BEGIN
		IF @items IS NULL BEGIN
			EXEC @result = _BonusCheque @card = @card, @partner = @partner, @amount = @amount, @paidbybonus = @paidbybonus, @chequetime = @chequetime, @bonus = @added OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
		END
		RETURN (0)
	END
	IF @paidbybonus IS NOT NULL BEGIN
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 RETURN (@result)
	END
	INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
	SET @cheque = SCOPE_IDENTITY()
	IF(@items IS NOT NULL) INSERT INTO item (position, cheque, code, price, quantity, amount, paidbybonus) SELECT position, @cheque, code, price, quantity, amount, paidbybonus FROM @itemtable
	IF(@qtyChequePosition > 0) BEGIN
		INSERT INTO item (position, cheque, code, price, quantity, amount, paidbybonus) 
		SELECT position, @cheque, code, price, quantity, amount, paidbybonus FROM @chequeitems
	END
	SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
	IF @@ROWCOUNT > 0 IF @bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10
		UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	SET @oldbalance = @balance
	SELECT @balance = balance FROM card WHERE number = @card
	SET @added = @balance - @oldbalance
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
			
	IF OBJECT_ID('BalanceGet') IS NOT NULL DROP PROCEDURE BalanceGet
	EXEC sp_executesql @statement = N'CREATE PROCEDURE BalanceGet
	@card BIGINT = NULL OUTPUT,
	@cardnumber NVARCHAR(18) = NULL,
	@phone BIGINT = NULL OUTPUT,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@status TINYINT = 0 OUTPUT,
	@type NVARCHAR(20) = '''' OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchases SMALLINT = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@charged NUMERIC(9,2) = 0 OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL
	IF @operatorname IS NOT NULL SELECT @operator = id FROM operator WHERE name = @operatorname
	IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	IF @partnername IS NOT NULL SELECT @partner = id FROM partner WHERE name = @partnername
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	EXEC @result = Identify @phone = @phone, @card = @card OUTPUT, @operator = @operator, @partner = @partner, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @operatorname IS NOT NULL SELECT @status = status, @type = type, @fullbalance = fullbalance, @purchases = purchases, @purchasesum = purchasesum, @charged = charged, @redeemed = redeemed FROM card WHERE number = @card
	ELSE SELECT @phone = COALESCE(cr.phone, ct.phone) FROM card AS cd LEFT JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator LEFT JOIN client AS ct ON cd.client = ct.id WHERE cd.number = @card
	RETURN (0)'
	
END ELSE IF @version = 315 BEGIN
	SELECT '3.16 20171009 Смирнов'
	
	--Исправлено. Если отсутствуют welcome бонусы и birthday бонусы, то подставляется 0
	IF OBJECT_ID('[Reports].[OperatorBookkeeping]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorBookkeeping]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorBookkeeping 
	@operator SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@operatorName NVARCHAR(20) OUTPUT,
	@welcomebonus NUMERIC(9,2) OUTPUT,
	@birthdaybonus NUMERIC(9,2) OUTPUT,
	@qtyclient INT OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SET @operatorName = (SELECT name FROM operator WHERE id = @operator)
		SET @welcomebonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND proctime >= @from AND proctime < @to AND source = 4)
		SET @birthdaybonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND proctime >= @from AND proctime < @to AND source = 6)
		SET @qtyclient = (SELECT COUNT(distinct client) FROM clientoperator WHERE operator = @operator)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE operator = op.id AND partner = pr.id AND (refund = 0 OR refund IS NULL)) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT (-1)*SUM(amount) FROM cheque WHERE operator = op.id AND partner = pr.id AND refund = 1) AS RefundSum,
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,			
			(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id)) AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
		RETURN(0)
	END'

END ELSE IF @version = 316 BEGIN
	SELECT '3.17 20171010 Смирнов'

	--Исправлено. Фильтрация клиентов идёт по дате регистрации. Количество клиентов оператора считается по заполненному паролю и незаполненной ТТ
	IF OBJECT_ID('[Reports].[OperatorBookkeeping]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorBookkeeping]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorBookkeeping 
	@operator SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@operatorName NVARCHAR(20) OUTPUT,
	@welcomebonus NUMERIC(9,2) OUTPUT,
	@birthdaybonus NUMERIC(9,2) OUTPUT,
	@qtyclient INT OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SET @operatorName = (SELECT name FROM operator WHERE id = @operator)
		SET @welcomebonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND proctime >= @from AND proctime < @to AND source = 4)
		SET @birthdaybonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND proctime >= @from AND proctime < @to AND source = 6)
		SET @qtyclient = (SELECT COUNT(distinct client) FROM clientoperator WHERE operator = @operator AND password IS NOT NULL AND pos IS NULL AND regdate >= @from AND regdate <= @to)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND (refund = 0 OR refund IS NULL) AND proctime >= @from AND proctime < @to) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND refund = 1 AND proctime >= @from AND proctime < @to) AS RefundSum,
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,	
			CASE
				WHEN pr.name = N''m5reception'' THEN (SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND regdate >= @from AND regdate <= @to AND operator = op.id) + 
													(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IS NULL AND password IS NULL AND regdate >= @from AND regdate <= @to AND operator = op.id)
				ELSE (SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND operator = op.id AND regdate >= @from AND regdate <= @to) 
				END
				AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
		RETURN(0)
	END'

	--Исправлено. Фильтрация клиентов идёт по дате регистрации.
	IF OBJECT_ID('[Reports].[PartnerBookkeeping]') IS NOT NULL DROP PROCEDURE [Reports].[PartnerBookkeeping]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerBookkeeping 
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Не найден партнёр''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND (refund = 0 OR refund IS NULL) AND proctime >= @from AND proctime < @to) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND refund = 1 AND proctime >= @from AND proctime < @to) AS RefundSum,
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,
			(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND regdate >= @from AND regdate <= @to AND operator = op.id) AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
			AND pr.id = @partner
		RETURN(0)
	END'
	
	
END ELSE IF @version = 317 BEGIN
	SELECT '3.18 20171012 Медянин'
	
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'maxredeem' AND id = (SELECT id FROM sysobjects WHERE name = 'operator'))
		ALTER TABLE operator ADD maxredeem NUMERIC(9,2)
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'maxredeem' AND id = (SELECT id FROM sysobjects WHERE name = 'partner'))
		ALTER TABLE partner ADD maxredeem NUMERIC(9,2)
	
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	IF EXISTS (SELECT * FROM systypes WHERE name = 'ChequeItems') DROP TYPE ChequeItems
	CREATE TYPE ChequeItems AS TABLE(id INT IDENTITY(1,1), position SMALLINT, code NVARCHAR(10), price NUMERIC(9,2), quantity NUMERIC(9,2), amount NUMERIC(9,2), paidbybonus NUMERIC(9,2), minprice NUMERIC(9,2), noadd BIT, noredeem BIT, maxredeem NUMERIC(9,2), added NUMERIC(9,2), redeemed NUMERIC(9,2))
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @noadd BIT, @noredeem BIT, @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @qtyChequePosition INT = NULL, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL SET @added = 0 IF @redeemed = 0 SET @redeemed = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount = 0 SET @amount = NULL IF @card = 0 SET @card = NULL IF @phone = 0 SET @phone = NULL IF @paidbybonus = 0 SET @paidbybonus = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление бонусов невозможно на деактивированную карту'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @items IS NOT NULL BEGIN
		DECLARE @itemlen TINYINT = 56, @itemtable ChequeItems, @itemsum NUMERIC(9,2) = 0, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		SET @qtyChequePosition = 0
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, @itemlen)
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @noadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				SET @noredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
			IF @nowrite IS NOT NULL AND (@noadd IS NULL OR @noadd = 0) BEGIN
				SET @bonus = 0
				EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @ipaidbybonus, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
				SET @added = @added + @bonus
			END
			SET @qtyChequePosition = @qtyChequePosition + 1
		END
		SET @norules = 1
		IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	END ELSE BEGIN
		SET @qtyChequePosition = (SELECT COUNT(*) FROM @chequeitems)
		IF(@qtyChequePosition > 0) BEGIN
			SET @norules = 1
			IF (@amount <> (SELECT SUM(amount) FROM @chequeitems)) BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
		END
	END
	IF @nowrite IS NOT NULL BEGIN
		IF @items IS NULL
			EXEC @result = _BonusCheque @card = @card, @partner = @partner, @amount = @amount, @paidbybonus = @paidbybonus, @chequetime = @chequetime, @bonus = @added OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @qtyChequePosition > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @qtyChequePosition BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @noredeem = noredeem FROM @itemtable WHERE id = @i
				IF @noredeem IS NULL OR @noredeem = 0 BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			IF @balance < @maxredeem BEGIN
				DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @qtyChequePosition BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @noredeem = noredeem FROM @itemtable WHERE id = @i
					IF @noredeem IS NULL OR @noredeem = 0 BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem
					SET @maxredeem = @balance
				END
			END
			SELECT position, code, price, quantity, amount, maxredeem, redeemed FROM @itemtable
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
		RETURN (0)
	END
	IF @operatorname IS NOT NULL AND @paidbybonus IS NOT NULL BEGIN
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
	END
	INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
	SET @cheque = SCOPE_IDENTITY()
	IF(@items IS NOT NULL) INSERT INTO item (position, cheque, code, price, quantity, amount, paidbybonus) SELECT position, @cheque, code, price, quantity, amount, paidbybonus FROM @itemtable
	IF(@qtyChequePosition > 0) BEGIN
		INSERT INTO item (position, cheque, code, price, quantity, amount, paidbybonus) 
		SELECT position, @cheque, code, price, quantity, amount, paidbybonus FROM @chequeitems
	END
	IF @bonusid IS NULL BEGIN
		SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
		IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
	END
	IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	SET @oldbalance = @balance
	SELECT @balance = balance FROM card WHERE number = @card
	SET @added = @balance - @oldbalance
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	RETURN(0)'
	
	IF OBJECT_ID('Redeem') IS NOT NULL DROP PROCEDURE Redeem
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Redeem
	@card BIGINT = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@bonus NUMERIC(9,2) = NULL,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@bonusid INT OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @cardoperator SMALLINT = NULL, @partneroperator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @partnername NVARCHAR(20) = NULL, @operator SMALLINT = NULL, @phoneend INT = NULL, @last4 SMALLINT = NULL, @middle2 TINYINT = NULL, @cardend INT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @freecard BIT = NULL, @freeredeem BIT = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не задан'' RETURN(7) END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (8) END
	SELECT @prefix = prefix, @numlen = numlen, @freecard = freecard, @freeredeem = freeredeem FROM operator WHERE id = @operator
	IF @phone IS NOT NULL IF @phone < 1000000 SET @phoneend = @phone%1000000
	IF @card IS NOT NULL IF @card < 100000 SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL BEGIN
		EXECUTE @result = _ClientGet @card OUTPUT, @phone, @client OUTPUT, @balance OUTPUT, @errormessage OUTPUT
		IF NOT @result = 0 RETURN (@result)
		IF @client IS NULL BEGIN SET @errormessage = ''Клиент не найден'' RETURN(7) END
	END ELSE BEGIN
		IF @operator IS NULL BEGIN SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' RETURN(9) END
		IF @phoneend IS NOT NULL BEGIN
			SET @last4 = @phoneend%10000 SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4
			ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
			IF @@ROWCOUNT > 1 BEGIN SET @errormessage = ''Найдено больше одного номера телефона с данным окончанием'' RETURN(10) END
		END ELSE
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend
		SELECT @balance = balance, @cardoperator = operator FROM card WHERE number = @card
		IF NOT @cardoperator = @operator BEGIN SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' RETURN(11) END
		IF @client IS NULL AND (@freecard = 0 OR @freecard IS NULL) AND (@freeredeem = 0 OR @freeredeem IS NULL) BEGIN SET @errormessage = ''Карта еще не привязана к клиенту'' RETURN (15) END
	END
	IF NOT EXISTS (SELECT number FROM card WHERE number = @card AND status = 0) BEGIN SET @errormessage = ''Списание возможно только с Активной карты'' RETURN (13) END
	IF @bonus IS NULL BEGIN SET @errormessage = ''Не задано количество списываемых бонусов'' RETURN(12) END
	IF @bonus > @balance BEGIN SET @errormessage = ''Недостаточный баланс'' RETURN(15) END
	SET @bonus = -@bonus
	EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @bonus, @operator = @operator, @partner = @partner, @errormessage = @errormessage OUTPUT, @source = 1, @id = @bonusid OUTPUT
	SET @oldbalance = @balance
	IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
	ELSE SELECT @balance = balance FROM card WHERE number = @card
	SET @redeemed = @oldbalance - @balance
	SELECT @partnername = name FROM partner WHERE id = @partner 
	IF @phoneend IS NOT NULL SELECT @phone = phone FROM client WHERE id = (SELECT client FROM card WHERE number = @card)
	IF @phone IS NULL SELECT TOP 1 @phone = number FROM phone WHERE card = @card AND validated = 1
	DECLARE @notsendsms bit = 1
	SELECT @notsendsms = noredeemsms FROM operator WHERE id = @operator
	--IF @phone IS NOT NULL and @notsendsms = 0
		--exec ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @redeemed = @redeemed, @errormessage = @errormessage output
	RETURN (0)'
	
	IF OBJECT_ID('BonusAdd') IS NOT NULL DROP PROCEDURE BonusAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE BonusAdd
	@card BIGINT = NULL,
	@phone BIGINT = NULL,
	@bonus NUMERIC(9,2) = NULL,
	@operator SMALLINT = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@partner SMALLINT = NULL,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@event SMALLINT = NULL,
	@source TINYINT = NULL,
	@id INT OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @balance NUMERIC(9,2)
	IF @event = 0 SET @event = NULL
	EXEC @result = Identify @phone = @phone, @partner = @partner, @operator = @operator OUTPUT, @card = @card OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @bonus IS NULL SET @bonus = 0
	IF @bonus = 0 BEGIN	SET @errormessage = ''Не задано количество бонусов'' RETURN (11) END
	INSERT INTO bonus (proctime, bonus, card, operator, cheque, refund, partner, event, source) VALUES (GETDATE(), @bonus, @card, @operator, @cheque, @refund, @partner, @event, @source)	
	SET @id = SCOPE_IDENTITY()
 	RETURN(0)'
	
	IF OBJECT_ID('Identify') IS NOT NULL DROP PROCEDURE Identify
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Identify
	@phone BIGINT = NULL, -- номер телефона, можно передавать не полный номер, а окончание, но тогда либо партнер, либо оператор должны быть заполнены
	@email NVARCHAR(30) = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT, -- номер карты, можно передавать не полный номер, а локальный (без префикса оператора), но тогда либо партнер, либо оператор должны быть заполнены
	@status TINYINT = NULL OUTPUT, -- статус карты
	@virtual BIT = NULL OUTPUT, -- признак виртуальной
	@balance NUMERIC(9,2) = NULL OUTPUT, -- активный баланс заодно
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @cardnumber BIGINT = NULL, @count INT = NULL, @last4 SMALLINT = NULL, @middle2 TINYINT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @freecard BIT = NULL, @cardoperator SMALLINT = NULL, @rows INT = NULL, @defaultoperator SMALLINT = NULL
	IF @phone = 0 SET @phone = NULL IF @partner = 0 SET @partner = NULL IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL
	IF @operator IS NULL BEGIN -- если не задан идентификатор оператора
		IF @partner IS NULL BEGIN -- если не задан и идентификатор партнера, то идентификатор оператора так и остается пустым, но заранее фиксируется идентификатор оператора по умолчанию
			IF @card IS NOT NULL SELECT @operator = operator FROM card WHERE number = @card
			IF @operator IS NULL BEGIN
				SELECT @defaultoperator = id FROM operator WHERE name = ''Оператор'' -- оператор по умолчанию
				IF @defaultoperator IS NULL BEGIN
					INSERT INTO operator (name) VALUES(''Оператор'')-- если нет - создание
					SET @defaultoperator = SCOPE_IDENTITY()
				END
			END
		END ELSE BEGIN -- оператор не задан, но партнер задан, оперируем им
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @operator IS NULL BEGIN SET @errormessage = ''Заданный идентификатор партнера не найден'' RETURN(1) END -- иначе говорим, что карты с заданным номером нет
		END
	END ELSE
		IF NOT EXISTS (SELECT id FROM operator WHERE id = @operator) BEGIN SET @errormessage = ''Заданный идентификатор Оператора ПЛ не найден'' RETURN(1) END -- проверка, задан ли оператор корректно, если он задан
	IF @card IS NOT NULL BEGIN -- если номер карты, на который надо выйти, уже задан, просто проверка на ее существование
		SET @cardnumber = @card SET @card = NULL
		SET @client = NULL
		SELECT @card = number, @client = client, @status = status, @balance = balance, @cardoperator = operator, @virtual = virtual FROM card WHERE number = @cardnumber
		IF @card IS NOT NULL BEGIN -- если номер карты найден, проверяем на привязку к клиенту и совпадение операторов
			SELECT @freecard = freecard FROM operator WHERE id = @cardoperator
			IF @cardoperator != @operator BEGIN	SET @errormessage = ''Карта другого оператора ПЛ'' RETURN(2) END -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
			ELSE IF @client IS NULL AND (@freecard IS NULL OR @freecard = 0) BEGIN SET @errormessage = ''Карта не привязана к клиенту, оператор не позволяет свободные карты'' RETURN(3) END -- карта может быть не привязана к клиенту только если у оператора разрешены свободные карты
			ELSE RETURN(0) -- если номер карты найден и клиент есть либо можно без него, оставляем номером карты заданный, успешный ответ
		END ELSE BEGIN -- номер карты не найден, может быть, задан локальный номер
			IF @operator IS NULL SET @operator = @defaultoperator -- нет оператора, чтобы работать с локальным номером карты - смотрим у оператора по умолчанию
			ELSE BEGIN
				SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
				IF @prefix IS NOT NULL AND @numlen IS NOT NULL BEGIN
					SET @maxlocal = POWER(10, @numlen - LEN(@prefix))
					IF @cardnumber < @maxlocal BEGIN
						SET @cardnumber = @prefix * @maxlocal + @cardnumber
						SET @client = NULL
						SELECT @card = number, @client = client, @status = status, @balance = balance, @operator = operator FROM card WHERE number = @cardnumber
					END
				END
			END
			IF @card IS NOT NULL BEGIN -- если номер карты найден, проверяем на привязку к клиенту
				SELECT @freecard = freecard FROM operator WHERE id = @operator
				IF @client IS NULL AND (@freecard IS NULL OR @freecard = 0) BEGIN SET @errormessage = ''Карта не привязана к клиенту, оператор не позволяет свободные карты'' RETURN(3) END -- карта может быть не привязана к клиенту только если у оператора разрешены свободные карты
				ELSE RETURN(0) -- если номер карты найден и клиент есть либо можно без него, оставляем номером карты заданный, успешный ответ
			END ELSE BEGIN SET @errormessage = ''Номер карты не найден'' RETURN(4) END -- иначе говорим, что карты с заданным номером нет
		END
	END
	IF @client IS NULL BEGIN -- если идентификатор клиента не задан - выходим на него всеми возможными средствами
		IF @phone IS NOT NULL BEGIN -- если не задан номер карты, но задан номер телефона - ищем по нему
			IF @phone > 9000000000 BEGIN-- если задан полный номер телефона
				SELECT @client = client FROM phone WHERE number = @phone -- ищем клиента, на которого ссылается полный телефон
				IF @client IS NULL BEGIN SET @errormessage = ''Не существует клиента с заданным номером телефона'' RETURN(5) END -- если клиент не найден
			END ELSE BEGIN -- если задан неполный номер телефона
				IF @operator IS NULL SET @operator = @defaultoperator -- нет оператора, чтобы работать с неполным номером телефона - смотрим у оператора по умолчанию
				SET @last4 = @phone%10000 SET @middle2 = FLOOR((@phone%1000000)/10000)
				IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 -- ищем карту по оператору и окончания телефона
				ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2 -- или по оператору, окончанию и серединке номера телефона 
				SET @rows = @@ROWCOUNT
				IF @rows > 1 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Окончание номера телефона не уникальное для заданного оператора''
					ELSE SET @errormessage = ''Окончание номера телефона не уникальное для оператора по умолчанию''
					RETURN(6)
				END	ELSE IF @rows < 1 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Номера телефонов с данным окончанием по заданному оператору не найдены''
					ELSE SET @errormessage = ''Номера телефонов с данным окончанием по оператору по умолчанию не найдены''
					RETURN(7)
				END
				ELSE BEGIN
					SELECT @client = client, @status = status, @balance = balance, @virtual = virtual FROM card WHERE number = @card -- статус и баланс еще берем
					RETURN(0) -- если номер карты найден, успешный ответ
				END
			END
		END	ELSE IF @email IS NOT NULL BEGIN -- если не задан номер карты, не задан номер телефона и задан E-mail - ищем по нему
			SELECT @client = client FROM email WHERE email = @email -- ищем клиента, на которого ссылается email
			IF @client IS NULL BEGIN SET @errormessage = ''Не существует клиента с заданным E-mail'' RETURN(5) END -- если клиент не найден
		END
	END
	IF @client IS NOT NULL BEGIN -- искомый клиент по ид, телефону или E-mail найден
		SET @card = NULL
		SELECT @card = card FROM client WHERE id = @client -- смотрим, есть ли у клиента единственная карта
		IF @card IS NOT NULL BEGIN -- у клиента единственная карта. Если не задан оператор изначально, считаем, что это она. Если задан - смотрим, этого оператора карта или нет.
			SELECT @status = status, @balance = balance, @cardoperator = operator, @virtual = virtual FROM card WHERE number = @card -- статус и баланс еще берем
			IF @operator IS NULL SET @operator = @cardoperator
			ELSE IF @cardoperator != @operator BEGIN -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
					IF @defaultoperator IS NULL SET @errormessage = ''Найденная карта не заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найденная карта не оператора ПЛ по умолчанию''
					RETURN(2)
				END
			RETURN(0) -- если номер карты найден, успешный ответ
		END ELSE BEGIN -- если у клиента не задана карта, то либо нет карт, либо больше одной - запускаем более медленный механизм уточнения номера карты, вероятность использования которого крайне мала - только если клиент в нескольких ПЛ
			SELECT @count = COUNT(*) FROM card WHERE client = @client
			IF @count = 0 BEGIN SET @errormessage = ''У клиента нет карт'' RETURN(8) END -- если у клиента нет карт
			ELSE IF @count = 1 BEGIN -- если у клиента все же одна карта, которая каким-то образом была из клиента, возвращаем ее и записываем клиенту
				SELECT @card = number, @cardoperator = operator, @status = status, @balance = balance, @virtual = virtual FROM card WHERE client = @client
				UPDATE client SET card = @card WHERE id = @client
				IF @operator IS NULL SET @operator = @cardoperator
				ELSE IF @cardoperator != @operator BEGIN -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
						IF @defaultoperator IS NULL SET @errormessage = ''Найденная карта не заданного оператора ПЛ''
						ELSE SET @errormessage = ''Найденная карта не оператора ПЛ по умолчанию''
						RETURN(2)
					END
				RETURN(0) -- если номер карты найден, успешный ответ
			END	ELSE BEGIN -- если у клиента более одной карты
				IF @operator IS NULL SET @operator = @defaultoperator
				SELECT @count = COUNT(*) FROM card WHERE client = @client AND operator = @operator
				IF @count = 0 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Найденные карты не заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найденные карты не оператора ПЛ по умолчанию''
					RETURN(2)
				END ELSE IF @count = 1 BEGIN
					SELECT @card = number, @status = status, @balance = balance, @virtual = virtual FROM card WHERE client = @client AND operator = @operator -- ищем карту теперь по клиенту и оператору
					RETURN(0) -- если номер карты найден, успешный ответ
				END ELSE BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Найдено более одной карты клиента заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найдено более одной карты клиента оператора ПЛ по умолчанию''
					RETURN(9)
				END
			END
		END
	END
	RETURN(0)'
	
	
END ELSE IF @version = 318 BEGIN
	SELECT '3.19 20171013 Смирнов'
	
	--Исправлено. Смс отправляется только в случае начисления бонусов.
	IF OBJECT_ID('BirthdayProcess') IS NOT NULL DROP PROCEDURE BirthdayProcess
	EXEC sp_executesql @statement = N'CREATE PROCEDURE BirthdayProcess
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @today DATE = GETDATE(), @birthdaybonus NUMERIC(9,2) = NULL, @card BIGINT = NULL, @operator SMALLINT = NULL, @begindate DATE = NULL, @redeemed NUMERIC(9,2) = NULL, @daysbeforebirthday SMALLINT = NULL, @expdaysbirthday SMALLINT = NULL, @birthdate DATE = NULL, @expdate DATE = NULL, @bonus NUMERIC(9,2) = NULL, @phone BIGINT = NULL, @remaindatebonus DATE = NULL
	DECLARE tBirthday CURSOR LOCAL FAST_FORWARD FOR SELECT id, birthdaybonus, daysbeforebirthday, expdaysbirthday FROM operator WHERE birthdaybonus > 0
	OPEN tBirthday
	FETCH NEXT FROM tBirthday INTO @operator, @birthdaybonus, @daysbeforebirthday, @expdaysbirthday
	WHILE @@FETCH_STATUS = 0 BEGIN
		IF @daysbeforebirthday IS NULL OR @daysbeforebirthday < 0 SET @daysbeforebirthday = 0
		SET @birthdate = DATEADD(day, @daysbeforebirthday, @today)
		DECLARE tBirthdateAdd CURSOR LOCAL FAST_FORWARD FOR SELECT c.number, co.phone FROM card c LEFT JOIN clientoperator co ON c.client = co.client WHERE c.operator = @operator AND co.operator = @operator AND MONTH(co.birthdate) = MONTH(@birthdate) AND DAY(co.birthdate) = DAY(@birthdate)
		OPEN tBirthdateAdd
		FETCH NEXT FROM tBirthdateAdd INTO @card, @phone
		WHILE @@FETCH_STATUS = 0 BEGIN
			IF NOT EXISTS (SELECT id FROM bonus WHERE card = @card AND source = 6 AND proctime > GETDATE() - 364)
			BEGIN
				EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @birthdaybonus, @source = 6
				SET @remaindatebonus = DATEADD(DAY, @expdaysbirthday, @today)
				IF @phone IS NOT NULL
				EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @birthdaybonus, @birthdaybonus = 1, @birthdaydate = @remaindatebonus, @errormessage = @errormessage OUTPUT
			END
			FETCH NEXT FROM tBirthdateAdd INTO @card, @phone
		END
		CLOSE tBirthdateAdd
		DEALLOCATE tBirthdateAdd
		IF @expdaysbirthday IS NOT NULL	BEGIN
			SET @birthdate = DATEADD(day, @daysbeforebirthday - @expdaysbirthday, @today)
			DECLARE tBirthdayRedeem CURSOR LOCAL FAST_FORWARD FOR SELECT c.number FROM card c LEFT JOIN clientoperator co ON c.client = co.client WHERE c.operator = @operator AND co.operator = @operator AND MONTH(co.birthdate) = MONTH(@birthdate) AND DAY(co.birthdate) = DAY(@birthdate)
			OPEN tBirthdayRedeem
			FETCH NEXT FROM tBirthdayRedeem INTO @card
			WHILE @@FETCH_STATUS = 0 BEGIN
				SELECT @redeemed = - SUM(bonus) FROM bonus WHERE card = @card AND ((bonus < 0 AND (refund IS NULL OR refund = 0)) OR (bonus > 0 AND refund = 1)) AND proctime > DATEADD(DAY, (-1)*@expdaysbirthday, GETDATE())
				IF @redeemed IS NULL SET @redeemed = 0
				IF @redeemed <= @birthdaybonus BEGIN
					SET @bonus = @redeemed - @birthdaybonus
					select @card AS card, @operator as operator
					IF EXISTS (SELECT id FROM bonus WHERE card = @card AND source = 6 AND proctime > GETDATE() - 364)
						EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @bonus, @source = 6
				END
				FETCH NEXT FROM tBirthdayRedeem INTO @card
			END
			CLOSE tBirthdayRedeem
			DEALLOCATE tBirthdayRedeem			
		END
		FETCH NEXT FROM tBirthday INTO @operator, @birthdaybonus, @daysbeforebirthday, @expdaysbirthday
	END
	CLOSE tBirthday
	DEALLOCATE tBirthday
	RETURN (0)'

	--Изменено. Поменяны местами начислено и списано бонусов за возвраты
	IF OBJECT_ID('[Reports].[OperatorBookkeeping]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorBookkeeping]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorBookkeeping 
	@operator SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@operatorName NVARCHAR(20) OUTPUT,
	@welcomebonus NUMERIC(9,2) OUTPUT,
	@birthdaybonus NUMERIC(9,2) OUTPUT,
	@qtyclient INT OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SET @operatorName = (SELECT name FROM operator WHERE id = @operator)
		SET @welcomebonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND proctime >= @from AND proctime < @to AND source = 4)
		SET @birthdaybonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND proctime >= @from AND proctime < @to AND source = 6)
		SET @qtyclient = (SELECT COUNT(distinct client) FROM clientoperator WHERE operator = @operator AND password IS NOT NULL AND pos IS NULL AND regdate >= @from AND regdate <= @to)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND (refund = 0 OR refund IS NULL) AND proctime >= @from AND proctime < @to) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND refund = 1 AND proctime >= @from AND proctime < @to) AS RefundSum,			
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,	
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,
			CASE
				WHEN pr.name = N''m5reception'' THEN (SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND regdate >= @from AND regdate <= @to AND operator = op.id) + 
													(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IS NULL AND password IS NULL AND regdate >= @from AND regdate <= @to AND operator = op.id)
				ELSE (SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND operator = op.id AND regdate >= @from AND regdate <= @to) 
				END
				AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
		RETURN(0)
	END'

	--Изменено. Поменяны местами начислено и списано бонусов за возвраты
	IF OBJECT_ID('[Reports].[PartnerBookkeeping]') IS NOT NULL DROP PROCEDURE [Reports].[PartnerBookkeeping]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerBookkeeping 
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Не найден партнёр''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND (refund = 0 OR refund IS NULL) AND proctime >= @from AND proctime < @to) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND refund = 1 AND proctime >= @from AND proctime < @to) AS RefundSum,
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,			
			(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND regdate >= @from AND regdate <= @to AND operator = op.id) AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
			AND pr.id = @partner
		RETURN(0)
	END'

	--Исправлено. Бонусы за возврат идут в той же колонке, что и бонусы за покупку
	IF OBJECT_ID('[Reports].[OperatorSales]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorSales @from date = NULL,
				@to date = NULL, 
				@operator smallint = NULL,
				@errormessage nvarchar(100) OUTPUT
		AS
		BEGIN
			IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
			BEGIN
				SET @errormessage = N''Оператор не найден''
				RETURN(1)
			END

			DECLARE @bonuses AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @bonuscheques AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT,
				chequeamount NUMERIC(9,2),
				operationtype NVARCHAR(20)
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @beginDate DATE, @endDate DATE

			SET @to = DATEADD(DAY, 1, (@to))
			SET @beginDate = @from
			SET @endDate = @to

			INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
			SELECT
				CASE 
					WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
					WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
					ELSE 0
				END AS bonusAdded,
				CASE 
					WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
					WHEN bs.bonus >= 0 AND bs.refund = 1 THEN (-1)*bs.bonus
					ELSE 0
				END AS bonusRedeemed,
				bs.cheque,
				COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
				bs.proctime,
				bs.card,
				bs.partner
			FROM
				bonus AS bs
				LEFT JOIN bonussource AS be ON bs.source = be.code
			WHERE
				bs.operator = @operator
				AND bs.proctime >= @beginDate
				AND bs.proctime < @endDate
			
			INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
			SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
		
			UPDATE 
				bs 
			SET 
				bs.partner = ce.partner,
				bs.pos = ce.pos, 
				bs.chequeamount = ce.amount, 
				bs.proctime = ce.chequetime,
				bs.operationtype = (CASE ce.refund
										WHEN 0 THEN N''Покупка''
										WHEN NULL THEN N''Покупка''
										WHEN 1 THEN N''Возврат''
									END) 
			FROM 
				@bonuscheques AS bs 
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			
			SELECT
				(SELECT name FROM partner WHERE id = bs.partner) AS brand,
				(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = bs.partner AND ps.id = bs.pos) AS address,
				COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
				CASE cr.gender
					WHEN 0 THEN N''Женский''
					WHEN 1 THEN N''Мужской''
					ELSE N''Неизвестен''
				END AS gender,
				COALESCE(cr.phone, ct.phone, 0) AS phone,
				COALESCE(cr.email, ct.email, '''') AS email,
				cd.number,
				COALESCE(ce.Name, '''') AS ClientType,
				bs.proctime AS chequetime,
				COALESCE(bs.operationtype, bs.bonussource),
				CASE
					WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
					WHEN bs.chequeamount IS NULL THEN 0
				END AS [Сумма операции],
				bs.bonusAdded AS [Начислено бонусов],
				bs.bonusRedeemed AS [Списано бонусов]
			FROM
				@bonuscheques AS bs
				INNER JOIN card AS cd ON bs.card = cd.number
				INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
				INNER JOIN client AS ct ON ct.id = cd.client
				LEFT JOIN cardtype AS ce ON cd.type = ce.id
			WHERE
				cd.operator = @operator
			ORDER BY
				bs.proctime DESC
			RETURN(0)
		END'

	--Исправлено. Бонусы за возврат идут в той же колонке, что и бонусы за покупку
	IF OBJECT_ID('[Reports].[PosSales]') IS NOT NULL DROP PROCEDURE [Reports].[PosSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PosSales
			@from date = NULL,
			@to date = NULL, 
			@operator smallint = NULL,
			@partner smallint = NULL,
			@pos nvarchar(10) = NULL,
			@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END
		IF(NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(2)
		END
		IF(NOT EXISTS(SELECT id FROM pos WHERE code = @pos))
		BEGIN
			SET @errormessage = N''Торговая точка не найдена''
			RETURN(3)
		END

		DECLARE @bonuses AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @bonuscheques AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT,
			chequeamount NUMERIC(9,2),
			operationtype NVARCHAR(20)
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @beginDate DATE, @endDate DATE

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
		SELECT
			CASE 
				WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
				WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
				ELSE 0
			END AS bonusAdded,
			CASE 
				WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
				WHEN bs.bonus >= 0 AND bs.refund = 1 THEN (-1)*bs.bonus
				ELSE 0
			END AS bonusRedeemed,
			bs.cheque,
			COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
			bs.proctime,
			bs.card,
			bs.partner
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			bs.operator = @operator
			AND bs.proctime >= @beginDate
			AND bs.proctime < @endDate
			
		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
		SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
		
		UPDATE 
			bs 
		SET 
			bs.partner = ce.partner,
			bs.pos = ce.pos, 
			bs.chequeamount = ce.amount, 
			bs.proctime = ce.chequetime,
			bs.operationtype = (CASE ce.refund
									WHEN 0 THEN N''Покупка''
									WHEN NULL THEN N''Покупка''
									WHEN 1 THEN N''Возврат''
								END) 
		FROM 
			@bonuscheques AS bs 
			INNER JOIN cheque AS ce ON bs.cheque = ce.id
			
		SELECT
			(SELECT name FROM partner WHERE id = @partner) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = @partner AND code = @pos) AS address,
			COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END AS gender,
			COALESCE(cr.phone, ct.phone, 0) AS phone,
			COALESCE(cr.email, ct.email, '''') AS email,
			cd.number,
			COALESCE(ce.Name, '''') AS ClientType, 
			CASE
				WHEN cr.pos = (SELECT id FROM pos WHERE code = @pos) THEN N''Да''
				ELSE N''Нет''
			END,
			COALESCE(bs.operationtype, bs.bonussource),
			CASE
				WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
				WHEN bs.chequeamount IS NULL THEN 0
			END AS [Сумма операции],
			bs.bonusAdded AS [Начислено бонусов],
			bs.bonusRedeemed AS [Списано бонусов],
			bs.proctime AS chequetime
		FROM
			@bonuscheques AS bs
			INNER JOIN card AS cd ON bs.card = cd.number
			INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
			INNER JOIN client AS ct ON ct.id = cd.client
			LEFT JOIN cardtype AS ce ON cd.type = ce.id
		WHERE
			cd.operator = @operator
			AND (bs.pos = (SELECT id FROM pos WHERE partner = @partner AND code = @pos) OR bs.pos IS NULL)
		ORDER BY
			bs.proctime DESC
		RETURN(0)
	END'

	--Исправлено. Бонусы за возврат идут в той же колонке, что и бонусы за покупку
	IF OBJECT_ID('[Reports].[PartnerSales]') IS NOT NULL DROP PROCEDURE [Reports].[PartnerSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerSales
			@from date = NULL,
			@to date = NULL, 
			@operator smallint = NULL,
			@partner smallint = NULL,
			@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END
		IF(NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(2)
		END

		DECLARE @bonuses AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @bonuscheques AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			partner SMALLINT,
			pos SMALLINT,
			chequeamount NUMERIC(9,2),
			operationtype NVARCHAR(20)
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @beginDate DATE, @endDate DATE

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
		SELECT
			CASE 
				WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
				WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
				ELSE 0
			END AS bonusAdded,
			CASE 
				WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
				WHEN bs.bonus >= 0 AND bs.refund = 1 THEN (-1)*bs.bonus
				ELSE 0
			END AS bonusRedeemed,
			bs.cheque,
			COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
			bs.proctime,
			bs.card,
			bs.partner
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			bs.operator = @operator
			AND bs.proctime >= @beginDate
			AND bs.proctime < @endDate
			
		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
		SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
		
		UPDATE 
			bs 
		SET 
			bs.partner = ce.partner,
			bs.pos = ce.pos, 
			bs.chequeamount = ce.amount, 
			bs.proctime = ce.chequetime,
			bs.operationtype = (CASE ce.refund
									WHEN 0 THEN N''Покупка''
									WHEN NULL THEN N''Покупка''
									WHEN 1 THEN N''Возврат''
								END) 
		FROM 
			@bonuscheques AS bs 
			INNER JOIN cheque AS ce ON bs.cheque = ce.id
			
		SELECT
			(SELECT name FROM partner WHERE id = @partner) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = @partner AND ps.id = bs.pos) AS address,
			COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END AS gender,
			COALESCE(cr.phone, ct.phone, 0) AS phone,
			COALESCE(cr.email, ct.email, '''') AS email,
			cd.number,
			COALESCE(ce.Name, '''') AS ClientType, 
			CASE
				WHEN cr.pos = bs.pos THEN N''Да''
				ELSE N''Нет''
			END,
			COALESCE(bs.operationtype, bs.bonussource),
			CASE
				WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
				WHEN bs.chequeamount IS NULL THEN 0
			END AS [Сумма операции],
			bs.bonusAdded AS [Начислено бонусов],
			bs.bonusRedeemed AS [Списано бонусов],
			bs.proctime AS chequetime
		FROM
			@bonuscheques AS bs
			INNER JOIN card AS cd ON bs.card = cd.number
			INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
			INNER JOIN client AS ct ON ct.id = cd.client
			LEFT JOIN cardtype AS ce ON cd.type = ce.id
		WHERE
			cd.operator = @operator
			AND (bs.partner = @partner OR bs.partner IS NULL)
		ORDER BY
			bs.proctime DESC
		RETURN(0)
	END'

	--Добавлено. Фильтрация по точке, в которой зарегистрирован клиент
	IF OBJECT_ID('[Reports].[PosClient]') IS NOT NULL DROP PROCEDURE [Reports].[PosClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PosClient
			@from date = null,
			@to date = null, 
			@operator smallint = NULL,
			@partner smallint = NULL,
			@pos nvarchar(10) = NULL,
			@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END
		IF(NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(2)
		END
		IF(NOT EXISTS(SELECT id FROM pos WHERE code = @pos))
		BEGIN
			SET @errormessage = N''Торговая точка не найдена''
			RETURN(3)
		END

		DECLARE @beginDate DATE, @endDate DATE, @pos_id SMALLINT
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		SELECT @pos_id = p.id FROM pos p WHERE p.code = @pos AND partner = @partner

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos = (SELECT id FROM pos WHERE partner = @partner AND code = @pos)
			
		SELECT
			(SELECT name FROM partner WHERE id = @partner) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = @partner AND code = @pos) AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],			
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.pos = @pos_id
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

	--Добавлено. Выбираются только те клиенты, которые зарегистрированы в ТТ партнёра и в указанный промежуток времени.
	IF OBJECT_ID('Reports.PartnerClient') IS NOT NULL DROP PROCEDURE Reports.PartnerClient
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerClient @from date = NULL,
			@to date = NULL, 
			@operator smallint = NULL,
			@partner SMALLINT = NULL,
			@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			chequetime DATETIME,
			pos SMALLINT
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card, chequetime, pos)
		SELECT
			id,
			amount,
			refund,
			card,
			chequetime,
			pos
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner = @partner)
			
		SELECT
			(SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cs.pos) AS brand,
			(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cs.pos) AS address,
			COALESCE(cr.name, '''') + '' '' + COALESCE(cr.surname, '''') + '' '' + COALESCE(cr.patronymic, '''') AS fullName,
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END AS gender,
			COALESCE(cr.phone, ct.phone, 0) AS phone,
			COALESCE(cr.email, ct.email, '''') AS email,
			cd.number,
			COALESCE(ce.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			@cheques AS cs
			INNER JOIN card AS cd ON cs.card = cd.number
			INNER JOIN client AS ct ON cd.client = ct.id
			INNER JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS ce ON cd.type = ce.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		ORDER BY
			chequetime DESC
		RETURN(0)
	END'

	--Добавлено. Выбираются только те клиенты, которые зарегистрированы в указанный промежуток времени.
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			
		SELECT
			COALESCE((SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cr.pos), (SELECT name FROM operator WHERE id = @operator)) AS brand,
			COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos),N''Нет'') AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

	--Исправлено. Количество ковычек в ISNULL.
	IF OBJECT_ID('MessageAdd') IS NOT NULL DROP PROCEDURE MessageAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE MessageAdd
	@client INT = NULL,
	@text NVARCHAR(1000) = NULL,
	@subject NVARCHAR(100) = NULL,
	@email NVARCHAR(100) = NULL,
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	IF @client = 0 SET @client = NULL IF @text = '''' SET @text = NULL IF @subject = '''' SET @subject = NULL IF @email = '''' SET @email = NULL
	IF @text IS NULL BEGIN SET @errormessage = ''Не задан текст сообщения'' RETURN(1) END
	IF @subject IS NULL BEGIN SET @errormessage = ''Не задана заголовок сообщения'' RETURN(2) END
	IF @operator IS NULL BEGIN SET @errormessage = N''Не задан оператор'' RETURN(3) END
	IF @text IS NULL SET @text = ''Текст сообщения в процедуре MessageAdd не заполнен''
	IF @client IS NOT NULL BEGIN INSERT INTO message (client, text, rectime, subject, operator) VALUES (@client, @text, GETDATE(), @subject, @operator) END
	IF @email IS NOT NULL BEGIN INSERT INTO message (email, text, rectime, subject, operator) VALUES (@email, @text, GETDATE(), @subject, @operator) END
	DECLARE @header NVARCHAR(100) = NULL, 
			@emailaddress NVARCHAR(20) = NULL, 
			@emailsender NVARCHAR(20) = NULL, 
			@operatorname NVARCHAR(50) = NULL, 
			@operatorlkuaddress NVARCHAR(200) = NULL,
			@emailto NVARCHAR(50) = NULL
	SELECT @emailsender = emailsender, @emailaddress = emailaddress, @operatorname = ISNULL(name, ''''), @operatorlkuaddress = ISNULL(lkuaddress, ''''), @emailto = email FROM operator WHERE id = @operator
	IF(@emailaddress IS NOT NULL AND @emailsender IS NOT NULL AND @email IS NOT NULL)
		EXEC EmailSendPulse @emailTo = @emailto, @header = @subject, @body = @text, @fromHeader = @emailsender, @from = @emailaddress
	RETURN (0)'

	--Исправлено. Не передавался в clientadd идентификатор партнёра, в следствие чего не определялась ТТ и не сопоставлялась клиенту, в которой запись о нём создали
	IF OBJECT_ID('ClientCreate') IS NOT NULL DROP PROCEDURE ClientCreate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientCreate
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@card BIGINT = NULL OUTPUT, 
	@phone BIGINT = NULL OUTPUT, 
	@name NVARCHAR(50) = NULL, 
	@surname NVARCHAR(20) = NULL, 
	@patronymic NVARCHAR(20) = NULL, 
	@email NVARCHAR(50) = NULL, 
	@birthdate DATE = NULL,
	@allowsms BIT = NULL,
	@allowemail BIT = NULL,		
	@gender BIT = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@client INT OUTPUT,
	@agreepersonaldata BIT = NULL,
	@poscode NVARCHAR(10) = NULL,
	@friend BIGINT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, @emailclient INT = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL
	IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL
	IF @operator IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Оператора ПЛ'' RETURN(11) END
	SELECT @emailclient = client FROM email WHERE email = @email
	IF @emailclient IS NOT NULL BEGIN SET @errormessage = ''Данный E-mail уже привязан к клиенту'' RETURN(12) END
	EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata, @friend = @friend, @partner = @partner
	IF @result > 0 RETURN(@result)
	IF @email IS NOT NULL BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1
		EXEC @result = ClientSendEmailRegistration @email = @email, @operator = @operator, @errormessage = @errormessage OUTPUT
	END
	EXEC @result = ClientChange @client = @client, @surname = @surname, @name = @name, @patronymic = @patronymic, @birthdate = @birthdate, @allowsms = @allowsms, @allowemail = @allowemail, @gender = @gender, @errormessage = @errormessage OUTPUT, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata
	IF @result > 0 RETURN(@result)
	RETURN(0)'
	
	
END ELSE IF @version = 319 BEGIN
	SELECT '3.20 20171014 Медянин'
	
	-- устранена ошибка переполнения при расчете максимального номера карты в диапазоне
	IF OBJECT_ID('Identify') IS NOT NULL DROP PROCEDURE Identify
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Identify
	@phone BIGINT = NULL, -- номер телефона, можно передавать не полный номер, а окончание, но тогда либо партнер, либо оператор должны быть заполнены
	@email NVARCHAR(30) = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT, -- номер карты, можно передавать не полный номер, а локальный (без префикса оператора), но тогда либо партнер, либо оператор должны быть заполнены
	@status TINYINT = NULL OUTPUT, -- статус карты
	@virtual BIT = NULL OUTPUT, -- признак виртуальной
	@balance NUMERIC(9,2) = NULL OUTPUT, -- активный баланс заодно
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @cardnumber BIGINT = NULL, @count INT = NULL, @last4 SMALLINT = NULL, @middle2 TINYINT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @freecard BIT = NULL, @cardoperator SMALLINT = NULL, @rows INT = NULL, @defaultoperator SMALLINT = NULL
	IF @phone = 0 SET @phone = NULL IF @partner = 0 SET @partner = NULL IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL
	IF @operator IS NULL BEGIN -- если не задан идентификатор оператора
		IF @partner IS NULL BEGIN -- если не задан и идентификатор партнера, то идентификатор оператора так и остается пустым, но заранее фиксируется идентификатор оператора по умолчанию
			IF @card IS NOT NULL SELECT @operator = operator FROM card WHERE number = @card
			IF @operator IS NULL BEGIN
				SELECT @defaultoperator = id FROM operator WHERE name = ''Оператор'' -- оператор по умолчанию
				IF @defaultoperator IS NULL BEGIN
					INSERT INTO operator (name) VALUES(''Оператор'')-- если нет - создание
					SET @defaultoperator = SCOPE_IDENTITY()
				END
			END
		END ELSE BEGIN -- оператор не задан, но партнер задан, оперируем им
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @operator IS NULL BEGIN SET @errormessage = ''Заданный идентификатор партнера не найден'' RETURN(1) END -- иначе говорим, что карты с заданным номером нет
		END
	END ELSE
		IF NOT EXISTS (SELECT id FROM operator WHERE id = @operator) BEGIN SET @errormessage = ''Заданный идентификатор Оператора ПЛ не найден'' RETURN(1) END -- проверка, задан ли оператор корректно, если он задан
	IF @card IS NOT NULL BEGIN -- если номер карты, на который надо выйти, уже задан, просто проверка на ее существование
		SET @cardnumber = @card SET @card = NULL
		SET @client = NULL
		SELECT @card = number, @client = client, @status = status, @balance = balance, @cardoperator = operator, @virtual = virtual FROM card WHERE number = @cardnumber
		IF @card IS NOT NULL BEGIN -- если номер карты найден, проверяем на привязку к клиенту и совпадение операторов
			SELECT @freecard = freecard FROM operator WHERE id = @cardoperator
			IF @cardoperator != @operator BEGIN	SET @errormessage = ''Карта другого оператора ПЛ'' RETURN(2) END -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
			ELSE IF @client IS NULL AND (@freecard IS NULL OR @freecard = 0) BEGIN SET @errormessage = ''Карта не привязана к клиенту, оператор не позволяет свободные карты'' RETURN(3) END -- карта может быть не привязана к клиенту только если у оператора разрешены свободные карты
			ELSE RETURN(0) -- если номер карты найден и клиент есть либо можно без него, оставляем номером карты заданный, успешный ответ
		END ELSE BEGIN -- номер карты не найден, может быть, задан локальный номер
			IF @operator IS NULL SET @operator = @defaultoperator -- нет оператора, чтобы работать с локальным номером карты - смотрим у оператора по умолчанию
			ELSE BEGIN
				SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
				IF @prefix IS NOT NULL AND @numlen IS NOT NULL BEGIN
					SET @maxlocal = CONVERT(BIGINT, POWER(10.0, @numlen - LEN(@prefix)))
					IF @cardnumber < @maxlocal BEGIN
						SET @cardnumber = @prefix * @maxlocal + @cardnumber
						SET @client = NULL
						SELECT @card = number, @client = client, @status = status, @balance = balance, @operator = operator FROM card WHERE number = @cardnumber
					END
				END
			END
			IF @card IS NOT NULL BEGIN -- если номер карты найден, проверяем на привязку к клиенту
				SELECT @freecard = freecard FROM operator WHERE id = @operator
				IF @client IS NULL AND (@freecard IS NULL OR @freecard = 0) BEGIN SET @errormessage = ''Карта не привязана к клиенту, оператор не позволяет свободные карты'' RETURN(3) END -- карта может быть не привязана к клиенту только если у оператора разрешены свободные карты
				ELSE RETURN(0) -- если номер карты найден и клиент есть либо можно без него, оставляем номером карты заданный, успешный ответ
			END ELSE BEGIN SET @errormessage = ''Номер карты не найден'' RETURN(4) END -- иначе говорим, что карты с заданным номером нет
		END
	END
	IF @client IS NULL BEGIN -- если идентификатор клиента не задан - выходим на него всеми возможными средствами
		IF @phone IS NOT NULL BEGIN -- если не задан номер карты, но задан номер телефона - ищем по нему
			IF @phone > 9000000000 BEGIN-- если задан полный номер телефона
				SELECT @client = client FROM phone WHERE number = @phone -- ищем клиента, на которого ссылается полный телефон
				IF @client IS NULL BEGIN SET @errormessage = ''Не существует клиента с заданным номером телефона'' RETURN(5) END -- если клиент не найден
			END ELSE BEGIN -- если задан неполный номер телефона
				IF @operator IS NULL SET @operator = @defaultoperator -- нет оператора, чтобы работать с неполным номером телефона - смотрим у оператора по умолчанию
				SET @last4 = @phone%10000 SET @middle2 = FLOOR((@phone%1000000)/10000)
				IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 -- ищем карту по оператору и окончания телефона
				ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2 -- или по оператору, окончанию и серединке номера телефона 
				SET @rows = @@ROWCOUNT
				IF @rows > 1 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Окончание номера телефона не уникальное для заданного оператора''
					ELSE SET @errormessage = ''Окончание номера телефона не уникальное для оператора по умолчанию''
					RETURN(6)
				END	ELSE IF @rows < 1 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Номера телефонов с данным окончанием по заданному оператору не найдены''
					ELSE SET @errormessage = ''Номера телефонов с данным окончанием по оператору по умолчанию не найдены''
					RETURN(7)
				END
				ELSE BEGIN
					SELECT @client = client, @status = status, @balance = balance, @virtual = virtual FROM card WHERE number = @card -- статус и баланс еще берем
					RETURN(0) -- если номер карты найден, успешный ответ
				END
			END
		END	ELSE IF @email IS NOT NULL BEGIN -- если не задан номер карты, не задан номер телефона и задан E-mail - ищем по нему
			SELECT @client = client FROM email WHERE email = @email -- ищем клиента, на которого ссылается email
			IF @client IS NULL BEGIN SET @errormessage = ''Не существует клиента с заданным E-mail'' RETURN(5) END -- если клиент не найден
		END
	END
	IF @client IS NOT NULL BEGIN -- искомый клиент по ид, телефону или E-mail найден
		SET @card = NULL
		SELECT @card = card FROM client WHERE id = @client -- смотрим, есть ли у клиента единственная карта
		IF @card IS NOT NULL BEGIN -- у клиента единственная карта. Если не задан оператор изначально, считаем, что это она. Если задан - смотрим, этого оператора карта или нет.
			SELECT @status = status, @balance = balance, @cardoperator = operator, @virtual = virtual FROM card WHERE number = @card -- статус и баланс еще берем
			IF @operator IS NULL SET @operator = @cardoperator
			ELSE IF @cardoperator != @operator BEGIN -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
					IF @defaultoperator IS NULL SET @errormessage = ''Найденная карта не заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найденная карта не оператора ПЛ по умолчанию''
					RETURN(2)
				END
			RETURN(0) -- если номер карты найден, успешный ответ
		END ELSE BEGIN -- если у клиента не задана карта, то либо нет карт, либо больше одной - запускаем более медленный механизм уточнения номера карты, вероятность использования которого крайне мала - только если клиент в нескольких ПЛ
			SELECT @count = COUNT(*) FROM card WHERE client = @client
			IF @count = 0 BEGIN SET @errormessage = ''У клиента нет карт'' RETURN(8) END -- если у клиента нет карт
			ELSE IF @count = 1 BEGIN -- если у клиента все же одна карта, которая каким-то образом была из клиента, возвращаем ее и записываем клиенту
				SELECT @card = number, @cardoperator = operator, @status = status, @balance = balance, @virtual = virtual FROM card WHERE client = @client
				UPDATE client SET card = @card WHERE id = @client
				IF @operator IS NULL SET @operator = @cardoperator
				ELSE IF @cardoperator != @operator BEGIN -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
						IF @defaultoperator IS NULL SET @errormessage = ''Найденная карта не заданного оператора ПЛ''
						ELSE SET @errormessage = ''Найденная карта не оператора ПЛ по умолчанию''
						RETURN(2)
					END
				RETURN(0) -- если номер карты найден, успешный ответ
			END	ELSE BEGIN -- если у клиента более одной карты
				IF @operator IS NULL SET @operator = @defaultoperator
				SELECT @count = COUNT(*) FROM card WHERE client = @client AND operator = @operator
				IF @count = 0 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Найденные карты не заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найденные карты не оператора ПЛ по умолчанию''
					RETURN(2)
				END ELSE IF @count = 1 BEGIN
					SELECT @card = number, @status = status, @balance = balance, @virtual = virtual FROM card WHERE client = @client AND operator = @operator -- ищем карту теперь по клиенту и оператору
					RETURN(0) -- если номер карты найден, успешный ответ
				END ELSE BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Найдено более одной карты клиента заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найдено более одной карты клиента оператора ПЛ по умолчанию''
					RETURN(9)
				END
			END
		END
	END
	RETURN(0)'
	
	-- задается идентификатор партнера
	IF OBJECT_ID('_ClientGet') IS NOT NULL DROP PROCEDURE _ClientGet
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE _ClientGet
	@card BIGINT = NULL OUTPUT,
	@phone BIGINT = NULL,
	@client INT = NULL OUTPUT,
	@balance NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) OUTPUT,
	@partner SMALLINT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL
	IF @partner = 0 SET @partner = NULL
	EXEC @result = Identify @phone = @phone, @card = @card OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @partner = @partner, @client = @client OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	RETURN (0)'
	
	-- устаревший _ClientGet заменен на Identify, с заданием @partner
	IF OBJECT_ID('Redeem') IS NOT NULL DROP PROCEDURE Redeem
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Redeem
	@card BIGINT = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@bonus NUMERIC(9,2) = NULL,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@bonusid INT OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @cardoperator SMALLINT = NULL, @partneroperator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @partnername NVARCHAR(20) = NULL, @operator SMALLINT = NULL, @phoneend INT = NULL, @last4 SMALLINT = NULL, @middle2 TINYINT = NULL, @cardend INT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @freecard BIT = NULL, @freeredeem BIT = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не задан'' RETURN(7) END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (8) END
	SELECT @prefix = prefix, @numlen = numlen, @freecard = freecard, @freeredeem = freeredeem FROM operator WHERE id = @operator
	IF @phone IS NOT NULL IF @phone < 1000000 SET @phoneend = @phone%1000000
	IF @card IS NOT NULL IF @card < 100000 SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL BEGIN
		EXECUTE @result = Identify @card = @card OUTPUT, @phone = @phone, @client = @client OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @partner = @partner
		IF NOT @result = 0 RETURN (@result)
		IF @client IS NULL BEGIN SET @errormessage = ''Клиент не найден'' RETURN(7) END
	END ELSE BEGIN
		IF @operator IS NULL BEGIN SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' RETURN(9) END
		IF @phoneend IS NOT NULL BEGIN
			SET @last4 = @phoneend%10000 SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4
			ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
			IF @@ROWCOUNT > 1 BEGIN SET @errormessage = ''Найдено больше одного номера телефона с данным окончанием'' RETURN(10) END
		END ELSE
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend
		SELECT @balance = balance, @cardoperator = operator FROM card WHERE number = @card
		IF NOT @cardoperator = @operator BEGIN SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' RETURN(11) END
		IF @client IS NULL AND (@freecard = 0 OR @freecard IS NULL) AND (@freeredeem = 0 OR @freeredeem IS NULL) BEGIN SET @errormessage = ''Карта еще не привязана к клиенту'' RETURN (15) END
	END
	IF NOT EXISTS (SELECT number FROM card WHERE number = @card AND status = 0) BEGIN SET @errormessage = ''Списание возможно только с Активной карты'' RETURN (13) END
	IF @bonus IS NULL BEGIN SET @errormessage = ''Не задано количество списываемых бонусов'' RETURN(12) END
	IF @bonus > @balance BEGIN SET @errormessage = ''Недостаточный баланс'' RETURN(15) END
	SET @bonus = -@bonus
	EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @bonus, @operator = @operator, @partner = @partner, @errormessage = @errormessage OUTPUT, @source = 1, @id = @bonusid OUTPUT
	SET @oldbalance = @balance
	IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
	ELSE SELECT @balance = balance FROM card WHERE number = @card
	SET @redeemed = @oldbalance - @balance
	SELECT @partnername = name FROM partner WHERE id = @partner 
	IF @phoneend IS NOT NULL SELECT @phone = phone FROM client WHERE id = (SELECT client FROM card WHERE number = @card)
	IF @phone IS NULL SELECT TOP 1 @phone = number FROM phone WHERE card = @card AND validated = 1
	DECLARE @notsendsms bit = 1
	SELECT @notsendsms = noredeemsms FROM operator WHERE id = @operator
	--IF @phone IS NOT NULL and @notsendsms = 0
		--exec ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @redeemed = @redeemed, @errormessage = @errormessage output
	RETURN (0)'
	
	-- устаревший _ClientGet заменен на Identify, с заданием @partner
	IF OBJECT_ID('Refund') IS NOT NULL DROP PROCEDURE Refund
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Refund
	@card BIGINT = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@pos NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL OUTPUT,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@terminal NVARCHAR(10) = NULL,
	@purchaseid INT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasedate DATE = NULL,
	@purchasepos NVARCHAR(10) = NULL,
	@purchaseterminal NVARCHAR(10) = NULL,
	@redeemed NUMERIC(9,2) = 0 OUTPUT
	AS SET NOCOUNT ON	
	DECLARE @result INT = NULL, 
			@cardoperator SMALLINT = NULL, 
			@partneroperator SMALLINT = NULL, 
			@client INT = NULL, 
			@cheque INT = NULL, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@partnername NVARCHAR(20) = NULL, 
			@operator SMALLINT = NULL, 
			@phoneend INT = NULL, 
			@last4 SMALLINT = NULL, 
			@middle2 TINYINT = NULL, 
			@cardend INT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@purchaseposid INT = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL
	IF @partner IS NULL 
	BEGIN 
		SET @errormessage = ''Партнер не задан'' 
		RETURN(8) 
	END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 
	BEGIN 
		SET @errormessage = ''Неверно задан идентификатор Партнера'' 
		RETURN (9) 
	END
	SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
	IF @chequetime IS NULL 
	BEGIN 
		SET @errormessage = ''Не заданы дата/время чека'' 
		RETURN(10)
	END
	IF @pos IS NOT NULL 
	BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL 
		BEGIN 
			SET @errormessage = ''Не найден код торговой точки'' 
			RETURN(11) 
		END
	END 
	ELSE IF @terminal IS NOT NULL 
	BEGIN 
		SET @errormessage = ''Для терминала должна быть задана торговая точка'' 
		RETURN(12) 
	END
	IF @purchasepos IS NOT NULL 
	BEGIN
		SELECT @purchaseposid = id FROM pos WHERE partner = @partner AND code = @purchasepos
		IF @purchaseposid IS NULL 
		BEGIN 
			SET @errormessage = ''Не найден код торговой точки покупки'' 
			RETURN(13) 
		END
	END 
	ELSE IF @purchaseterminal IS NOT NULL 
	BEGIN 
		SET @errormessage = ''Для терминала покупки должна быть задана торговая точка'' 
		RETURN(14) 
	END
	IF @phone IS NOT NULL 
		IF @phone < 1000000 
			SET @phoneend = @phone%1000000
	IF @card IS NOT NULL IF @card < 100000 SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL 
	BEGIN
		EXECUTE @result = Identify @card = @card OUTPUT, @phone = @phone, @client = @client OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @partner = @partner
		IF NOT @result = 0 
			RETURN (@result)
		IF @client IS NULL 
		BEGIN 
			SET @errormessage = ''Клиент не найден'' 
			RETURN(15) 
		END
	END 
	ELSE 
	BEGIN
		IF @operator IS NULL 
		BEGIN 
			SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' 
			RETURN(16) 
		END
		IF @phoneend IS NOT NULL 
		BEGIN
			SET @last4 = @phoneend%10000 SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4
			ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
			IF @@ROWCOUNT > 1 
			BEGIN 
				SET @errormessage = ''Найдено больше одного номера телефона с данным окончанием'' 
				RETURN(17) 
			END
			IF @card IS NULL 
			BEGIN 
				SET @errormessage = ''Номера телефонов с данным окончанием по оператору партнера не найдены'' 
				RETURN(18) 
			END
		END 
		ELSE
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend
		SELECT @balance = balance, @cardoperator = operator FROM card WHERE number = @card
		IF NOT @cardoperator = @operator 
		BEGIN 
			SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' 
			RETURN(19) 
		END
	END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card AND (refund = 0 OR refund IS NULL)
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND (refund = 0 OR refund IS NULL)
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек возврата уже зарегистрирован''
			IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
			ELSE SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @purchaseid IS NOT NULL OR @purchasenumber IS NOT NULL 
	BEGIN
		IF @purchaseid IS NOT NULL
		begin
			SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE id = @purchaseid AND (refund = 0 OR refund IS NULL)
			end
		ELSE 
		BEGIN
			IF @purchasedate IS NULL 
			BEGIN 
				SET @errormessage = ''Не задана дата покупки'' 
				RETURN(20) 
			END
			SET @purchasetimebegin = CONVERT(DATETIME, @purchasedate)
			SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
			IF @purchaseterminal IS NOT NULL
			begin
				SELECT 
					@cheque = id, 
					@amount = -amount, 
					@paidbybonus = -paidbybonus 
				FROM 
					cheque 
				WHERE 
					partner = @partner 
					AND pos = @purchaseposid 
					AND terminal = @purchaseterminal 
					AND number = @purchasenumber 
					AND chequetime > @purchasetimebegin 
					AND chequetime < @purchasetimeend 
					AND card = @card
					AND (refund = 0 OR refund IS NULL)
			end
			ELSE IF @pos IS NOT NULL
			begin
				SELECT 
					@cheque = id, 
					@amount = -amount, 
					@paidbybonus = -paidbybonus 
				FROM 
					cheque 
				WHERE 
					partner = @partner 
					AND pos = @purchaseposid 
					AND number = @purchasenumber 
					AND chequetime > @purchasetimebegin 
					AND chequetime < @purchasetimeend 
					AND card = @card
					AND (refund = 0 OR refund IS NULL)
			end
			ELSE
			begin
				SELECT 
					@cheque = id, 
					@amount = -amount, 
					@paidbybonus = -paidbybonus 
				FROM 
					cheque 
				WHERE 
					partner = @partner 
					AND number = @purchasenumber 
					AND chequetime > @purchasetimebegin 
					AND chequetime < @purchasetimeend 
					AND card = @card
					AND (refund = 0 OR refund IS NULL)
			end
		END
		IF @cheque IS NULL 
		BEGIN 
			SET @errormessage = ''Чек покупки не найден'' 
			RETURN(21) 
		END
		if(exists(select id from cheque where cheque = @cheque and refund = 1))
		begin
			set @errormessage = N''Чек возврата уже зарегистрирован''
			return(0)
		end
		SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
		SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus < 0
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) 
		VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SET @cheque = SCOPE_IDENTITY()
		IF @added < 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		IF @redeemed > 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
	END ELSE BEGIN
		IF @amount IS NULL 
		BEGIN 
			SET @errormessage = ''Сумма чека не задана''
			RETURN(22) 
		END
		IF @amount <= 0 
		BEGIN 
			SET @errormessage = ''Сумма чека возврата должна быть больше 0'' 
			RETURN(23) 
		END
		IF @paidbybonus < 0 
		BEGIN 
			SET @errormessage = ''Сумма оплаты бонусами в чеке не может быть отрицательной'' 
			RETURN(24) 
		END

		IF(NOT EXISTS(SELECT id FROM cheque AS ce WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus))
		BEGIN
			SET @errormessage = N''Не найден чек с данной суммой покупки у данного номера карты''
			RETURN(25)
		END
		IF(NOT EXISTS(SELECT id FROM cheque AS ce WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND NOT EXISTS(SELECT id FROM cheque WHERE cheque = ce.id)))
		BEGIN
			SET @errormessage = N''На чек с данной суммой покупки у данного номера карты уже существует возврат''
			RETURN(26)
		END
		SELECT @cheque = id FROM cheque WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus
		IF @@ROWCOUNT > 1 
		BEGIN
			SET @errormessage = N''Найдено больше одного чека с данными параметрами. Воспользуйтесь расширенной формой возврата''
			RETURN(27)
		END
		SET @added = (-1)*(SELECT SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0)
		SET @amount = -@amount
		SELECT @oldbalance = balance FROM card WHERE number = @card
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) 
		VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SELECT @balance = balance FROM card WHERE number = @card
		--SET @added = @balance - @oldbalance
		SET @cheque = SCOPE_IDENTITY()
		IF @paidbybonus IS NULL SET @paidbybonus = 0
		IF @paidbybonus > 0
		BEGIN
			SET @redeemed = @paidbybonus
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @paidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
		IF @added < 0
		BEGIN
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
	END
	exec CardLevelRecount @card = @card, @errormessage = @errormessage OUTPUT
	IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
	ELSE SELECT @balance = balance FROM card WHERE number = @card
	SELECT @partnername = name FROM partner WHERE id = @partner
	IF @phoneend IS NOT NULL SELECT @phone = phone FROM client WHERE id = (SELECT client FROM card WHERE number = @card)
	IF @phone IS NULL SELECT TOP 1 @phone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = @card 
	declare @notsendsms bit = 1
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL and @notsendsms = 0
	BEGIN
		exec ClientNotificationBonus @phone = @phone, @operator = @operator, @paidbybonus = @paidbybonus, @added = @added, @amount = @amount, @refund = 1, @balance = @balance, @errormessage = @errormessage output
	END
	RETURN(0)'
	
	-- Если сумма покупок отрицательная, то первый уровень все равно остается у клиента
	IF OBJECT_ID('CardLevelRecount') IS NOT NULL DROP PROCEDURE CardLevelRecount
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardLevelRecount
	@card BIGINT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @operator SMALLINT = NULL, @client INT = NULL, @leveldate DATE = NULL, @min DATETIME = NULL, @max DATETIME = NULL, @true BIT = 1, @sum NUMERIC(18,2) = 0, @level SMALLINT = NULL, @level1 SMALLINT = NULL, @level2 SMALLINT = NULL, @level3 SMALLINT = NULL, @level4 SMALLINT = NULL, @level5 SMALLINT = NULL, @threshold1 NUMERIC(9,2) = NULL, @threshold2 NUMERIC(9,2) = NULL, @threshold3 NUMERIC(9,2) = NULL, @threshold4 NUMERIC(9,2) = NULL, @threshold5 NUMERIC(9,2) = NULL, @leveltimeout TINYINT = NULL
	IF @card IS NULL BEGIN SET @errormessage = ''Номер карты должен быть заполнен'' RETURN(1) END
	SELECT @operator = operator, @leveldate = leveldate, @client = client FROM card WHERE number = @card
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Номер карты не найден'' RETURN(2) END
	SELECT @leveltimeout = leveltimeout FROM operator WHERE id = @operator
	IF NOT EXISTS (SELECT id FROM level WHERE operator = @operator) RETURN(0)
	IF @leveltimeout = 0 SET @leveltimeout = NULL
	SET @level1 = NULL SET @level2 = NULL SET @level3 = NULL SET @level4 = NULL SET @level5 = NULL SET @threshold1 = NULL SET @threshold2 = NULL SET @threshold3 = NULL SET @threshold4 = NULL SET @threshold5 = NULL 
	SELECT @level1 = id, @threshold1 = threshold FROM level WHERE operator = @operator AND level = 1
	SELECT @level2 = id, @threshold2 = threshold FROM level WHERE operator = @operator AND level = 2
	SELECT @level3 = id, @threshold3 = threshold FROM level WHERE operator = @operator AND level = 3
	SELECT @level4 = id, @threshold4 = threshold FROM level WHERE operator = @operator AND level = 4
	SELECT @level5 = id, @threshold5 = threshold FROM level WHERE operator = @operator AND level = 5
	IF @leveldate IS NULL BEGIN
		SELECT @leveldate = MIN(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator)
		IF @leveldate IS NULL SET @leveldate = GETDATE()
	END
	IF @leveltimeout IS NOT NULL BEGIN
		SET @min = @leveldate
		WHILE @true = 1 BEGIN
			SET @max = @min + @leveltimeout
			IF @max > GETDATE() BREAK
			SELECT @min = MAX(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @min AND chequetime < @max
			IF @min IS NULL BEGIN
				SELECT @leveldate = MIN(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @max
				SET @min = @leveldate
				IF @leveldate IS NULL BEGIN
					SET @leveldate = GETDATE()
					SET @min = @leveldate
					BREAK
				END
			END
		END
	END
	SELECT @sum = ISNULL(SUM(amount - ISNULL(paidbybonus, 0)), 0) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @leveldate
	IF @threshold1 IS NOT NULL SET @level = @level1
	IF @threshold2 IS NOT NULL IF @sum >= @threshold2 SET @level = @level2
	IF @threshold3 IS NOT NULL IF @sum >= @threshold3 SET @level = @level3
	IF @threshold4 IS NOT NULL IF @sum >= @threshold4 SET @level = @level4
	IF @threshold5 IS NOT NULL IF @sum >= @threshold5 SET @level = @level5
	IF @level IS NOT NULL UPDATE card SET leveldate = @leveldate, level = @level WHERE number = @card
	RETURN(0)'
	
	-- Если при обновлении данных клиента не заданы pos и согласие о персданных, то они не заменяются у клиента на пустые
	IF OBJECT_ID('ClientChange') IS NOT NULL DROP PROCEDURE ClientChange
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientChange
	@client INT = NULL,
	@password NVARCHAR(20) = NULL,
	@surname NVARCHAR(20) = NULL,
	@name NVARCHAR(20) = NULL,
	@patronymic NVARCHAR(20) = NULL,
	@gender BIT = NULL,
	@birthdate DATE = NULL,
	@address NVARCHAR(100) = NULL,
	@haschildren BIT = NULL,
	@description NVARCHAR(100) = NULL,
	@allowsms BIT = NULL,
	@allowemail BIT = NULL,
	@allowpush BIT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT, -- значение по умолчанию NULL для уменьшения ошибок вызова
	@operator SMALLINT = NULL, -- новая концепция - данные клиента относятся только к одному оператору, а не ко всем
	@agreepersonaldata BIT = NULL,
	@poscode NVARCHAR(10) = NULL
	AS SET NOCOUNT ON
	DECLARE @id INT = NULL, @pos SMALLINT = NULL
	IF @client = 0 SET @client = NULL IF @password = '''' SET @password = NULL
	IF @client IS NULL BEGIN SET @errormessage = ''Не задан идентификатор клиента'' RETURN(1) END
	SELECT @client = id FROM client WHERE id = @client
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Клиент не найден'' RETURN(2) END
	IF @operator IS NULL BEGIN -- внешние методы пока не задают идентификатор оператора, поэтому до этих изменений данные пишутся как общие для всех операторов плюс для оператора по умолчанию
		SELECT @operator = id FROM operator WHERE name = ''Оператор'' -- оператор по умолчанию
		IF @operator IS NULL BEGIN
			INSERT INTO operator (name) VALUES(''Оператор'')-- если нет - создание
			SET @operator = SCOPE_IDENTITY()
		END
	END ELSE BEGIN
		SELECT @operator = id FROM operator WHERE id = @operator -- проверка, задан ли оператор корректно, если он задан
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный идентификатор Оператора ПЛ не найден'' RETURN(3) END
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner IN (SELECT id FROM partner WHERE operator = @operator))
	SELECT @id = client FROM clientoperator WHERE client = @client AND @operator = operator -- если записи данных клиента для оператора нет
	IF @@ROWCOUNT = 0 INSERT INTO clientoperator (client, operator) VALUES (@client, @operator) -- добавляем ее
	UPDATE client SET surname = @surname, name = @name, patronymic = @patronymic, gender = @gender, birthdate = @birthdate, address = @address, haschildren = @haschildren, description = @description, allowsms = @allowsms, allowemail = @allowemail WHERE id = @client -- обновление данных клиента для всех операторов
	UPDATE clientoperator SET surname = @surname, name = @name, patronymic = @patronymic, gender = @gender, birthdate = @birthdate, address = @address, haschildren = @haschildren, description = @description, allowsms = @allowsms, allowemail = @allowemail WHERE client = @client AND operator = @operator
	IF @pos IS NOT NULL UPDATE clientoperator SET pos = @pos WHERE client = @client AND operator = @operator
	IF @agreepersonaldata IS NOT NULL UPDATE clientoperator SET agreepersonaldata = @agreepersonaldata WHERE client = @client AND operator = @operator
	IF @password IS NOT NULL BEGIN
		UPDATE client SET password = @password WHERE id = @client -- обновляем пароль в данных клиента для всех операторов
		UPDATE clientoperator SET password = @password WHERE client = @client AND operator = @operator -- обновляем пароль в данных клиента для заданного оператора или оператора по умолчанию
	END
	IF @allowpush IS NOT NULL BEGIN
		UPDATE client SET allowpush = @allowpush WHERE id = @client -- обновляем разрашение на пуш в данных клиента для всех операторов
		UPDATE clientoperator SET allowpush = @allowpush WHERE client = @client AND operator = @operator -- обновляем разрашение на пуш в данных клиента для заданного оператора или оператора по умолчанию
	END
	RETURN (0)'
	
	-- приветственные бонусы за регистрацию через ЛКУ могут отличаться от "основных" по Оператору
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'welcomebonuslku' AND id = (SELECT id FROM sysobjects WHERE name = 'operator'))
		ALTER TABLE operator ADD welcomebonuslku NUMERIC(9,2)
	
	-- В процедуре добавления клиента учитывается, что регистрация может быть в ЛКУ, и тогда приветственные бонусы другие
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL,
	@reglku BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @cardoperator SMALLINT = NULL, @virtual BIT = 0, @welcomebonus NUMERIC(9,2) = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @result INT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL, @base10 BIGINT = NULL, @welcomebonuslku NUMERIC(9,2) = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL IF @reglku = 0 SET @reglku = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku FROM operator WHERE id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku FROM operator WHERE name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END ELSE BEGIN
		SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @reglku IS NOT NULL SET @welcomebonus = @welcomebonuslku
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	RETURN (0)'
	
	-- дополнительные индексы для PosStatistics
	IF NOT EXISTS(select id from sysindexes where name = 'IX_clientoperator_clientpos')
		CREATE INDEX IX_clientoperator_clientpos ON clientoperator (client, pos)
	IF NOT EXISTS(select id from sysindexes where name = 'IX_cheque_proctimecard')
		CREATE INDEX IX_cheque_proctimecard ON cheque (proctime, card)
	
	-- PosStatistics заменена "как есть" на текст Белянского от 13.10.2017.
	IF OBJECT_ID('PosStatistics') IS NOT NULL DROP PROCEDURE PosStatistics
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE PosStatistics
	@operator SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@clients INT = 0 OUTPUT,
	@clients_all INT = 0 OUTPUT,
	@start_date DATETIME = NULL,
	@end_date DATETIME = NULL,
	@purchases INT = 0 OUTPUT,
	@purchasesum DECIMAL(18, 2) = 0 OUTPUT,
	@refunds INT = 0 OUTPUT,
	@refundsum DECIMAL(18, 2) = 0 OUTPUT,
	@spentsum DECIMAL(18, 2) = 0 OUTPUT,
	@charged DECIMAL(18, 2) = 0 OUTPUT,
	@redeemed DECIMAL(18, 2) = 0 OUTPUT,
	@chargerefund DECIMAL(18, 2) = 0 OUTPUT,
	@redeemrefund DECIMAL(18, 2) = 0 OUTPUT,
	@balance DECIMAL(18, 2) = 0 OUTPUT,
	@paysum DECIMAL(18, 2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@purchasesClient INT = 0 OUTPUT,
	@purchasesumClient DECIMAL(18, 2) = 0 OUTPUT,
	@refundsClient INT = 0 OUTPUT,
	@refundsumClient DECIMAL(18, 2) = 0 OUTPUT
	AS SET NOCOUNT ON
	IF @pos = 0	SET @pos = NULL
	IF @pos IS NULL	BEGIN SET @errormessage = ''Не задан идентификатор Торговой точки'' RETURN (1) END
	IF NOT EXISTS (SELECT id FROM pos WHERE id = @pos) BEGIN SET @errormessage = ''Идентификатор Торговой точки не найден'' RETURN (2) END
	IF @end_date IS NOT NULL SET @end_date = @end_date + ''23:59:59''
	IF @start_date IS NULL SET @start_date = ''19000101''
	IF @end_date IS NULL SET @end_date = GETDATE()
	IF @start_date > @end_date BEGIN SET @errormessage = ''Дата начала периода не может превышать дату окончания периода'' RETURN (3) END	SET @operator = (SELECT	operator.id	FROM dbo.pos INNER JOIN dbo.partner	ON pos.partner = partner.id	INNER JOIN dbo.operator	ON partner.operator = operator.id WHERE pos.id = @pos)
	--Клиенты хотя бы с 1 покупкой
	SELECT @clients = COALESCE(COUNT(DISTINCT cr.client), 0) FROM cheque AS ce INNER JOIN card AS cd ON ce.card = cd.number	INNER JOIN clientoperator AS cr	ON cd.client = cr.client WHERE ce.proctime >= @start_date AND ce.proctime <= @end_date AND cr.pos = @pos AND cd.operator = @operator
	--Клиенты подключённые к оператору заданного партнера
	SELECT @clients_all = COALESCE(COUNT(DISTINCT client), 0) FROM clientoperator AS cr	INNER JOIN client AS ct	ON cr.client = ct.id WHERE pos = @pos AND ct.regdate >= @start_date	AND ct.regdate <= @end_date	AND cr.operator = @operator
	--Сумма покупок
	SELECT @purchases = COALESCE(COUNT(*), 0), @purchasesum = COALESCE(SUM(amount), 0) FROM cheque WHERE pos = @pos AND (refund IS NULL	OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date
	--Сумма возвратов
	SELECT @refunds = COALESCE(COUNT(*), 0), @refundsum = COALESCE(-SUM(amount), 0)	FROM cheque	WHERE pos = @pos AND refund = 1	AND proctime >= @start_date	AND proctime <= @end_date
	--Потраченная сумма
	SET @spentsum = @purchasesum - @refundsum
	--Начислено бонусов
	SELECT @charged = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id	FROM cheque	WHERE pos = @pos) AND bonus > 0	AND (refund IS NULL	OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date AND operator = @operator
	--Списано бонусов
	SELECT @redeemed = COALESCE(-SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id FROM cheque WHERE pos = @pos) AND bonus < 0 AND (refund IS NULL OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date AND operator = @operator
	--Количество возвращенных ранее начисленных бонусов (в возвратах)
	SELECT @chargerefund = COALESCE(-SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id FROM cheque WHERE pos = @pos)	AND bonus < 0 AND refund = 1 AND proctime >= @start_date AND proctime <= @end_date AND operator = @operator
	--Количество возвращенных ранее списанных бонусов (в возвратах)
	SELECT @redeemrefund = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id FROM cheque WHERE pos = @pos) AND bonus > 0 AND refund = 1	AND proctime >= @start_date	AND proctime <= @end_date AND operator = @operator
	--Разница между начисленными и списанными бонусами (возвращенные ранее начисленные уменьшают сумму начисленных, возвращенные ранее списанные уменьшают сумму списанных)
	SET @balance = @charged - @redeemed - @chargerefund + @redeemrefund
	SELECT @purchasesClient = COALESCE(COUNT(*), 0), @purchasesumClient = COALESCE(SUM(amount), 0) FROM cheque AS ce INNER JOIN card AS cd ON ce.card = cd.number INNER JOIN clientoperator AS cr ON cd.client = cr.client WHERE ce.pos = @pos	AND cr.pos = @pos AND (refund IS NULL OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date AND cd.operator = @operator
	SELECT @refundsClient = COALESCE(COUNT(*), 0), @refundsumClient = COALESCE(-SUM(amount), 0) FROM cheque AS ce INNER JOIN card AS cd	ON ce.card = cd.number INNER JOIN clientoperator AS cr ON cd.client = cr.client	WHERE ce.pos = @pos	AND cr.pos = @pos AND refund = 1 AND proctime >= @start_date AND proctime <= @end_date AND cd.operator = @operator
	RETURN (0)'
	
	
END ELSE IF @version = 320 BEGIN
	SELECT '3.21 20171016 Медянин'
	
	-- просто переформат текста, чтобы мне удобнее было его читать
	IF OBJECT_ID('Refund') IS NOT NULL DROP PROCEDURE Refund
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Refund
	@card BIGINT = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@pos NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL OUTPUT,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@terminal NVARCHAR(10) = NULL,
	@purchaseid INT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasedate DATE = NULL,
	@purchasepos NVARCHAR(10) = NULL,
	@purchaseterminal NVARCHAR(10) = NULL,
	@redeemed NUMERIC(9,2) = 0 OUTPUT
	AS SET NOCOUNT ON	
	DECLARE @result INT = NULL, 
			@cardoperator SMALLINT = NULL, 
			@partneroperator SMALLINT = NULL, 
			@client INT = NULL, 
			@cheque INT = NULL, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@partnername NVARCHAR(20) = NULL, 
			@operator SMALLINT = NULL, 
			@phoneend INT = NULL, 
			@last4 SMALLINT = NULL, 
			@middle2 TINYINT = NULL, 
			@cardend INT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@purchaseposid INT = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не задан'' RETURN(8) END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (9) END
	SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(10)	END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(11) END
	END ELSE
		IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(12) END
	IF @purchasepos IS NOT NULL BEGIN
		SELECT @purchaseposid = id FROM pos WHERE partner = @partner AND code = @purchasepos
		IF @purchaseposid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки покупки'' RETURN(13) END
	END ELSE
		IF @purchaseterminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала покупки должна быть задана торговая точка'' RETURN(14) END
	IF @phone IS NOT NULL IF @phone < 1000000 SET @phoneend = @phone%1000000
	IF @card IS NOT NULL IF @card < 100000 SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL BEGIN
		EXECUTE @result = Identify @card = @card OUTPUT, @phone = @phone, @client = @client OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @partner = @partner
		IF NOT @result = 0 RETURN (@result)
		IF @client IS NULL BEGIN SET @errormessage = ''Клиент не найден'' RETURN(15) END
	END ELSE BEGIN
		IF @operator IS NULL BEGIN SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' RETURN(16) END
		IF @phoneend IS NOT NULL BEGIN
			SET @last4 = @phoneend%10000 SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4
			ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
			IF @@ROWCOUNT > 1 BEGIN SET @errormessage = ''Найдено больше одного номера телефона с данным окончанием'' RETURN(17) END
			IF @card IS NULL BEGIN SET @errormessage = ''Номера телефонов с данным окончанием по оператору партнера не найдены'' RETURN(18) END
		END ELSE
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend
		SELECT @balance = balance, @cardoperator = operator FROM card WHERE number = @card
		IF NOT @cardoperator = @operator BEGIN SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' RETURN(19) END
	END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card AND (refund = 0 OR refund IS NULL)
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND (refund = 0 OR refund IS NULL)
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек возврата уже зарегистрирован''
			IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
			ELSE SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @purchaseid IS NOT NULL OR @purchasenumber IS NOT NULL BEGIN
		IF @purchaseid IS NOT NULL
			SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE id = @purchaseid AND (refund = 0 OR refund IS NULL)
		ELSE BEGIN
			IF @purchasedate IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(20) END
			SET @purchasetimebegin = CONVERT(DATETIME, @purchasedate)
			SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
			IF @purchaseterminal IS NOT NULL
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND pos = @purchaseposid AND terminal = @purchaseterminal AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card					AND (refund = 0 OR refund IS NULL)
			ELSE IF @pos IS NOT NULL
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND pos = @purchaseposid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card					AND (refund = 0 OR refund IS NULL)
			ELSE
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card				AND (refund = 0 OR refund IS NULL)
		END
		IF @cheque IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF (EXISTS (SELECT id FROM cheque WHERE cheque = @cheque and refund = 1)) BEGIN	SET @errormessage = N''Чек возврата уже зарегистрирован''	RETURN(0) END
		SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
		SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus < 0
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SET @cheque = SCOPE_IDENTITY()
		IF @added < 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		IF @redeemed > 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
	END ELSE BEGIN
		IF @amount IS NULL BEGIN SET @errormessage = ''Сумма чека не задана'' RETURN(22) END
		IF @amount <= 0 BEGIN SET @errormessage = ''Сумма чека возврата должна быть больше 0'' RETURN(23) END
		IF @paidbybonus < 0 BEGIN SET @errormessage = ''Сумма оплаты бонусами в чеке не может быть отрицательной'' RETURN(24) END
		IF (NOT EXISTS(SELECT id FROM cheque AS ce WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus)) BEGIN SET @errormessage = N''Не найден чек с данной суммой покупки у данного номера карты'' RETURN(25) END
		IF(NOT EXISTS(SELECT id FROM cheque AS ce WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND NOT EXISTS(SELECT id FROM cheque WHERE cheque = ce.id))) BEGIN	SET @errormessage = N''На чек с данной суммой покупки у данного номера карты уже существует возврат''	RETURN(26) END
		SELECT @cheque = id FROM cheque WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus
		IF @@ROWCOUNT > 1 BEGIN SET @errormessage = N''Найдено больше одного чека с данными параметрами. Воспользуйтесь расширенной формой возврата''	RETURN(27) END
		SET @added = (-1)*(SELECT SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0)
		SET @amount = -@amount
		SELECT @oldbalance = balance FROM card WHERE number = @card
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SELECT @balance = balance FROM card WHERE number = @card
		SET @cheque = SCOPE_IDENTITY()
		IF @paidbybonus IS NULL SET @paidbybonus = 0
		IF @paidbybonus > 0	BEGIN
			SET @redeemed = @paidbybonus
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @paidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
		IF @added < 0 BEGIN
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
	END
	EXEC CardLevelRecount @card = @card, @errormessage = @errormessage OUTPUT
	IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
	ELSE SELECT @balance = balance FROM card WHERE number = @card
	SELECT @partnername = name FROM partner WHERE id = @partner
	IF @phoneend IS NOT NULL SELECT @phone = phone FROM client WHERE id = (SELECT client FROM card WHERE number = @card)
	IF @phone IS NULL SELECT TOP 1 @phone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = @card 
	DECLARE @notsendsms bit = 1
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL and @notsendsms = 0
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @paidbybonus = @paidbybonus, @added = @added, @amount = @amount, @refund = 1, @balance = @balance, @errormessage = @errormessage output
	RETURN(0)'
	
	-- В процедуре добавления чека строка с позициями проверяется на заполненность
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @noadd BIT, @noredeem BIT, @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @qtyChequePosition INT = NULL, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL SET @added = 0 IF @redeemed = 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus IS NULL SET @paidbybonus = 0
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount = 0 SET @amount = NULL IF @card = 0 SET @card = NULL IF @phone = 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление бонусов невозможно на деактивированную карту'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @items IS NOT NULL BEGIN
		DECLARE @itemlen TINYINT = 56, @itemtable ChequeItems, @itemsum NUMERIC(9,2) = 0, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		SET @qtyChequePosition = 0
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, @itemlen)
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @noadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				SET @noredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
			IF @nowrite IS NOT NULL AND (@noadd IS NULL OR @noadd = 0) BEGIN
				SET @bonus = 0
				EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @ipaidbybonus, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
				SET @added = @added + @bonus
			END
			SET @qtyChequePosition = @qtyChequePosition + 1
		END
		SET @norules = 1
		IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	END ELSE BEGIN
		SET @qtyChequePosition = (SELECT COUNT(*) FROM @chequeitems)
		IF(@qtyChequePosition > 0) BEGIN
			SET @norules = 1
			IF (@amount <> (SELECT SUM(amount) FROM @chequeitems)) BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
		END
	END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @nowrite IS NOT NULL OR @paidbybonus > 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @qtyChequePosition > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @qtyChequePosition BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @noredeem = noredeem FROM @itemtable WHERE id = @i
				IF @noredeem IS NULL OR @noredeem = 0 BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @qtyChequePosition BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @noredeem = noredeem FROM @itemtable WHERE id = @i
					IF @noredeem IS NULL OR @noredeem = 0 BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem
					SET @maxredeem = @balance
				END
			END
			IF @paidbybonus < @maxredeem BEGIN
				SET @relation = @paidbybonus / @maxredeem SET @i = 0 SET @redeem = 0
				WHILE @i < @qtyChequePosition BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @noredeem = noredeem FROM @itemtable WHERE id = @i
					IF @noredeem IS NULL OR @noredeem = 0 BEGIN
						SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET redeemed = @iredeemed WHERE id = @i
						SET @redeem = @redeem + @iredeemed
						SET @ilast = @i SET @iredeemedlast = @iredeemed
					END
				END
				IF NOT @redeem = @paidbybonus BEGIN
					UPDATE @itemtable SET redeemed = @iredeemedlast + @paidbybonus - @redeem
					SET @redeem = @paidbybonus
				END
			END
			SELECT position, code, price, quantity, amount, maxredeem, redeemed FROM @itemtable
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL RETURN (0)
	END
	IF @operatorname IS NOT NULL AND @paidbybonus IS NOT NULL BEGIN
		IF @paidbybonus > @maxredeem BEGIN SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26) END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
	SET @cheque = SCOPE_IDENTITY()
	IF(@items IS NOT NULL) INSERT INTO item (position, cheque, code, price, quantity, amount, paidbybonus) SELECT position, @cheque, code, price, quantity, amount, paidbybonus FROM @itemtable
	IF(@qtyChequePosition > 0) BEGIN
		INSERT INTO item (position, cheque, code, price, quantity, amount, paidbybonus) 
		SELECT position, @cheque, code, price, quantity, amount, paidbybonus FROM @chequeitems
	END
	IF @bonusid IS NULL BEGIN
		SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
		IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
	END
	IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	SET @oldbalance = @balance
	SELECT @balance = balance FROM card WHERE number = @card
	SET @added = @balance - @oldbalance
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
		
	-- В процедуре расчета бонусов по чеку добавлен параметр "Не записывать", сделано раньше, но тогда в апдейт не попало
	IF OBJECT_ID('_BonusCheque') IS NOT NULL DROP PROCEDURE _BonusCheque
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE _BonusCheque
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@bonus NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@chequetime DATETIME = NULL,
	@item INT = NULL,
	@birthdate DATE = NULL,
	@nowrite BIT = NULL
	AS SET NOCOUNT ON
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN (1) END
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан партнер'' RETURN (2) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма'' RETURN (3) END
	IF @cheque IS NULL AND @nowrite IS NULL BEGIN SET @errormessage = ''Не задан чек'' RETURN (4) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN (5) END
	IF @amount IS NULL SET @amount = 0 IF @paidbybonus IS NULL SET @paidbybonus = 0 SET @bonus = 0
	DECLARE @chequerule SMALLINT, @interest NUMERIC(9,2), @fixed NUMERIC(9,2), @begindate DATE, @enddate DATE, @operator SMALLINT = NULL, @cardlevel SMALLINT = NULL, @level SMALLINT = NULL, @nopaidbybonus BIT = NULL, @expdays SMALLINT = NULL, @expirydate DATE = NULL, @active BIT = NULL, @actdays TINYINT = NULL, @cardtype SMALLINT = NULL, @type SMALLINT = NULL, @match BIT = 1, @rulepartner SMALLINT = NULL, @rulecode NVARCHAR(10) = NULL, @begweekday TINYINT = NULL, @endweekday TINYINT = NULL, @begtime TIME(0) = NULL, @endtime TIME(0) = NULL, @weekday TINYINT = NULL, @time TIME(0) = NULL, @stop BIT = NULL, @minsum NUMERIC(9,2), @maxsum NUMERIC(9,2), @friendcard BIGINT = NULL, @friend BIT = NULL, @birthday BIT = NULL, @chequedate DATE = NULL, @rulebonus NUMERIC(9,2) = NULL
	SET @chequedate = @chequetime
	SELECT @operator = operator FROM partner WHERE id = @partner
	SELECT @cardlevel = level, @cardtype = type, @friendcard = friendcard FROM card WHERE number = @card
	DECLARE tBonusCheque CURSOR LOCAL FAST_FORWARD FOR SELECT id, interest, fixed, begdate, enddate, level, expdays, actdays, nopaidbybonus, cardtype, partner, code, begweekday, endweekday, begtime, endtime, stop, minsum, maxsum, friend, birthday FROM chequerule WHERE active = 1 AND (partner = @partner OR operator = @operator) ORDER BY priority
	OPEN tBonusCheque
	FETCH NEXT FROM tBonusCheque INTO @chequerule, @interest, @fixed, @begindate, @enddate, @level, @expdays, @actdays, @nopaidbybonus, @type, @rulepartner, @rulecode, @begweekday, @endweekday, @begtime, @endtime, @stop, @minsum, @maxsum, @friend, @birthday
	WHILE @@FETCH_STATUS = 0 BEGIN
		SET @rulebonus = 0 SET @match = 1
		IF @nowrite = 0 SET @nowrite = NULL
		IF @expdays IS NULL SET @expdays = 365 SET @expirydate = GETDATE() + @expdays
		SET @active = NULL IF @actdays IS NULL OR @actdays = 0 SET @active = 1
		SET @weekday = DATEPART(DW, @chequetime - 1)
		IF @weekday = 0 SET @weekday = 7
		SET @time = @chequetime
		IF @match = 1 AND @rulepartner IS NOT NULL
			IF NOT @partner = @rulepartner
				SET @match = 0
		IF @match = 1 AND @begindate IS NOT NULL
			IF NOT @chequetime >= @begindate
				SET @match = 0
		IF @match = 1 AND @enddate IS NOT NULL
			IF NOT @chequetime < DATEADD(DAY, 1, @enddate)
				SET @match = 0
		IF @match = 1 BEGIN
			IF @rulecode IS NOT NULL BEGIN
				IF @code IS NULL
					SET @match = 0
				ELSE BEGIN
					IF NOT @code = @rulecode
						SET @match = 0
				END
			END
		END
		IF @match = 1 AND @begweekday IS NOT NULL
			IF @weekday < @begweekday
				SET @match = 0
		IF @match = 1 AND @endweekday IS NOT NULL
			IF @weekday > @endweekday
				SET @match = 0
		IF @match = 1 AND @begtime IS NOT NULL
			IF @time < @begtime
				SET @match = 0
		IF @match = 1 AND @endtime IS NOT NULL
			IF @time > @endtime
				SET @match = 0
		IF @match = 1 AND @minsum IS NOT NULL
			IF @amount < @minsum
				SET @match = 0
		IF @match = 1 AND @maxsum IS NOT NULL
			IF @amount > @maxsum
				SET @match = 0
		IF @match = 1 AND @level IS NOT NULL
			IF @cardlevel IS NOT NULL BEGIN
				IF NOT @cardlevel = @level
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @type IS NOT NULL
			IF @cardtype IS NOT NULL BEGIN
				IF NOT @cardtype = @type
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @birthday IS NOT NULL
			IF @birthdate IS NULL
				SET @match = 0
			ELSE IF @chequedate IS NULL
				SET @match = 0
			ELSE IF NOT @chequedate = @birthdate
				SET @match = 0
		IF @match = 1 BEGIN
			IF @interest IS NOT NULL BEGIN
				IF @nopaidbybonus IS NULL OR @nopaidbybonus = 0
					SET @rulebonus = @rulebonus + @amount * @interest / 100
				ELSE
					SET @rulebonus = @rulebonus + (@amount - @paidbybonus) * @interest / 100
			END
			IF @fixed IS NOT NULL SET @rulebonus = @rulebonus + @fixed
			IF @friend IS NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@card, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 1, @item)
			ELSE IF @friendcard IS NOT NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@friendcard, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 8, @item)
			SET @bonus = @bonus + @rulebonus
		END
		IF @match = 1 AND @stop = 1
			BREAK
		FETCH NEXT FROM tBonusCheque INTO @chequerule, @interest, @fixed, @begindate, @enddate, @level, @expdays, @actdays, @nopaidbybonus, @type, @rulepartner, @rulecode, @begweekday, @endweekday, @begtime, @endtime, @stop, @minsum, @maxsum, @friend, @birthday
	END
	CLOSE tBonusCheque
	DEALLOCATE tBonusCheque     
	RETURN (0)'
	
	-- В процедуре списания проверяется, можно ли списывать по карте без клиента
	IF OBJECT_ID('Redeem') IS NOT NULL DROP PROCEDURE Redeem
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Redeem
	@card BIGINT = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@bonus NUMERIC(9,2) = NULL,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@bonusid INT OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @cardoperator SMALLINT = NULL, @partneroperator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @partnername NVARCHAR(20) = NULL, @operator SMALLINT = NULL, @phoneend INT = NULL, @last4 SMALLINT = NULL, @middle2 TINYINT = NULL, @cardend INT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @freecard BIT = NULL, @freeredeem BIT = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не задан'' RETURN(7) END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (8) END
	SELECT @prefix = prefix, @numlen = numlen, @freecard = freecard, @freeredeem = freeredeem FROM operator WHERE id = @operator
	IF @freeredeem = 0 SET @freeredeem = NULL
	IF @phone IS NOT NULL IF @phone < 1000000 SET @phoneend = @phone%1000000
	IF @card IS NOT NULL IF @card < 100000 SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL BEGIN
		EXECUTE @result = Identify @card = @card OUTPUT, @phone = @phone, @client = @client OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @partner = @partner
		IF NOT @result = 0 RETURN (@result)
		IF @client IS NULL AND @freeredeem IS NULL BEGIN SET @errormessage = ''Клиент не найден'' RETURN(7) END
	END ELSE BEGIN
		IF @operator IS NULL BEGIN SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' RETURN(9) END
		IF @phoneend IS NOT NULL BEGIN
			SET @last4 = @phoneend%10000 SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4
			ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
			IF @@ROWCOUNT > 1 BEGIN SET @errormessage = ''Найдено больше одного номера телефона с данным окончанием'' RETURN(10) END
		END ELSE
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend
		SELECT @balance = balance, @cardoperator = operator FROM card WHERE number = @card
		IF NOT @cardoperator = @operator BEGIN SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' RETURN(11) END
		IF @client IS NULL AND (@freecard = 0 OR @freecard IS NULL) AND (@freeredeem = 0 OR @freeredeem IS NULL) BEGIN SET @errormessage = ''Карта еще не привязана к клиенту'' RETURN (15) END
	END
	IF NOT EXISTS (SELECT number FROM card WHERE number = @card AND status = 0) BEGIN SET @errormessage = ''Списание возможно только с Активной карты'' RETURN (13) END
	IF @bonus IS NULL BEGIN SET @errormessage = ''Не задано количество списываемых бонусов'' RETURN(12) END
	IF @bonus > @balance BEGIN SET @errormessage = ''Недостаточный баланс'' RETURN(15) END
	SET @bonus = -@bonus
	EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @bonus, @operator = @operator, @partner = @partner, @errormessage = @errormessage OUTPUT, @source = 1, @id = @bonusid OUTPUT
	SET @oldbalance = @balance
	IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
	ELSE SELECT @balance = balance FROM card WHERE number = @card
	SET @redeemed = @oldbalance - @balance
	SELECT @partnername = name FROM partner WHERE id = @partner 
	IF @phoneend IS NOT NULL SELECT @phone = phone FROM client WHERE id = (SELECT client FROM card WHERE number = @card)
	IF @phone IS NULL SELECT TOP 1 @phone = number FROM phone WHERE card = @card AND validated = 1
	DECLARE @notsendsms bit = 1
	SELECT @notsendsms = noredeemsms FROM operator WHERE id = @operator
	--IF @phone IS NOT NULL and @notsendsms = 0
		--exec ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @redeemed = @redeemed, @errormessage = @errormessage output
	RETURN (0)'
	
END ELSE IF @version = 321 BEGIN
	SELECT '3.22 20171016 Смирнов'

	--Добавлено. Если у клиента оператора не заполнена ТТ и не заполнен адрес, то проставляется партнёр "m5reception" (у остальных операторов "Нет"). Если ТТ не заполнена, но заполнен пароль, то наименование оператора
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			
		SELECT
			COALESCE((SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cr.pos), (SELECT name FROM operator WHERE id = @operator)) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT pr.name FROM partner AS pr WHERE pr.operator = @operator AND pr.name = N''m5reception''), N''Нет'')
				WHEN cr.pos IS NULL AND cr.password IS NOT NULL THEN (SELECT name FROM operator WHERE id = @operator)
				ELSE N''Нет''
			END AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

END ELSE IF @version = 322 BEGIN
	SELECT '3.23 20171017 Смирнов'

	--Добавлено. В случае, если у клиента не заполнена ТТ и пароль к лку, то возвращается брэнд m5reception и ТТ m5reception для m5-bonus, для других операторов "Нет". Если у клиента заполнен пароль и не заполнена ТТ, то брэнд оператора и ТТ сайт.
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			
		SELECT
			CASE
				WHEN cr.pos IS NOT NULL THEN (SELECT pr.name FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT pr.name FROM partner AS pr WHERE pr.operator = @operator AND pr.name = N''m5reception''), N''Нет'')
				WHEN cr.pos IS NULL AND cr.password IS NOT NULL THEN (SELECT name FROM operator WHERE id = @operator)
			END AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''M5TT21'' AND pr.operator = @operator), N''Нет'')
				WHEN cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
				ELSE N''Нет''
			END AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

END ELSE IF @version = 323 BEGIN
	SELECT '3.24 20171020 Смирнов'

	--Исправлено. Выходному параметру @id при вызове процедуры присваивается значение NULL по умолчанию. Чтобы не появлялось ошибки при вызове процедуры без этого параметра.
	IF OBJECT_ID('BonusAdd') IS NOT NULL DROP PROCEDURE BonusAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE BonusAdd
	@card BIGINT = NULL,
	@phone BIGINT = NULL,
	@bonus NUMERIC(9,2) = NULL,
	@operator SMALLINT = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@partner SMALLINT = NULL,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@event SMALLINT = NULL,
	@source TINYINT = NULL,
	@id INT = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @balance NUMERIC(9,2)
	IF @event = 0 SET @event = NULL
	EXEC @result = Identify @phone = @phone, @partner = @partner, @operator = @operator OUTPUT, @card = @card OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @bonus IS NULL SET @bonus = 0
	IF @bonus = 0 BEGIN	SET @errormessage = ''Не задано количество бонусов'' RETURN (11) END
	INSERT INTO bonus (proctime, bonus, card, operator, cheque, refund, partner, event, source) VALUES (GETDATE(), @bonus, @card, @operator, @cheque, @refund, @partner, @event, @source)	
	SET @id = SCOPE_IDENTITY()
 	RETURN(0)'

END ELSE IF @version = 324 BEGIN
	SELECT '3.25 20171020 Смирнов'

	--Добавлено. Привязка менеджера к ТТ
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'pos' AND id = (SELECT id FROM sysobjects WHERE name = 'manager'))
		ALTER TABLE manager ADD pos SMALLINT

	--Добавлено. Авторизация пользователя оператора
	IF OBJECT_ID('ManagerLogin') IS NOT NULL DROP PROCEDURE ManagerLogin
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ManagerLogin
			@phone BIGINT = NULL, 
			@password NVARCHAR(20) = NULL,
			@operator SMALLINT = NULL OUTPUT,
			@partner SMALLINT = NULL OUTPUT,
			@posCode NVARCHAR(10) = NULL OUTPUT,
			@rolename NVARCHAR(50) = NULL OUTPUT,
			@permissioncode NVARCHAR(20) = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		SET NOCOUNT ON
		IF NOT EXISTS(SELECT id FROM client WHERE phone = @phone)
		BEGIN
			SET @errormessage = N''Учётная запись не найдена''
			RETURN(1)
		END

		SELECT
			@operator = mr.operator,
			@partner = mr.partner,
			@posCode = (SELECT code FROM pos WHERE id = mr.pos),
			@rolename = re.name,
			@permissioncode = pn.code
		FROM
			client AS ct
			INNER JOIN manager AS mr ON ct.id = mr.client
			INNER JOIN clientrole AS ce ON ce.client = ct.id
			INNER JOIN role AS re ON ce.role = re.id
			INNER JOIN rolepermission AS rn ON re.id = rn.role
			INNER JOIN permission AS pn ON rn.permission = pn.id
		WHERE
			ct.phone = @phone
			AND ct.password = @password

		IF @@ROWCOUNT <> 1 
		BEGIN
			SET @operator = NULL
			SET	@partner = NULL
			SET	@posCode = NULL
			SET	@rolename = NULL
			SET	@permissioncode = NULL
			SET @errormessage = N''Не найдены данные для учётной записи''
		
			RETURN(2)
		END
		RETURN(0)
	END'

END ELSE IF @version = 325 BEGIN
	SELECT '3.26 20171027 Смирнов'

	--Шаблон смс welcome bonus для оператора M5-BONUS
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = 'smspatternwelcomeM5') 
		INSERT INTO parameter (name, value) VALUES ('smspatternwelcomeM5', 'Приветствуем! Баланс {0}Б. {1} ТРЦ Мегаполис')

	--Добавлен. Отправка смс по шаблону welcome bonus для оператора M5-BONUS
	IF OBJECT_ID('ClientNotificationBonus') IS NOT NULL DROP PROCEDURE ClientNotificationBonus
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientNotificationBonus
	@phone bigint = null, 
	@operator smallint = null,
	@balance numeric(9,2) = null, 
	@paidbybonus numeric(9,2) = null, 
	@added numeric(9,2) = null, 
	@redeemed numeric(9,2) = null,
	@amount numeric(9,2) = null,
	@refund bit = null,
	@bonusagent bit = null,
	@operatorbonus BIT = NULL,
	@birthdaybonus BIT = NULL,
	@birthdaydate DATE = NULL,
	@promobonus BIT = NULL,
	@promodate DATE = NULL,	
	@friendbonus BIT = NULL,
	@welcomebonus BIT = NULL,
	@errormessage nvarchar(100) = null output
	AS SET NOCOUNT ON
	DECLARE @text1 NVARCHAR(100) = NULL,
			@text2 NVARCHAR(100) = NULL,
			@text3 NVARCHAR(100) = NULL,
			@text4 NVARCHAR(100) = NULL,
			@text5 NVARCHAR(100) = NULL,
			@lkuaddress NVARCHAR(50) = NULL,
			@smsusername NVARCHAR(20) = NULL, 
			@smspassword NVARCHAR(20) = NULL, 
			@smssender NVARCHAR(20) = NULL, 
			@smsprovider NVARCHAR(20) = NULL, 
			@text NVARCHAR(200) = NULL,
			@client INT = NULL,
			@addednegative BIT = NULL,
			@redeemednegative BIT = NULL,
			@paidbybonusnegative BIT = NULL,
			@temporaryvariableredeemed NUMERIC(9,2) = NULL,
			@temporaryvariableadded NUMERIC(9,2) = NULL,
			@temporaryvariablepaidbybonus NUMERIC(9,2) = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1)	END
	
	SELECT @lkuaddress = LKUAddress FROM operator WHERE id = @operator
	if(@refund = 1) --refund (возврат)
	begin
		IF(@added < 0)
		BEGIN
			SET @addednegative = 1
		END
		IF(@redeemed < 0)
		BEGIN
			SET @redeemednegative = 1
		END
		IF(@paidbybonus < 0)
		BEGIN
			SET @paidbybonusnegative = 1
		END

		IF(@addednegative = 1)
		BEGIN
			SET @temporaryvariableredeemed = @redeemed
			SET @redeemed = ABS(@added)
			SET @temporaryvariablepaidbybonus = @paidbybonus
			SET @paidbybonus = ABS(@added)
			SET @temporaryvariableadded = @added
			SET @added = NULL
		END

		IF(@redeemednegative = 1)
		BEGIN
			SET @temporaryvariableadded = @added
			SET @added = COALESCE(ABS(@temporaryvariableredeemed), ABS(@redeemed))
		END

		IF(@paidbybonusnegative = 1)
		BEGIN
			SET @temporaryvariableadded = @added
			SET @added = COALESCE(ABS(@temporaryvariablepaidbybonus), ABS(@paidbybonus))
		END
		SET @amount = ABS(@amount)
		SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@amount, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternrefund''
		SELECT @text2 = REPLACE(value, N''{0}'', cast(cast(round(@added, 0) as int) as nvarchar)) FROM parameter WHERE name = ''smspatternadded''
		SELECT @text3 = REPLACE(value, N''{0}'', cast(cast(round(@paidbybonus, 0) as int) as nvarchar)) FROM parameter WHERE name = ''smspatternredeemed''
		SELECT @text4 = REPLACE(value, N''{0}'', cast(cast(round(@balance, 0) as int) as nvarchar)) FROM parameter WHERE name = ''smspatternbalance''
		SET @text = COALESCE(@text1 + CHAR(13), '''') +
					COALESCE(@text2 + CHAR(13) + @text3 + CHAR(13), @text2 + CHAR(13) + @text4 + CHAR(13), @text3 + CHAR(13) + @text4 + CHAR(13))
	
	end
	else if(@bonusagent = 1) --отправка смс агентам
	begin		
		if(@added is not null)
		begin
			SELECT @text1 = value FROM parameter WHERE name = ''smsagent1''
			SET @text2 = coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')
		end
		else
		begin
			SELECT @text1 = value FROM parameter WHERE name = ''smsagent2''
			SET @text2 = coalesce(cast(cast(round(@redeemed, 0) as int) as nvarchar), '''')
		end
		SELECT @text3 = value FROM parameter WHERE name = ''smsagent3''
		SELECT @text4 = LKUAddress FROM operator WHERE id = @operator
		SET @text = @text1 + @text2 + @text3 + @text4
	end
	ELSE IF (@operatorbonus = 1)
	BEGIN
		IF(@added IS NOT NULL)
		BEGIN
			SET @added = ABS(@added)
			SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternoperator''
		END
		ELSE
		BEGIN
			SET @redeemed = ABS(@redeemed)
			SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@redeemed, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternredeemed''
		END
		SELECT @text2 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@balance, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternbalance''
		SET @text = COALESCE(@text1 + CHAR(13), '''') +
					COALESCE(@text2 + CHAR(13), '''') +
					coalesce(@lkuaddress, '''')
	END
	ELSE IF (@birthdaybonus = 1)
	BEGIN
		SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternbirthday''
		IF (@birthdaydate IS NOT NULL)
		BEGIN
			SELECT @text2 = REPLACE(value, N''{0}'', CAST(RIGHT(''0'' + RTRIM(DAY(@birthdaydate)), 2) AS NVARCHAR) + ''.'' + CAST(RIGHT(''0'' + RTRIM(MONTH(@birthdaydate)), 2) AS NVARCHAR)) FROM parameter WHERE name = ''smspatternbirthday1''
		END
		SET @text = COALESCE(@text1 + CHAR(13), '''') + COALESCE(@text2, '''') +
					coalesce(@lkuaddress, '''')
	END
	ELSE IF (@promobonus = 1)
	BEGIN
		SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternpromo1''
		SELECT @text2 = REPLACE(value, N''{0}'', CAST(RIGHT(''0'' + RTRIM(DAY(@promodate)), 2) AS NVARCHAR) + ''.'' + CAST(RIGHT(''0'' + RTRIM(MONTH(@promodate)), 2) AS NVARCHAR)) FROM parameter WHERE name = ''smspatternpromo2''
		SET @text = COALESCE(@text1 + CHAR(13), '''') +
					COALESCE(@text2 + CHAR(13), '''') +
					coalesce(@lkuaddress, '''')
	END
	ELSE IF (@friendbonus = 1)
	BEGIN
		SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternfriend''
		SET @text = COALESCE(@text1 + CHAR(13), '''') +
					coalesce(@lkuaddress, '''')
	END
	ELSE IF (@welcomebonus = 1)
	BEGIN
		IF((SELECT name FROM operator WHERE id = @operator) = N''M5-BONUS'')
		BEGIN
			SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternwelcomeM5''
			SET @text1 = REPLACE(@text1, N''{1}'', COALESCE(@lkuaddress, ''''))
			SET @text = COALESCE(@text1 + CHAR(13), '''')
		END
		ELSE
		BEGIN
			SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternwelcome''
			SET @text = COALESCE(@text1 + CHAR(13), '''') +
						coalesce(@lkuaddress, '''')
		END
	END
	else if(@redeemed is not null AND @added IS NULL) --redeem (списание)
	begin
		SET @added = ABS(@added) SET @redeemed = ABS(@redeemed) SET @amount = ABS(@amount) SET @paidbybonus = ABS(@paidbybonus)
		SELECT @text1 = value FROM parameter WHERE name = ''smsredeem1''
		SELECT @text2 = value FROM parameter WHERE name = ''smsredeem2''
		SELECT @text3 = value FROM parameter WHERE name = ''smsredeem3''
		SELECT @text4 = value FROM parameter WHERE name = ''smsredeem4''
		SET @text = --@text1 + coalesce(cast(cast(round(@amount, 0) as int) as nvarchar), '''') + 
					@text2 + coalesce(cast(cast(round(@redeemed, 0) as int) as nvarchar), '''') + 
					@text3 + coalesce(cast(cast(round(@balance, 0) as int) as nvarchar), '''') + 
					@text4 + coalesce(@lkuaddress, '''')
	end
	else if(@added is not null AND @redeemed IS NULL) -- начисление
	begin
		SET @added = ABS(@added) SET @redeemed = ABS(@redeemed) SET @amount = ABS(@amount) SET @paidbybonus = ABS(@paidbybonus)
		SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@amount, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternamount''
		SELECT @text2 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternadded''
		SELECT @text3 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@balance, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternbalance''
		SET @text = COALESCE(@text1 + CHAR(13), '''') +
					COALESCE(@text2 + CHAR(13), '''') +
					coalesce(@lkuaddress, COALESCE(@text3, ''''))
	end
	ELSE IF @added IS NOT NULL AND @redeemed IS NOT NULL BEGIN
		SET @added = ABS(@added) SET @redeemed = ABS(@redeemed) SET @amount = ABS(@amount) SET @paidbybonus = ABS(@paidbybonus)
		SELECT @text1 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@redeemed, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternredeemed''
		SELECT @text2 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@added, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternadded''
		SELECT @text3 = REPLACE(value, N''{0}'', coalesce(cast(cast(round(@amount, 0) as int) as nvarchar), '''')) FROM parameter WHERE name = ''smspatternamount''	
		SET @text = COALESCE(@text1 + CHAR(13), '''') + 
					COALESCE(@text2 + CHAR(13), '''') + 
					COALESCE(@lkuaddress, COALESCE(@text3, ''''))
	END
	else
	begin
		set @errormessage = ''Не заданы параметры отправки смс''
		return(2)
	end
	SET @smsprovider = ''greensms''
	SELECT @smsprovider = smsprovider, @smsusername = smsusername, @smspassword = smspassword, @smssender = smssender FROM operator WHERE id = @operator
	IF @@ROWCOUNT = 0 BEGIN
		SELECT @smsusername = value FROM parameter WHERE name = ''smsusername''
		SELECT @smspassword = value FROM parameter WHERE name = ''smspassword''
		SELECT @smssender = value FROM parameter WHERE name = ''smssender''
	END		
	SELECT @client = client FROM phone WHERE number = @phone
	IF @smsprovider = ''greensms''
		EXEC SmsSendGreenSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
	ELSE IF @smsprovider = ''terasms''
		EXEC SmsSendTeraSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender		
	IF @text IS NULL SET @text = ''Текст сообщения в процедуре ClientNotificationBonus не заполнен''
	INSERT INTO message (client, text, rectime, phone, status, provider, operator) VALUES (@client, @text, GETDATE(), @phone, 1, @smsprovider, @operator)
	RETURN(0)'

END ELSE IF @version = 326 BEGIN
	SELECT '3.27 20171030 Смирнов'

	--Добавлен номер телефона покупателя
	if OBJECT_ID('Cheques') is not null drop procedure Cheques
	EXEC sp_executesql @statement = N'create procedure Cheques @client INT = NULL,
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL,
	@cheque INT = NULL,
	@page SMALLINT = NULL,
	@pagesize SMALLINT = NULL,
	@pagecount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	BEGIN
		IF @client = 0 SET @client = NULL 
		IF @card = 0 SET @card = NULL 
		IF @partner = 0 SET @partner = NULL 
		IF @operator = 0 SET @operator = NULL 
		IF @cheque = 0 SET @cheque = NULL
		IF @page = 0 
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pagesize = 0
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pos = 0 SET @pos = NULL
		declare @cheques as table
		(
			cheque INT,
			rownum INT,
			unique clustered (cheque, rownum)
		)
		set @pagecount = 1
		IF @client IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) 
			ORDER BY 
				c.id
		end
		ELSE IF @card IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card = @card 
			ORDER BY 
				c.id
		end
		ELSE IF @partner IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner = @partner 
				ORDER BY 
					c.id
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner = @partner
				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner = @partner 
				ORDER BY 
					c.id
			end
		end
		ELSE IF @operator IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner IN (SELECT id FROM partner WHERE operator = @operator) 
				ORDER BY 
					c.id
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner IN (SELECT id FROM partner WHERE operator = @operator) 

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner IN (SELECT id FROM partner WHERE operator = @operator) 
				ORDER BY 
					c.id
			end
		end
		ELSE IF @cheque IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.id = @cheque 
			ORDER BY 
				c.id
		end
		ELSE IF @pos IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.pos = @pos 
				ORDER BY 
					c.id
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					pos = @pos 

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.pos = @pos 
				ORDER BY 
					c.id
			end
		end
		ELSE
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) 
				AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			ORDER BY 
				c.id
		end
		RETURN (0)
	END'	

END ELSE IF @version = 327 BEGIN
	SELECT '3.28 20171030 Смирнов'

	--Добавлено. Все чеки оператора сортируются по дате в порядке убывания. Для постраничных данных ничего не поменялось
	if OBJECT_ID('Cheques') is not null drop procedure Cheques
	EXEC sp_executesql @statement = N'create procedure Cheques @client INT = NULL,
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL,
	@cheque INT = NULL,
	@page SMALLINT = NULL,
	@pagesize SMALLINT = NULL,
	@pagecount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	BEGIN
		IF @client = 0 SET @client = NULL 
		IF @card = 0 SET @card = NULL 
		IF @partner = 0 SET @partner = NULL 
		IF @operator = 0 SET @operator = NULL 
		IF @cheque = 0 SET @cheque = NULL
		IF @page = 0 
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pagesize = 0
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pos = 0 SET @pos = NULL
		declare @cheques as table
		(
			cheque INT,
			rownum INT,
			unique clustered (cheque, rownum)
		)
		set @pagecount = 1
		IF @client IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) 
			ORDER BY 
				c.id
		end
		ELSE IF @card IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card = @card 
			ORDER BY 
				c.id
		end
		ELSE IF @partner IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner = @partner 
				ORDER BY 
					c.id
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner = @partner
				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner = @partner 
				ORDER BY 
					c.id
			end
		end
		ELSE IF @operator IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner IN (SELECT id FROM partner WHERE operator = @operator) 
				ORDER BY 
					c.chequetime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner IN (SELECT id FROM partner WHERE operator = @operator) 

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner IN (SELECT id FROM partner WHERE operator = @operator) 
				ORDER BY 
					c.id
			end
		end
		ELSE IF @cheque IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.id = @cheque 
			ORDER BY 
				c.id
		end
		ELSE IF @pos IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.pos = @pos 
				ORDER BY 
					c.id
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					pos = @pos 

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.pos = @pos 
				ORDER BY 
					c.id
			end
		end
		ELSE
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) 
				AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			ORDER BY 
				c.id
		end
		RETURN (0)
	END'	

END ELSE IF @version = 328 BEGIN
	SELECT '3.29 20171030 Смирнов'
	
	--Добавлено. Возвращает список клиентов оператора
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients
			@operator SMALLINT = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			cr.client,
			COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
			cr.phone,
			COALESCE(cr.email, N''Отсутствует'') AS email,
			cr.birthdate,
			CASE
				WHEN cr.gender = 1 THEN N''Мужской''
				WHEN cr.gender = 0 THEN N''Женский''
				ELSE N''Не указан''
			END AS gender,
			COALESCE(ce.name, N''Клиент''),
			cd.number,
			COALESCE(ll.condition, N''Отсутствует''),
			cd.fullbalance,
			(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL)) AS buyqty,
			(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL)) AS buysum,
			(SELECT chequetime FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number)) AS lastBuyDate,
			(SELECT amount FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number)) AS lastBuyAmount,
			(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
			(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			LEFT JOIN cardtype AS ce ON ce.id = cd.type
			LEFT JOIN level AS ll ON cd.level = ll.id
		WHERE
			cr.operator = @operator
		RETURN(0)
	END'

	--Добавлено. Возвращает информацию о бонусах и чеках помесячно по карте
	IF OBJECT_ID(N'CardBonusesByMonth', 'P') IS NOT NULL DROP PROCEDURE CardBonusesByMonth
	EXEC sp_executesql @statement = N'CREATE PROCEDURE CardBonusesByMonth @card BIGINT = NULL,
		@from DATE = NULL,
		@to DATE = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
		BEGIN
			SET @errormessage = N''Не найден номер карты''
			RETURN(1)
		END
		declare @cheques as table
		(
			cheque INT,
			rownum INT,
			unique clustered (cheque, rownum)
		)
		DECLARE @bonuses AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @bonuscheques AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			amount NUMERIC(9,2),
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime)
		SELECT
			CASE 
				WHEN bs.bonus > 0 THEN bs.bonus
				WHEN bs.bonus <= 0 THEN 0
			END AS bonusAdded,
			CASE 
				WHEN bs.bonus > 0 THEN 0
				WHEN bs.bonus <= 0 THEN (-1)*bs.bonus
			END AS bonusRedeemed,
			bs.cheque,
			COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
			bs.proctime
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			card = @card 
			AND bs.proctime >= @from 
			AND bs.proctime < @to	
			
		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource)
		SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource FROM @bonuses WHERE cheque IS NOT NULL

		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, proctime)
		SELECT 
			bs.bonusAdded,
			bs.bonusRedeemed,
			bs.cheque,
			bs.bonussource,
			bs.proctime
		FROM
			@bonuses AS bs
		where
			bs.cheque IS NULL

		UPDATE bs SET bs.proctime = ce.chequetime, bs.amount = ce.amount
		FROM
			@bonuscheques AS bs
			INNER JOIN cheque AS ce ON bs.cheque = ce.id
	
		SELECT
			SUM(COALESCE(bonusAdded, 0)) AS bonusAdded,
			SUM(COALESCE(bonusRedeemed, 0)) AS bonusRedeemed,
			AVG(COALESCE(amount, 0)) AS avgcheque,
			SUM(COALESCE(amount, 0)) AS chequeSum,
			DATEPART(MONTH, proctime) monthnum
		FROM 
			@bonuscheques
		GROUP BY
			DATEPART(MONTH, proctime)
		RETURN(0)
	END'
	
	
END ELSE IF @version = 329 BEGIN
	SELECT '3.30 20171105 Медянин'
	
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @noadd BIT, @noredeem BIT, @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = NULL, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL SET @added = 0 IF @redeemed = 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus IS NULL SET @paidbybonus = 0
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount = 0 SET @amount = NULL IF @card = 0 SET @card = NULL IF @phone = 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление бонусов невозможно на деактивированную карту'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @items IS NOT NULL BEGIN
		DECLARE @itemlen TINYINT = 56, @itemsum NUMERIC(9,2) = 0, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		SET @itemscount = 0
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, @itemlen)
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @noadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				SET @noredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			IF @nowrite IS NOT NULL AND (@noadd IS NULL OR @noadd = 0) BEGIN
				SET @bonus = 0
				EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @ipaidbybonus, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
				SET @added = @added + @bonus
			END
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem, added) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem, @bonus)
			SET @itemscount = @itemscount + 1
		END
		SET @norules = 1
		IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @noadd = noadd, @noredeem = noredeem, @maxredeem = maxredeem, @added = added, @redeemed = redeemed FROM @chequeitems WHERE id = @i
				IF @nowrite IS NOT NULL AND (@noadd IS NULL OR @noadd = 0) BEGIN
					SET @bonus = 0
					EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @ipaidbybonus, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
					SET @added = @added + @bonus
				END
				INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem, added) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem, @bonus)
			END
			SET @norules = 1
			IF (@amount <> (SELECT SUM(amount) FROM @chequeitems)) BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
		END
	END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @nowrite IS NOT NULL OR @redeemed > 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @noredeem = noredeem FROM @itemtable WHERE id = @i
				IF @noredeem IS NULL OR @noredeem = 0 BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @noredeem = noredeem FROM @itemtable WHERE id = @i
					IF @noredeem IS NULL OR @noredeem = 0 BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem
					SET @maxredeem = @balance
				END
			END
			IF @redeemed < @maxredeem BEGIN
				SET @relation = @paidbybonus / @maxredeem SET @i = 0 SET @redeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @noredeem = noredeem FROM @itemtable WHERE id = @i
					IF @noredeem IS NULL OR @noredeem = 0 BEGIN
						SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET redeemed = @iredeemed WHERE id = @i
						SET @redeem = @redeem + @iredeemed
						SET @ilast = @i SET @iredeemedlast = @iredeemed
					END
				END
				IF NOT @redeem = @redeemed BEGIN
					UPDATE @itemtable SET redeemed = @iredeemedlast + @paidbybonus - @redeem
					SET @redeem = @paidbybonus
				END
			END
			SELECT position, code, price, quantity, amount, maxredeem, redeemed FROM @itemtable
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL RETURN (0)
	END
	IF @redeemed IS NOT NULL BEGIN
		IF @redeemed > @maxredeem BEGIN SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26) END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
	SET @cheque = SCOPE_IDENTITY()
	IF(@itemscount > 0)
		INSERT INTO item (position, cheque, code, price, quantity, amount, paidbybonus) SELECT position, @cheque, code, price, quantity, amount, paidbybonus FROM @chequeitems
	IF @bonusid IS NULL BEGIN
		SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
		IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
	END
	IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	SET @oldbalance = @balance
	SELECT @balance = balance FROM card WHERE number = @card
	SET @added = @balance - @oldbalance
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 330 BEGIN
	SELECT '3.31 20171106 Медянин'
	
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = NULL, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	DECLARE @itemsum NUMERIC(9,2) = 0
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		SET @itemscount = 0
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, @itemlen)
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
			SET @itemscount = @itemscount + 1
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL BEGIN
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @inoadd IS NULL BEGIN
					SET @i = @i + 1
					EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @ipaidbybonus, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
					UPDATE @itemtable SET added = @bonus WHERE id = @i
					SET @added = @added + @bonus
				END
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
END ELSE IF @version = 331 BEGIN
	SELECT '3.32 20171107 Смирнов'

	--Добавлено. Если у оператора только одно правило начисления и нет уровней, то возвращать это правило, как уровень начисления.
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients
			@operator SMALLINT = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			cr.client,
			COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
			cr.phone,
			COALESCE(cr.email, N''Отсутствует'') AS email,
			cr.birthdate,
			CASE
				WHEN cr.gender = 1 THEN N''Мужской''
				WHEN cr.gender = 0 THEN N''Женский''
				ELSE N''Не указан''
			END AS gender,
			COALESCE(ce.name, N''Клиент''),
			cd.number,
			COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
			cd.fullbalance,
			(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL)) AS buyqty,
			(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL)) AS buysum,
			(SELECT chequetime FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number)) AS lastBuyDate,
			(SELECT amount FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number)) AS lastBuyAmount,
			(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
			(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			LEFT JOIN cardtype AS ce ON ce.id = cd.type
			LEFT JOIN level AS ll ON cd.level = ll.id
		WHERE
			cr.operator = @operator
		RETURN(0)
	END'

	--Исправлено. Если передаётся чек с позициями, то идёт начисление по позициям.
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = NULL, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	DECLARE @itemsum NUMERIC(9,2) = 0
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		SET @itemscount = 0
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, @itemlen)
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
			SET @itemscount = @itemscount + 1
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL BEGIN
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @inoadd IS NULL BEGIN
					SET @i = @i + 1					
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)
					VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @inoadd)
					SET @itemid = SCOPE_IDENTITY()
					SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
					UPDATE @itemtable SET added = @bonus WHERE id = @i
					SET @added = @added + @bonus
				END
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 332 BEGIN
	SELECT '3.33 20171113 Медянин'	
	
	-- Новый признак у чека - отмененный. Надо, когда он начнет использоваться, добавить все селекты по чекам без этого признака
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'cancelled' AND id = (SELECT id FROM sysobjects WHERE name = 'cheque'))
		ALTER TABLE cheque ADD cancelled BIT
	IF NOT EXISTS(select id from sysindexes where name = 'IX_cheque_cancelled')
		CREATE INDEX IX_cheque_cancelled ON cheque (cancelled)
	
	-- Исправлена ошибка разбора строки @items
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = NULL, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND (cancelled IS NULL OR cancelled = 0)
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	DECLARE @itemsum NUMERIC(9,2) = 0
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		SET @itemscount = 0
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
			SET @itemscount = @itemscount + 1
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL BEGIN
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @inoadd IS NULL BEGIN
					SET @i = @i + 1					
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)
					VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @inoadd)
					SET @itemid = SCOPE_IDENTITY()
					SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
					UPDATE @itemtable SET added = @bonus WHERE id = @i
					SET @added = @added + @bonus
				END
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'

	-- Новая процедура отмены чека по его идентификатору
	IF OBJECT_ID('ChequeCancel') IS NOT NULL DROP PROCEDURE ChequeCancel
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeCancel
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@chequeid INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @posid INT = NULL, @client INT, @phone BIGINT = NULL, @notsendsms BIT = NULL, @balance NUMERIC(9,2) = NULL, @amount NUMERIC(9,2) = NULL, @added NUMERIC(9,2) = NULL, @redeemed NUMERIC(9,2) = NULL, @cancelled BIT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @chequeid = 0 SET @chequeid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (1) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (2) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (3) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @card <= 0 SET @card = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(4) END
	ELSE BEGIN
		SELECT @partner = id, @operator = operator FROM partner WHERE id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (2) END
	END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(5) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(6) END
	EXEC @result = Identify @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @chequeid IS NULL BEGIN SET @errormessage = ''Не задан идентификатор отменяемого чека'' RETURN(7) END
	ELSE BEGIN
		SELECT @chequeid = id, @amount = amount, @cancelled = cancelled FROM cheque WHERE id = @chequeid
		IF @chequeid IS NULL BEGIN SET @errormessage = ''Чек не найден'' RETURN (8) END
		IF @cancelled = 1 BEGIN SET @errormessage = ''Чек уже отменен'' RETURN (9) END
	END
	SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @chequeid AND bonus < 0
	SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @chequeid AND bonus > 0
	BEGIN TRY
		DELETE FROM bonus WHERE cheque = @chequeid
		UPDATE cheque SET cancelled = 1 WHERE id = @chequeid
	END TRY
	BEGIN CATCH SET @errormessage = ''Не удалось удалить бонусы, связанные с чеком'' RETURN (10) END CATCH
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('M5BonusLevels') IS NOT NULL DROP PROCEDURE M5BonusLevels
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE [dbo].[M5BonusLevels] @errormessage nvarchar(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @operator SMALLINT = NULL, 
			@card BIGINT = NULL, 
			@leveldate DATE = NULL, 
			@min DATETIME = NULL, 
			@max DATETIME = NULL, 
			@true BIT = 1, 
			@sum NUMERIC(18,2) = 0, 
			@level SMALLINT = NULL, 
			@level1 SMALLINT = NULL, 
			@level2 SMALLINT = NULL, 
			@level3 SMALLINT = NULL
	SELECT @operator = id FROM operator WHERE name = ''M5-BONUS''
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Оператор не найден'' RETURN(1) END
	SELECT @level1 = id FROM level WHERE operator = @operator AND name = ''SILVER''
	SELECT @level2 = id FROM level WHERE operator = @operator AND name = ''GOLD''
	DECLARE tM5BonusLevels CURSOR LOCAL FAST_FORWARD FOR SELECT number, leveldate FROM card WHERE operator = @operator
	OPEN tM5BonusLevels
	FETCH NEXT FROM tM5BonusLevels INTO @card, @leveldate
	WHILE @@FETCH_STATUS = 0 BEGIN				
		SELECT @sum = SUM(amount) FROM cheque WHERE card = @card AND (cancelled IS NULL OR cancelled = 0)
		IF @sum >= 10000 SET @level = @level2		
		ELSE SET @level = @level1
		UPDATE card SET leveldate = getdate(), level = @level WHERE number = @card
		FETCH NEXT FROM tRalfLevels INTO @card, @leveldate
	END
	CLOSE tM5BonusLevels
	DEALLOCATE tM5BonusLevels
	RETURN(0)'	
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			cr.client,
			COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
			cr.phone,
			COALESCE(cr.email, N''Отсутствует'') AS email,
			cr.birthdate,
			CASE
				WHEN cr.gender = 1 THEN N''Мужской''
				WHEN cr.gender = 0 THEN N''Женский''
				ELSE N''Не указан''
			END AS gender,
			COALESCE(ce.name, N''Клиент''),
			cd.number,
			COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
			cd.fullbalance,
			(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
			(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
			(SELECT chequetime FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
			(SELECT amount FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
			(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
			(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			LEFT JOIN cardtype AS ce ON ce.id = cd.type
			LEFT JOIN level AS ll ON cd.level = ll.id
		WHERE
			cr.operator = @operator
		RETURN(0)
	END'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('Refund') IS NOT NULL DROP PROCEDURE Refund
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Refund
	@card BIGINT = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@pos NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL OUTPUT,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@terminal NVARCHAR(10) = NULL,
	@purchaseid INT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasedate DATE = NULL,
	@purchasepos NVARCHAR(10) = NULL,
	@purchaseterminal NVARCHAR(10) = NULL,
	@redeemed NUMERIC(9,2) = 0 OUTPUT
	AS SET NOCOUNT ON	
	DECLARE @result INT = NULL, 
			@cardoperator SMALLINT = NULL, 
			@partneroperator SMALLINT = NULL, 
			@client INT = NULL, 
			@cheque INT = NULL, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@partnername NVARCHAR(20) = NULL, 
			@operator SMALLINT = NULL, 
			@phoneend INT = NULL, 
			@last4 SMALLINT = NULL, 
			@middle2 TINYINT = NULL, 
			@cardend INT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@purchaseposid INT = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не задан'' RETURN(8) END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (9) END
	SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(10)	END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(11) END
	END ELSE
		IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(12) END
	IF @purchasepos IS NOT NULL BEGIN
		SELECT @purchaseposid = id FROM pos WHERE partner = @partner AND code = @purchasepos
		IF @purchaseposid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки покупки'' RETURN(13) END
	END ELSE
		IF @purchaseterminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала покупки должна быть задана торговая точка'' RETURN(14) END
	IF @phone IS NOT NULL IF @phone < 1000000 SET @phoneend = @phone%1000000
	IF @card IS NOT NULL IF @card < 100000 SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL BEGIN
		EXECUTE @result = Identify @card = @card OUTPUT, @phone = @phone, @client = @client OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @partner = @partner
		IF NOT @result = 0 RETURN (@result)
		IF @client IS NULL BEGIN SET @errormessage = ''Клиент не найден'' RETURN(15) END
	END ELSE BEGIN
		IF @operator IS NULL BEGIN SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' RETURN(16) END
		IF @phoneend IS NOT NULL BEGIN
			SET @last4 = @phoneend%10000 SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4
			ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
			IF @@ROWCOUNT > 1 BEGIN SET @errormessage = ''Найдено больше одного номера телефона с данным окончанием'' RETURN(17) END
			IF @card IS NULL BEGIN SET @errormessage = ''Номера телефонов с данным окончанием по оператору партнера не найдены'' RETURN(18) END
		END ELSE
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend
		SELECT @balance = balance, @cardoperator = operator FROM card WHERE number = @card
		IF NOT @cardoperator = @operator BEGIN SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' RETURN(19) END
	END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card AND refund = 1
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card AND refund = 1
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND refund = 1
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек возврата уже зарегистрирован''
			IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
			ELSE SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @purchaseid IS NOT NULL OR @purchasenumber IS NOT NULL BEGIN
		IF @purchaseid IS NOT NULL
			SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE id = @purchaseid AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE BEGIN
			IF @purchasedate IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(20) END
			SET @purchasetimebegin = CONVERT(DATETIME, @purchasedate)
			SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
			IF @purchaseterminal IS NOT NULL
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND pos = @purchaseposid AND terminal = @purchaseterminal AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
			ELSE IF @pos IS NOT NULL
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND pos = @purchaseposid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
			ELSE
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		END
		IF @cheque IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @cheque and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
		SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus < 0
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SET @cheque = SCOPE_IDENTITY()
		IF @added < 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		IF @redeemed > 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
	END ELSE BEGIN
		IF @amount IS NULL BEGIN SET @errormessage = ''Сумма чека не задана'' RETURN(22) END
		IF @amount <= 0 BEGIN SET @errormessage = ''Сумма чека возврата должна быть больше 0'' RETURN(23) END
		IF @paidbybonus < 0 BEGIN SET @errormessage = ''Сумма оплаты бонусами в чеке не может быть отрицательной'' RETURN(24) END
		IF NOT EXISTS(SELECT id FROM cheque WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND (cancelled IS NULL OR cancelled = 0)) BEGIN SET @errormessage = N''Не найден чек с данной суммой покупки у данного номера карты'' RETURN(25) END
		IF EXISTS(SELECT id FROM cheque AS ce WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND (cancelled IS NULL OR cancelled = 0) AND EXISTS(SELECT id FROM cheque WHERE cheque = ce.id)) BEGIN SET @errormessage = N''На чек с данной суммой покупки у данного номера карты уже существует возврат''	RETURN(26) END
		SELECT @cheque = id FROM cheque WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND (cancelled IS NULL OR cancelled = 0)
		IF @@ROWCOUNT > 1 BEGIN SET @errormessage = N''Найдено больше одного чека с данными параметрами. Воспользуйтесь расширенной формой возврата''	RETURN(27) END
		SET @added = (-1)*(SELECT SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0)
		SET @amount = -@amount
		SELECT @oldbalance = balance FROM card WHERE number = @card
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SELECT @balance = balance FROM card WHERE number = @card
		SET @cheque = SCOPE_IDENTITY()
		IF @paidbybonus IS NULL SET @paidbybonus = 0
		IF @paidbybonus > 0	BEGIN
			SET @redeemed = @paidbybonus
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @paidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
		IF @added < 0 BEGIN
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
	END
	EXEC CardLevelRecount @card = @card, @errormessage = @errormessage OUTPUT
	IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
	ELSE SELECT @balance = balance FROM card WHERE number = @card
	SELECT @partnername = name FROM partner WHERE id = @partner
	IF @phoneend IS NOT NULL SELECT @phone = phone FROM client WHERE id = (SELECT client FROM card WHERE number = @card)
	IF @phone IS NULL SELECT TOP 1 @phone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = @card 
	DECLARE @notsendsms bit = 1
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL and @notsendsms = 0
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @paidbybonus = @paidbybonus, @added = @added, @amount = @amount, @refund = 1, @balance = @balance, @errormessage = @errormessage output
	RETURN(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('PosStatistics') IS NOT NULL DROP PROCEDURE PosStatistics
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE PosStatistics
	@operator SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@clients INT = 0 OUTPUT,
	@clients_all INT = 0 OUTPUT,
	@start_date DATETIME = NULL,
	@end_date DATETIME = NULL,
	@purchases INT = 0 OUTPUT,
	@purchasesum DECIMAL(18, 2) = 0 OUTPUT,
	@refunds INT = 0 OUTPUT,
	@refundsum DECIMAL(18, 2) = 0 OUTPUT,
	@spentsum DECIMAL(18, 2) = 0 OUTPUT,
	@charged DECIMAL(18, 2) = 0 OUTPUT,
	@redeemed DECIMAL(18, 2) = 0 OUTPUT,
	@chargerefund DECIMAL(18, 2) = 0 OUTPUT,
	@redeemrefund DECIMAL(18, 2) = 0 OUTPUT,
	@balance DECIMAL(18, 2) = 0 OUTPUT,
	@paysum DECIMAL(18, 2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@purchasesClient INT = 0 OUTPUT,
	@purchasesumClient DECIMAL(18, 2) = 0 OUTPUT,
	@refundsClient INT = 0 OUTPUT,
	@refundsumClient DECIMAL(18, 2) = 0 OUTPUT
	AS SET NOCOUNT ON
	IF @pos = 0	SET @pos = NULL
	IF @pos IS NULL	BEGIN SET @errormessage = ''Не задан идентификатор Торговой точки'' RETURN (1) END
	IF NOT EXISTS (SELECT id FROM pos WHERE id = @pos) BEGIN SET @errormessage = ''Идентификатор Торговой точки не найден'' RETURN (2) END
	IF @end_date IS NOT NULL SET @end_date = @end_date + ''23:59:59''
	IF @start_date IS NULL SET @start_date = ''19000101''
	IF @end_date IS NULL SET @end_date = GETDATE()
	IF @start_date > @end_date BEGIN SET @errormessage = ''Дата начала периода не может превышать дату окончания периода'' RETURN (3) END	SET @operator = (SELECT	operator.id	FROM dbo.pos INNER JOIN dbo.partner	ON pos.partner = partner.id	INNER JOIN dbo.operator	ON partner.operator = operator.id WHERE pos.id = @pos)
	--Клиенты хотя бы с 1 покупкой
	SELECT @clients = COALESCE(COUNT(DISTINCT cr.client), 0) FROM cheque AS ce INNER JOIN card AS cd ON ce.card = cd.number	INNER JOIN clientoperator AS cr	ON cd.client = cr.client WHERE ce.proctime >= @start_date AND ce.proctime <= @end_date AND cr.pos = @pos AND cd.operator = @operator AND (ce.cancelled IS NULL OR ce.cancelled = 0)
	--Клиенты подключённые к оператору заданного партнера
	SELECT @clients_all = COALESCE(COUNT(DISTINCT client), 0) FROM clientoperator AS cr	INNER JOIN client AS ct	ON cr.client = ct.id WHERE pos = @pos AND ct.regdate >= @start_date	AND ct.regdate <= @end_date	AND cr.operator = @operator
	--Сумма покупок
	SELECT @purchases = COALESCE(COUNT(*), 0), @purchasesum = COALESCE(SUM(amount), 0) FROM cheque WHERE pos = @pos AND (refund IS NULL	OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date AND (cancelled IS NULL OR cancelled = 0)
	--Сумма возвратов
	SELECT @refunds = COALESCE(COUNT(*), 0), @refundsum = COALESCE(-SUM(amount), 0)	FROM cheque	WHERE pos = @pos AND refund = 1	AND proctime >= @start_date	AND proctime <= @end_date
	--Потраченная сумма
	SET @spentsum = @purchasesum - @refundsum
	--Начислено бонусов
	SELECT @charged = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id	FROM cheque	WHERE pos = @pos AND (cancelled IS NULL OR cancelled = 0)) AND bonus > 0	AND (refund IS NULL	OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date AND operator = @operator
	--Списано бонусов
	SELECT @redeemed = COALESCE(-SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id FROM cheque WHERE pos = @pos AND (cancelled IS NULL OR cancelled = 0)) AND bonus < 0 AND (refund IS NULL OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date AND operator = @operator
	--Количество возвращенных ранее начисленных бонусов (в возвратах)
	SELECT @chargerefund = COALESCE(-SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id FROM cheque WHERE pos = @pos AND (cancelled IS NULL OR cancelled = 0))	AND bonus < 0 AND refund = 1 AND proctime >= @start_date AND proctime <= @end_date AND operator = @operator
	--Количество возвращенных ранее списанных бонусов (в возвратах)
	SELECT @redeemrefund = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque IN (SELECT id FROM cheque WHERE pos = @pos AND (cancelled IS NULL OR cancelled = 0)) AND bonus > 0 AND refund = 1	AND proctime >= @start_date	AND proctime <= @end_date AND operator = @operator
	--Разница между начисленными и списанными бонусами (возвращенные ранее начисленные уменьшают сумму начисленных, возвращенные ранее списанные уменьшают сумму списанных)
	SET @balance = @charged - @redeemed - @chargerefund + @redeemrefund
	SELECT @purchasesClient = COALESCE(COUNT(*), 0), @purchasesumClient = COALESCE(SUM(amount), 0) FROM cheque AS ce INNER JOIN card AS cd ON ce.card = cd.number INNER JOIN clientoperator AS cr ON cd.client = cr.client WHERE ce.pos = @pos	AND cr.pos = @pos AND (refund IS NULL OR refund = 0) AND proctime >= @start_date AND proctime <= @end_date AND cd.operator = @operator AND (ce.cancelled IS NULL OR ce.cancelled = 0)
	SELECT @refundsClient = COALESCE(COUNT(*), 0), @refundsumClient = COALESCE(-SUM(amount), 0) FROM cheque AS ce INNER JOIN card AS cd	ON ce.card = cd.number INNER JOIN clientoperator AS cr ON cd.client = cr.client	WHERE ce.pos = @pos	AND cr.pos = @pos AND refund = 1 AND proctime >= @start_date AND proctime <= @end_date AND cd.operator = @operator AND (ce.cancelled IS NULL OR ce.cancelled = 0)
	RETURN (0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('CardLevelRecount') IS NOT NULL DROP PROCEDURE CardLevelRecount
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardLevelRecount
	@card BIGINT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @operator SMALLINT = NULL, @client INT = NULL, @leveldate DATE = NULL, @min DATETIME = NULL, @max DATETIME = NULL, @true BIT = 1, @sum NUMERIC(18,2) = 0, @level SMALLINT = NULL, @level1 SMALLINT = NULL, @level2 SMALLINT = NULL, @level3 SMALLINT = NULL, @level4 SMALLINT = NULL, @level5 SMALLINT = NULL, @threshold1 NUMERIC(9,2) = NULL, @threshold2 NUMERIC(9,2) = NULL, @threshold3 NUMERIC(9,2) = NULL, @threshold4 NUMERIC(9,2) = NULL, @threshold5 NUMERIC(9,2) = NULL, @leveltimeout TINYINT = NULL
	IF @card IS NULL BEGIN SET @errormessage = ''Номер карты должен быть заполнен'' RETURN(1) END
	SELECT @operator = operator, @leveldate = leveldate, @client = client FROM card WHERE number = @card
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Номер карты не найден'' RETURN(2) END
	SELECT @leveltimeout = leveltimeout FROM operator WHERE id = @operator
	IF NOT EXISTS (SELECT id FROM level WHERE operator = @operator) RETURN(0)
	IF @leveltimeout = 0 SET @leveltimeout = NULL
	SET @level1 = NULL SET @level2 = NULL SET @level3 = NULL SET @level4 = NULL SET @level5 = NULL SET @threshold1 = NULL SET @threshold2 = NULL SET @threshold3 = NULL SET @threshold4 = NULL SET @threshold5 = NULL 
	SELECT @level1 = id, @threshold1 = threshold FROM level WHERE operator = @operator AND level = 1
	SELECT @level2 = id, @threshold2 = threshold FROM level WHERE operator = @operator AND level = 2
	SELECT @level3 = id, @threshold3 = threshold FROM level WHERE operator = @operator AND level = 3
	SELECT @level4 = id, @threshold4 = threshold FROM level WHERE operator = @operator AND level = 4
	SELECT @level5 = id, @threshold5 = threshold FROM level WHERE operator = @operator AND level = 5
	IF @leveldate IS NULL BEGIN
		SELECT @leveldate = MIN(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND (cancelled IS NULL OR cancelled = 0)
		IF @leveldate IS NULL SET @leveldate = GETDATE()
	END
	IF @leveltimeout IS NOT NULL BEGIN
		SET @min = @leveldate
		WHILE @true = 1 BEGIN
			SET @max = @min + @leveltimeout
			IF @max > GETDATE() BREAK
			SELECT @min = MAX(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @min AND chequetime < @max AND (cancelled IS NULL OR cancelled = 0)
			IF @min IS NULL BEGIN
				SELECT @leveldate = MIN(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @max AND (cancelled IS NULL OR cancelled = 0)
				SET @min = @leveldate
				IF @leveldate IS NULL BEGIN
					SET @leveldate = GETDATE()
					SET @min = @leveldate
					BREAK
				END
			END
		END
	END
	SELECT @sum = ISNULL(SUM(amount - ISNULL(paidbybonus, 0)), 0) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @leveldate AND (cancelled IS NULL OR cancelled = 0)
	IF @threshold1 IS NOT NULL SET @level = @level1
	IF @threshold2 IS NOT NULL IF @sum >= @threshold2 SET @level = @level2
	IF @threshold3 IS NOT NULL IF @sum >= @threshold3 SET @level = @level3
	IF @threshold4 IS NOT NULL IF @sum >= @threshold4 SET @level = @level4
	IF @threshold5 IS NOT NULL IF @sum >= @threshold5 SET @level = @level5
	IF @level IS NOT NULL UPDATE card SET leveldate = @leveldate, level = @level WHERE number = @card
	RETURN(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('Reports.PartnerBookkeeping') IS NOT NULL DROP PROCEDURE Reports.PartnerBookkeeping
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerBookkeeping
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Не найден партнёр''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND (refund = 0 OR refund IS NULL) AND proctime >= @from AND proctime < @to AND (cancelled IS NULL OR cancelled = 0)) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND refund = 1 AND proctime >= @from AND proctime < @to) AS RefundSum,
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,			
			(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND regdate >= @from AND regdate <= @to AND operator = op.id) AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
			AND pr.id = @partner
		RETURN(0)
	END'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('Reports.OperatorBookkeeping') IS NOT NULL DROP PROCEDURE Reports.OperatorBookkeeping
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorBookkeeping
	@operator SMALLINT = NULL,
	@from DATE = NULL,
	@to DATE = NULL,
	@operatorName NVARCHAR(20) OUTPUT,
	@welcomebonus NUMERIC(9,2) OUTPUT,
	@birthdaybonus NUMERIC(9,2) OUTPUT,
	@qtyclient INT OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SET @to = DATEADD(DAY, 1, @to)
		SET @operatorName = (SELECT name FROM operator WHERE id = @operator)
		SET @welcomebonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND proctime >= @from AND proctime < @to AND source = 4)
		SET @birthdaybonus = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND proctime >= @from AND proctime < @to AND source = 6)
		SET @qtyclient = (SELECT COUNT(distinct client) FROM clientoperator WHERE operator = @operator AND password IS NOT NULL AND pos IS NULL AND regdate >= @from AND regdate <= @to)
		SELECT
			pr.name,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND (refund = 0 OR refund IS NULL) AND proctime >= @from AND proctime < @to AND (cancelled IS NULL OR cancelled = 0)) AS BuySum,
			(SELECT SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus > 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS AddedBonus,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE partner = pr.id AND bonus < 0 AND proctime >= @from AND proctime < @to AND (refund IS NULL OR refund = 0) AND source = 1) AS SubstractBonus,
			(SELECT SUM(amount) FROM cheque WHERE partner = pr.id AND refund = 1 AND proctime >= @from AND proctime < @to) AS RefundSum,			
			(SELECT SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus <= 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS SubstractBonusRefund,	
			(SELECT (-1)*SUM(bonus) FROM bonus AS bs INNER JOIN cheque AS ce ON bs.cheque = ce.id WHERE ce.partner = pr.id AND bonus > 0 AND bs.proctime >= @from AND bs.proctime < @to AND bs.refund = 1) AS AddedBonusRefund,
			CASE
				WHEN pr.name = N''m5reception'' THEN (SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND regdate >= @from AND regdate <= @to AND operator = op.id) + 
													(SELECT COUNT(distinct client) FROM clientoperator WHERE pos IS NULL AND password IS NULL AND regdate >= @from AND regdate <= @to AND operator = op.id)
				ELSE (SELECT COUNT(distinct client) FROM clientoperator WHERE pos IN (SELECT id FROM pos WHERE partner = pr.id) AND operator = op.id AND regdate >= @from AND regdate <= @to) 
				END
				AS QtyClient
		FROM
			operator AS op
			INNER JOIN partner AS pr ON op.id = pr.operator
			LEFT JOIN company AS cy ON cy.id = pr.company
		WHERE
			op.id = @operator
		RETURN(0)
	END'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('Cheques') IS NOT NULL DROP PROCEDURE Cheques
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Cheques
	@client INT = NULL,
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL,
	@cheque INT = NULL,
	@page SMALLINT = NULL,
	@pagesize SMALLINT = NULL,
	@pagecount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	BEGIN
		IF @client = 0 SET @client = NULL 
		IF @card = 0 SET @card = NULL 
		IF @partner = 0 SET @partner = NULL 
		IF @operator = 0 SET @operator = NULL 
		IF @cheque = 0 SET @cheque = NULL
		IF @page = 0 
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pagesize = 0
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pos = 0 SET @pos = NULL
		declare @cheques as table
		(
			cheque INT,
			rownum INT,
			unique clustered (cheque, rownum)
		)
		set @pagecount = 1
		IF @client IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.id
		end
		ELSE IF @card IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card = @card AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.id
		end
		ELSE IF @partner IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner = @partner AND (cancelled IS NULL OR cancelled = 0)
				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE IF @operator IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner IN (SELECT id FROM partner WHERE operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0) 
				ORDER BY 
					c.chequetime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner IN (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0)

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner IN (SELECT id FROM partner WHERE operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE IF @cheque IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.id = @cheque AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.id
		end
		ELSE IF @pos IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0) 
				ORDER BY 
					c.id
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					pos = @pos AND (cancelled IS NULL OR cancelled = 0)

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) 
				AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id
			WHERE (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.id
		end
		RETURN (0)
	END'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('ChequeCancelLast') IS NOT NULL DROP PROCEDURE ChequeCancelLast
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeCancelLast
	@partner smallint,
	@errormessage nvarchar(100) output
	as
	set nocount on
	begin
		if(not exists(select id from partner where id = @partner))
		begin
			set @errormessage = N''Не найден партнёр''
			return(1)
		end
		declare @maxChequeTime datetime, @maxchequeid int
		set @maxChequeTime = (select max(chequetime) from cheque where partner = @partner AND (cancelled IS NULL OR cancelled = 0))
		set @maxchequeid = (select id from cheque where partner = @partner and chequetime = @maxChequeTime AND (cancelled IS NULL OR cancelled = 0))
		update cheque set amount = 0, paidbybonus = 0 where chequetime = @maxChequeTime and id = @maxchequeid
		return(0)
	end'
	
END ELSE IF @version = 333 BEGIN
	SELECT '3.34 20171114 Смирнов'

	--Добавлено. Сегментация клиентов оператора по возрасту.
	IF OBJECT_ID(N'SegmentationAge', 'P') IS NOT NULL DROP PROCEDURE SegmentationAge
	EXEC sp_executesql @statement = N'CREATE PROCEDURE SegmentationAge @operator SMALLINT,
			@less25 INT = NULL OUTPUT,
			@more25less35 INT = NULL OUTPUT,
			@more35less45 INT = NULL OUTPUT,
			@more45 INT = NULL OUTPUT,
			@unknown INT = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		SELECT
			@less25 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),
			@more25less35 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),
			@more35less45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),
			@more45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate THEN 1 ELSE 0 END),
			@unknown = SUM(CASE WHEN birthdate IS NULL THEN 1 ELSE 0 END)
		FROM
			clientoperator
		WHERE
			operator = @operator
		RETURN(0)
	END'

	--Добавлено. Структура клиентской базы
	IF OBJECT_ID(N'ClientBaseStructure', 'P') IS NOT NULL DROP PROCEDURE ClientBaseStructure
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseStructure
			@operator SMALLINT = NULL,
			@menQty INT = NULL OUTPUT,
			@womenQty INT = NULL OUTPUT,
			@unknownGender INT = NULL OUTPUT,
			@clientsWithBuys INT = NULL OUTPUT,
			@clientsWithoutBuys INT = NULL OUTPUT,
			@clientsWithTenBuys INT = NULL OUTPUT,
			@clientsWithOneBuys INT = NULL OUTPUT,
			@clientsWithPhone INT = NULL OUTPUT,
			@clientsWithEmail INT = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		SELECT
			@menQty = SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END),
			@womenQty = SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END),
			@unknownGender = SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END)
		FROM
			clientoperator
		WHERE
			operator = @operator;

		SELECT
			@clientsWithBuys = COUNT(DISTINCT cd.number)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator;

		SELECT
			@clientsWithoutBuys = COUNT(DISTINCT cd.number)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			LEFT JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			ce.id IS NULL
			AND cr.operator = @operator
			AND (ce.cancelled IS NULL OR ce.cancelled = 0);

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) >= 10
		)
		SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) = 1
		)
		SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;

		SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL;

		SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL;

		RETURN(0)
	END'

	--Изменено. Брэнд - наименование отправителя. Если не заполнена ТТ, то возвращается Lcpos. Добавлена выборка по активным чекам.
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			AND (cancelled IS NULL OR cancelled = 0)
			
		SELECT
			(SELECT smssender FROM operator WHERE id = @operator) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''M5TT21'' AND pr.operator = @operator), N''Lcpos'')
				WHEN cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
				ELSE N''Нет''
			END AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

	--Изменено. Брэнд - наименование отправителя для монооператорской, для коалиции наименование оператора. Если не заполнена ТТ, то возвращается Lcpos. Добавлена выборка по активным чекам.
	IF OBJECT_ID('Reports.PartnerClient') IS NOT NULL DROP PROCEDURE Reports.PartnerClient
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.PartnerClient @from date = NULL,
			@to date = NULL, 
			@operator smallint = NULL,
			@partner SMALLINT = NULL,
			@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		IF (NOT EXISTS(SELECT id FROM partner WHERE id = @partner))
		BEGIN
			SET @errormessage = N''Партнёр не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE, @brand NVARCHAR(30)
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		IF((SELECT COUNT(id) FROM partner WHERE operator = @operator) = 1)
		BEGIN
			SET @brand = (SELECT smssender FROM operator WHERE id = @operator)
		END
		ELSE
		BEGIN
			SET @brand = (SELECT name FROM partner WHERE id = @partner AND operator = @operator)
		END

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			chequetime DATETIME,
			pos SMALLINT
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card, chequetime, pos)
		SELECT
			id,
			amount,
			refund,
			card,
			chequetime,
			pos
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner = @partner)
			AND (cancelled IS NULL OR cancelled = 0)
			
		SELECT
			@brand AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''M5TT21'' AND pr.operator = @operator), N''Lcpos'')
				WHEN cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
				ELSE N''Нет''
			END AS address,
			COALESCE(cr.name, '''') + '' '' + COALESCE(cr.surname, '''') + '' '' + COALESCE(cr.patronymic, '''') AS fullName,
			CASE cr.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END AS gender,
			COALESCE(cr.phone, ct.phone, 0) AS phone,
			COALESCE(cr.email, ct.email, '''') AS email,
			cd.number,
			COALESCE(ce.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			(SELECT condition FROM level WHERE id = cd.level) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			@cheques AS cs
			INNER JOIN card AS cd ON cs.card = cd.number
			INNER JOIN client AS ct ON cd.client = ct.id
			INNER JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS ce ON cd.type = ce.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		ORDER BY
			chequetime DESC
		RETURN(0)
	END'
	
	
END ELSE IF @version = 334 BEGIN
	SELECT '3.35 20171114 Медянин'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('Reverse') IS NOT NULL DROP PROCEDURE Reverse
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Reverse
	@card BIGINT = NULL OUTPUT,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@pos NVARCHAR(10) = NULL,
	@number NVARCHAR(10) = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@terminal NVARCHAR(10) = NULL,
	@balance numeric(9,2) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT = NULL, @cheque INT = NULL, @id INT = NULL, @posid INT = NULL, @operator SMALLINT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @purchaseid INT = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не задан'' RETURN(8) END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (9) END
	SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(11) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для термиала должна быть задана торговая точка'' RETURN(12) END		
	if(@chequetime is null)	begin
		IF @terminal IS NOT NULL
			set @chequetime = (SELECT max(chequetime) FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND (cancelled IS NULL OR cancelled = 0))
		ELSE IF @pos IS NOT NULL
			set @chequetime = (SELECT max(chequetime) FROM cheque WHERE partner = @partner AND pos = @posid AND (cancelled IS NULL OR cancelled = 0))
		ELSE
			set @chequetime = (SELECT max(chequetime) FROM cheque WHERE partner = @partner AND (cancelled IS NULL OR cancelled = 0))
	end
	IF @terminal IS NOT NULL
		SELECT @purchaseid = id, @card = card FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND (cancelled IS NULL OR cancelled = 0)
	ELSE IF @pos IS NOT NULL
		SELECT @purchaseid = id, @card = card FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND (cancelled IS NULL OR cancelled = 0)
	ELSE
		SELECT @purchaseid = id, @card = card FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND (cancelled IS NULL OR cancelled = 0)
	if (@purchaseid is null) begin set @errormessage = N''Не найден последний чек у заданного партнёра'' return(7) end
	delete from bonus where cheque = @purchaseid
	update cheque set norules = 1 where id = @purchaseid
	if (exists(select id from item where cheque = @purchaseid))	begin
		update item set norules = 1 where cheque = @purchaseid
		DELETE FROM item WHERE cheque = @purchaseid
	end
	delete from cheque where id = @purchaseid
	set @balance = (select fullbalance from card where number = @card)
	return(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('WebComm.OperatorExtract') IS NOT NULL DROP PROCEDURE WebComm.OperatorExtract
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE WebComm.OperatorExtract
	@operator SMALLINT = NULL,
	@name NVARCHAR(20) = NULL OUTPUT,
	@newclient INT = NULL OUTPUT,
	@firstbuy INT = NULL OUTPUT,
	@qtyclientbuys INT = NULL OUTPUT,
	@qtyclientsrefunds INT = NULL OUTPUT,
	@qtybuys INT = NULL OUTPUT,
	@sumbuys NUMERIC(9,2) = NULL OUTPUT,
	@averagecheque NUMERIC(9,2) = NULL OUTPUT,
	@cashamount NUMERIC(9,2) = NULL OUTPUT,
	@qtyrefunds INT = NULL OUTPUT,
	@sumrefund NUMERIC(9,2) = NULL OUTPUT,
	@bonusesadd NUMERIC(9,2) = NULL OUTPUT,
	@bonusesredeemed NUMERIC(9,2) = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	IF(NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
	BEGIN
		SET @errormessage = N''Не найден идентификатор оператора''
		RETURN(1)
	END
	DECLARE @qtydays INT = -1
	DECLARE @begdate DATE = CAST(DATEADD(DAY, @qtydays, GETDATE()) AS DATE)
	DECLARE @enddate DATE = CAST(GETDATE() AS DATE)
	SELECT @name = name FROM operator WHERE id = @operator
	SET @newclient = (SELECT COUNT(*) FROM clientoperator WHERE operator = @operator AND regdate >= @begdate AND regdate < @enddate)
	SET @firstbuy = (SELECT 
			COUNT(DISTINCT ce.card) 
		FROM 
			cheque AS ce
		WHERE 
			ce.card NOT IN (SELECT card FROM cheque WHERE proctime < @begdate AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
			AND ce.partner in (SELECT id FROM partner WHERE operator = @operator)
			AND (ce.refund = 0 OR ce.refund IS NULL)
			AND ce.proctime < @enddate)
	SET @qtyclientbuys = (SELECT COUNT(DISTINCT card) FROM cheque WHERE proctime >= @begdate AND proctime < @enddate AND (refund is null OR refund = 0) AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
	SET @qtyclientsrefunds = (SELECT COUNT(DISTINCT card) FROM cheque WHERE proctime >= @begdate AND proctime < @enddate AND refund = 1 AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
	SET @qtybuys = (SELECT COUNT(id) FROM cheque WHERE proctime >= @begdate AND proctime < @enddate AND (refund = 0 OR refund IS NULL) AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
	SET @sumbuys = (SELECT COALESCE(SUM(amount), 0) FROM cheque WHERE proctime >= @begdate AND proctime < @enddate AND (refund = 0 OR refund IS NULL) AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
	IF(@qtybuys > 0)
		SET @averagecheque = @sumbuys/@qtybuys
	ELSE
		SET @averagecheque = 0
	SET @cashamount = (SELECT COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0) FROM cheque WHERE proctime >= @begdate AND proctime < @enddate AND (refund = 0 OR refund IS NULL) AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
	SET @qtyrefunds = (SELECT COUNT(id) FROM cheque WHERE proctime >= @begdate AND proctime < @enddate AND refund = 1 AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
	SET @sumrefund = (SELECT COALESCE(SUM(amount), 0) FROM cheque WHERE proctime >= @begdate AND proctime < @enddate AND refund = 1 AND partner in (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0))
	SET @bonusesadd = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND proctime >= @begdate AND proctime < @enddate AND bonus > 0 AND source = 1)
	SET @bonusesredeemed = (SELECT COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND proctime >= @begdate AND proctime < @enddate AND bonus < 0 AND source = 1)
	RETURN(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('Levels') IS NOT NULL DROP PROCEDURE Levels
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Levels
	@errormessage nvarchar(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @operator SMALLINT = NULL, @client INT = NULL, @card BIGINT = NULL, @leveldate DATE = NULL, @min DATETIME = NULL, @max DATETIME = NULL, @true BIT = 1, @sum NUMERIC(18,2) = 0, @level SMALLINT = NULL, @level1 SMALLINT = NULL, @level2 SMALLINT = NULL, @level3 SMALLINT = NULL, @level4 SMALLINT = NULL, @level5 SMALLINT = NULL, @threshold1 NUMERIC(9,2) = NULL, @threshold2 NUMERIC(9,2) = NULL, @threshold3 NUMERIC(9,2) = NULL, @threshold4 NUMERIC(9,2) = NULL, @threshold5 NUMERIC(9,2) = NULL, @leveltimeout TINYINT = NULL, @noburn1 BIT = NULL, @noburn2 BIT = NULL, @noburn3 BIT = NULL, @noburn4 BIT = NULL, @noburn5 BIT = NULL, @paidbybonusinlevels BIT = NULL
	DECLARE tLevelOperators CURSOR LOCAL FAST_FORWARD FOR SELECT id, leveltimeout, paidbybonusinlevels FROM operator
	OPEN tLevelOperators
	FETCH NEXT FROM tLevelOperators INTO @operator, @leveltimeout, @paidbybonusinlevels
	WHILE @@FETCH_STATUS = 0 BEGIN
		IF NOT EXISTS (SELECT id FROM level WHERE operator = @operator) BEGIN
			FETCH NEXT FROM tLevelOperators INTO @operator, @leveltimeout, @paidbybonusinlevels
			CONTINUE
		END
		IF @leveltimeout = 0 SET @leveltimeout = NULL
		IF @paidbybonusinlevels = 0 SET @paidbybonusinlevels = NULL
		SET @level1 = NULL SET @level2 = NULL SET @level3 = NULL SET @level4 = NULL SET @level5 = NULL SET @threshold1 = NULL SET @threshold2 = NULL SET @threshold3 = NULL SET @threshold4 = NULL SET @threshold5 = NULL SET @noburn1 = NULL SET @noburn2 = NULL SET @noburn3 = NULL SET @noburn4 = NULL SET @noburn5 = NULL
		SELECT @level1 = id, @threshold1 = threshold, @noburn1 = noburn FROM level WHERE operator = @operator AND level = 1
		SELECT @level2 = id, @threshold2 = threshold, @noburn2 = noburn FROM level WHERE operator = @operator AND level = 2
		SELECT @level3 = id, @threshold3 = threshold, @noburn3 = noburn FROM level WHERE operator = @operator AND level = 3
		SELECT @level4 = id, @threshold4 = threshold, @noburn4 = noburn FROM level WHERE operator = @operator AND level = 4
		SELECT @level5 = id, @threshold5 = threshold, @noburn5 = noburn FROM level WHERE operator = @operator AND level = 5
		DECLARE tLevels CURSOR LOCAL FAST_FORWARD FOR SELECT number, leveldate, client FROM card WHERE operator = @operator
		OPEN tLevels
		FETCH NEXT FROM tLevels INTO @card, @leveldate, @client
		WHILE @@FETCH_STATUS = 0 BEGIN
			IF @leveldate IS NULL BEGIN
				SELECT @leveldate = MIN(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND (cancelled IS NULL OR cancelled = 0)
				IF @leveldate IS NULL SET @leveldate = GETDATE()
			END
			IF @leveltimeout IS NOT NULL BEGIN
				SET @min = @leveldate
				WHILE @true = 1 BEGIN
					SET @max = @min + @leveltimeout
					IF @max > GETDATE() BREAK
					SELECT @min = MAX(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @min AND chequetime < @max AND (cancelled IS NULL OR cancelled = 0)
					IF @min IS NULL BEGIN
						SELECT @leveldate = MIN(chequetime) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @max AND (cancelled IS NULL OR cancelled = 0)
						SET @min = @leveldate
						IF @leveldate IS NULL BEGIN
							SET @leveldate = GETDATE()
							SET @min = @leveldate
							BREAK
						END
					END
				END
			END
			IF @paidbybonusinlevels IS NULL
				SELECT @sum = ISNULL(SUM(amount), 0) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @leveldate AND (cancelled IS NULL OR cancelled = 0)
			ELSE
				SELECT @sum = ISNULL(SUM(amount - ISNULL(paidbybonus, 0)), 0) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND chequetime > @leveldate AND (cancelled IS NULL OR cancelled = 0)
			IF @threshold1 IS NOT NULL IF @sum >= @threshold1 AND (@noburn1 IS NULL OR @noburn1 = 0) SET @level = @level1
			IF @threshold2 IS NOT NULL IF @sum >= @threshold2 AND (@noburn2 IS NULL OR @noburn2 = 0) SET @level = @level2
			IF @threshold3 IS NOT NULL IF @sum >= @threshold3 AND (@noburn3 IS NULL OR @noburn3 = 0) SET @level = @level3
			IF @threshold4 IS NOT NULL IF @sum >= @threshold4 AND (@noburn4 IS NULL OR @noburn4 = 0) SET @level = @level4
			IF @threshold5 IS NOT NULL IF @sum >= @threshold5 AND (@noburn5 IS NULL OR @noburn5 = 0) SET @level = @level5
			IF @paidbybonusinlevels IS NULL
				SELECT @sum = ISNULL(SUM(amount), 0) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND (cancelled IS NULL OR cancelled = 0)
			ELSE
				SELECT @sum = ISNULL(SUM(amount - ISNULL(paidbybonus, 0)), 0) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND (cancelled IS NULL OR cancelled = 0)
			IF @threshold1 IS NOT NULL IF @sum >= @threshold1 AND @noburn1 = 1 SET @level = @level1
			IF @threshold2 IS NOT NULL IF @sum >= @threshold2 AND @noburn2 = 1 SET @level = @level2
			IF @threshold3 IS NOT NULL IF @sum >= @threshold3 AND @noburn3 = 1 SET @level = @level3
			IF @threshold4 IS NOT NULL IF @sum >= @threshold4 AND @noburn4 = 1 SET @level = @level4
			IF @threshold5 IS NOT NULL IF @sum >= @threshold5 AND @noburn5 = 1 SET @level = @level5
			UPDATE card SET leveldate = @leveldate, level = @level WHERE number = @card
			FETCH NEXT FROM tLevels INTO @card, @leveldate, @client
		END
		CLOSE tLevels
		DEALLOCATE tLevels
		FETCH NEXT FROM tLevelOperators INTO @operator, @leveltimeout, @paidbybonusinlevels
	END
	CLOSE tLevelOperators
	DEALLOCATE tLevelOperators
	RETURN(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('ClientStatistics') IS NOT NULL DROP PROCEDURE ClientStatistics
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientStatistics
	@client INT = NULL,
	@level NVARCHAR(20) = NULL OUTPUT,
	@condition NVARCHAR(100) = NULL OUTPUT,
	@balance DECIMAL(9,2) OUTPUT,
	@fullbalance DECIMAL(9,2) OUTPUT,
	@purchases INT = 0 OUTPUT,
	@purchasesum DECIMAL(18,2) = 0 OUTPUT,
	@refunds INT = 0 OUTPUT,
	@refundsum DECIMAL(9,2) = 0 OUTPUT,
	@spentsum DECIMAL(9,2) = 0 OUTPUT,
	@charged DECIMAL(9,2) = 0 OUTPUT,
	@redeemed DECIMAL(9,2) = 0 OUTPUT,
	@chargerefund DECIMAL(9,2) = 0 OUTPUT,
	@redeemrefund DECIMAL(9,2) = 0 OUTPUT,
	@fulldiscount DECIMAL(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	IF @client = 0 SET @client = NULL
	IF @client IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Клиента'' RETURN(1) END
	SELECT @client = id, @balance = balance, @fullbalance = fullbalance FROM client WHERE id = @client
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Идентификатор Клиента не найден'' RETURN(2) END
	SELECT @level = l.name, @condition = l.condition FROM level l, client c WHERE l.id = c.level AND l.operator IS NULL
	DECLARE @discount DECIMAL(9,2) = NULL
	SELECT @purchases = COUNT(*), @purchasesum = SUM(amount), @discount = SUM(discount) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client) AND (refund IS NULL OR refund = 0) AND (cancelled IS NULL OR cancelled = 0)
	SELECT @refunds = COUNT(*), @refundsum = - SUM(amount) FROM cheque WHERE card IN (SELECT number FROM card WHERE client = @client) AND refund = 1
	SET @spentsum = @purchasesum - @refundsum
	SELECT @charged = SUM(bonus) FROM bonus WHERE card IN (SELECT number FROM card WHERE client = @client) AND bonus > 0 AND (refund IS NULL OR refund = 0)
	SELECT @redeemed = - SUM(bonus) FROM bonus WHERE card IN (SELECT number FROM card WHERE client = @client) AND (refund IS NULL OR refund = 0)
	SELECT @chargerefund = - SUM(bonus) FROM bonus WHERE card IN (SELECT number FROM card WHERE client = @client) AND bonus < 0 AND refund = 1
	IF @discount IS NULL SET @discount = 0 SELECT @redeemrefund = SUM(bonus) FROM bonus WHERE card IN (SELECT number FROM card WHERE client = @client) AND bonus > 0 AND refund = 1
	SET @balance = @charged - @redeemed - @chargerefund + @redeemrefund
	SET @fulldiscount = @redeemed + @discount
	RETURN(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('ClientInfoArray') IS NOT NULL DROP PROCEDURE ClientInfoArray
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientInfoArray
	@operator SMALLINT = NULL, 
	@card BIGINT = NULL, 
	@phone BIGINT = NULL, 
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, 
			@cardoperator SMALLINT = NULL, 
			@partneroperator SMALLINT = NULL, 
			@client INT, 
			@cheque INT, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@partnername NVARCHAR(20) = NULL, 
			@phoneend INT = NULL, 
			@last4 SMALLINT = NULL, 
			@middle2 TINYINT = NULL, 
			@cardend INT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@bonusid INT = NULL, 
			@bonustime DATETIME = NULL, 
			@bonuscheque INT = NULL, 
			@bonusbonus NUMERIC(9,2) = NULL, 
			@bonusrefund BIT = NULL, 
			@checkredeem BIT = NULL, 
			@freecard BIT = NULL, 
			@balance NUMERIC(9,2)
	declare @cards as table	(card bigint)
	SELECT @prefix = prefix, @numlen = numlen, @freecard = freecard FROM operator WHERE id = @operator
	IF @phone IS NOT NULL begin
		IF @phone < 1000000 
			SET @phoneend = @phone%1000000
	end
	IF @card IS NOT NULL 
		IF @card < 100000 
			SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL BEGIN
		EXECUTE @result = _ClientGet @card OUTPUT, @phone, @client OUTPUT, @balance OUTPUT, @errormessage OUTPUT
		IF NOT @result = 0 RETURN (@result)
		IF @client IS NULL BEGIN SET @errormessage = ''Клиент не найден'' RETURN(6) END
	END ELSE BEGIN
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не задан'' RETURN(7) END
		SELECT @operator = id FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора'' RETURN (8) END
		IF @operator IS NULL BEGIN SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' RETURN(15) END
		IF @phoneend IS NOT NULL BEGIN
			SET @last4 = @phoneend%10000 
			SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 begin
				insert into @cards(card)
				select card from phoneend WHERE operator = @operator AND last4 = @last4
			end	ELSE begin 
				insert into @cards(card)
				select card from phoneend WHERE operator = @operator AND last4 = @last4 and middle2 = @middle2
			end
			IF ((select count(*) from @cards) = 0) BEGIN SET @errormessage = ''Номера телефонов с данным окончанием по оператору партнера не найдены'' RETURN(10) END			
		END ELSE BEGIN
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend		
			IF(NOT EXISTS(SELECT number FROM card WHERE number = @card AND operator = @operator))
			BEGIN SET @errormessage = N''У партнёра отсутствует карта с данным номером'' RETURN(13) END
			SELECT @cardoperator = operator FROM card WHERE number = @card
			IF NOT @cardoperator = @operator BEGIN SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' RETURN(11) END
			IF not exists(select number from card where number = @card and client is not null) BEGIN SET @errormessage = ''Карта еще не привязана к клиенту'' RETURN (12) 
			END
		END
	END
	if((select count(*) from @cards) = 0) begin
		SELECT cd.number, ct.phone, ct.surname, ct.name, ct.patronymic,	COALESCE(ct.email, cr.email), ct.birthdate,
		 (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseDate,
		 (SELECT SUM(amount) FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL)) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseAmount,
		 ct.allowsms, ct.allowemail, cd.fullbalance, l.condition, ct.id, ct.gender
		FROM card cd LEFT JOIN client ct ON ct.id = cd.client LEFT JOIN clientoperator AS cr ON ct.id = cr.client AND cr.operator = @operator LEFT JOIN level l ON l.id = cd.level 
		WHERE cd.number = @card
	end	else begin
		SELECT cd.number, ct.phone, ct.surname, ct.name, ct.patronymic,	COALESCE(ct.email, cr.email), ct.birthdate,
		 (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseDate,
		 (SELECT SUM(amount) FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL)) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseAmount,
		 ct.allowsms, ct.allowemail, cd.fullbalance, l.condition, ct.id, ct.gender
		FROM card as cd inner join @cards as cards on cd.number = cards.card LEFT JOIN client as ct ON ct.id = cd.client LEFT JOIN clientoperator AS cr ON ct.id = cr.client AND cr.operator = @operator LEFT JOIN level as l ON l.id = cd.level
	end
	RETURN (0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('ClientInfo') IS NOT NULL DROP PROCEDURE ClientInfo
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientInfo
	@operator SMALLINT = NULL,
	@card BIGINT = NULL,
	@phone BIGINT = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @client INT, @id INT = NULL
	-- 1.60 20170226 Медянин. Вызов _ClientGet заменен на вызов Identify. Вся логика, которая есть в Identify, в данной процедуре удалена
	EXECUTE @result = Identify @phone = @phone, @card = @card OUTPUT, @client = @client OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
	IF NOT @result = 0 RETURN (@result)
	-- 1.60 20170226 Медянин. Чтение данных клиента для оператора, если они есть. Если нет - ПОКА из данных клиента для всех операторов.
	SELECT @id = client FROM clientoperator WHERE client = @client AND operator = @operator
	IF @id IS NOT NULL -- берем информацию из данных клиента для определенног оператора
		SELECT cd.number, coalesce(co.phone, ct.phone) as phone, co.surname, co.name, co.patronymic, coalesce(co.email, ct.email) as email, co.birthdate,
		 (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseDate,
		 (SELECT SUM(amount) FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL)) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseAmount,
		 co.allowsms, co.allowemail, cd.fullbalance, l.condition, ct.id, ct.gender, pe.validated AS phoneValidated, el.validated AS emailValidated, ct.regdate
		FROM card cd LEFT JOIN client ct ON ct.id = cd.client LEFT JOIN clientoperator co ON co.client = ct.id LEFT JOIN level l ON l.id = cd.level LEFT JOIN phone AS pe ON pe.client = ct.id AND pe.number = coalesce(co.phone, ct.phone) LEFT JOIN email AS el ON el.client = ct.id AND el.email = coalesce(co.email, ct.email) WHERE cd.number = @card AND co.operator = @operator
	ELSE -- из данных клиента для всех операторов
		SELECT cd.number, ct.phone, ct.surname, ct.name, ct.patronymic,	ct.email, ct.birthdate,
		 (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseDate,
		 (SELECT SUM(amount) FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL)) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseAmount,
		 ct.allowsms, ct.allowemail, cd.fullbalance, l.condition, ct.id, ct.gender, pe.validated AS phoneValidated, el.validated AS emailValidated, ct.regdate
		FROM card cd LEFT JOIN client ct ON ct.id = cd.client LEFT JOIN level l ON l.id = cd.level LEFT JOIN phone AS pe ON pe.client = ct.id AND pe.number = ct.phone LEFT JOIN email AS el ON el.client = ct.id AND el.email = ct.email WHERE cd.number = @card AND cd.operator = @operator
	RETURN (0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('ClientBuy') IS NOT NULL DROP PROCEDURE ClientBuy
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientBuy
	@from date = null,
	@to date = null, 
	@operator smallint,
	@errormessage nvarchar(100) output
	AS SET NOCOUNT ON
	if (not exists(select id from operator where id = @operator)) begin set @errormessage = ''Оператор не найден'' return(1) end
	declare @beginDate date, @endDate date
	set @to = dateadd(day, 1, (@to))
	set @beginDate = @from
	set @endDate = @to
	select
		coalesce(ct.name, ''Отсутствует имя клиента'') as name, 
		coalesce(ct.phone, 0) as phone,
		coalesce(ct.email, '''') as email,
		coalesce((select condition from level where id = cd.level), '''') as level,
		cd.number,
		cd.fullbalance,
		coalesce((select sum(amount) from cheque where card = cd.number and (refund is null or refund = 0) AND (cancelled IS NULL OR cancelled = 0)), 0) as [Сумма покупок],
		coalesce((select (-1)*sum(amount) from cheque where card = cd.number and refund = 1), 0) as [Сумма возвратов],
		(select count(*) from cheque where card = cd.number and (refund is null or refund = 0) AND (cancelled IS NULL OR cancelled = 0)) as [Количество покупок],
		(select count(*) from cheque where card = cd.number and refund = 1) as [Количество возвратов],
		coalesce((select sum(amount) from cheque where card = cd.number and (refund is null or refund = 0) and chequetime >= @beginDate and chequetime < @endDate AND (cancelled IS NULL OR cancelled = 0)), 0) as [Сумма покупок за выбранный год],
		coalesce((select sum(amount) from cheque where card = cd.number and refund = 1 and chequetime >= @beginDate and chequetime < @endDate), 0) as [Сумма возвратов за выбранный год],
		(select count(*) from cheque where card = cd.number and (refund is null or refund = 0) and chequetime >= @beginDate and chequetime < @endDate AND (cancelled IS NULL OR cancelled = 0)) as [Количество покупок за выбранный год],
		(select count(*) from cheque where card = cd.number and refund = 1 and chequetime >= @beginDate and chequetime < @endDate) as [Количество возвратов за выбранный год],
		coalesce((select amount from cheque where card = cd.number and (refund = 0 or refund is null) and proctime = (select min(proctime) from cheque where card = cd.number) and (refund = 0 or refund is null) AND (cancelled IS NULL OR cancelled = 0)), 0) as [Первая покупка],
		coalesce((select amount from cheque where card = cd.number and (refund = 0 or refund is null) and proctime = (select max(proctime) from cheque where card = cd.number) and (refund = 0 or refund is null) AND (cancelled IS NULL OR cancelled = 0)), 0) as [Последняя покупка],
		coalesce((select min(proctime) from cheque where card = cd.number and (refund = 0 or refund is null) AND (cancelled IS NULL OR cancelled = 0)), 0) as [Дата первой покупки],
		coalesce((select max(proctime) from cheque where card = cd.number and (refund = 0 or refund is null) AND (cancelled IS NULL OR cancelled = 0)), 0) as [Дата последней покупки]
	from
		client as ct
		inner join card as cd on ct.id = cd.client
	where
		cd.operator = @operator
	return(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('CardStatistics') IS NOT NULL DROP PROCEDURE CardStatistics
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardStatistics
	@card BIGINT = NULL,
	@level NVARCHAR(20) = NULL OUTPUT,
	@condition NVARCHAR(100) = NULL OUTPUT,
	@balance DECIMAL(9,2) OUTPUT,
	@fullbalance DECIMAL(9,2) OUTPUT,
	@purchases INT = 0 OUTPUT,
	@purchasesum DECIMAL(18,2) = 0 OUTPUT,
	@refunds INT = 0 OUTPUT,
	@refundsum DECIMAL(9,2) = 0 OUTPUT,
	@spentsum DECIMAL(9,2) = 0 OUTPUT,
	@charged DECIMAL(9,2) = 0 OUTPUT,
	@redeemed DECIMAL(9,2) = 0 OUTPUT,
	@chargerefund DECIMAL(9,2) = 0 OUTPUT,
	@redeemrefund DECIMAL(9,2) = 0 OUTPUT,
	@fulldiscount DECIMAL(9,2) = 0 OUTPUT,
	@operator SMALLINT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	IF @card = 0 SET @card = NULL
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN(1) END
	DECLARE @discount DECIMAL(9,2)
	SELECT @card = number, @balance = balance, @fullbalance = fullbalance, @operator = operator FROM card WHERE number = @card
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Номер карты не найден'' RETURN(2) END
	SELECT @level = l.name, @condition = l.condition FROM card c LEFT JOIN level l ON c.level = l.id WHERE c.number = @card
	SELECT @purchases = COALESCE(COUNT(*), 0), @purchasesum = COALESCE(SUM(amount), 0), @discount = COALESCE(SUM(discount), 0) FROM cheque WHERE card = @card AND (refund IS NULL OR refund = 0) AND (cancelled IS NULL OR cancelled = 0)
	SELECT @refunds = COALESCE(COUNT(*), 0), @refundsum = COALESCE(- SUM(amount), 0) FROM cheque WHERE card = @card AND refund = 1
	SET @spentsum = @purchasesum - @refundsum
	SELECT @charged = COALESCE(SUM(bonus), 0) FROM bonus WHERE card = @card AND bonus > 0 AND (refund IS NULL OR refund = 0)
	SELECT @redeemed = COALESCE(- SUM(bonus), 0) FROM bonus WHERE card = @card AND bonus < 0 AND (refund IS NULL OR refund = 0)
	SELECT @chargerefund = COALESCE(- SUM(bonus), 0) FROM bonus WHERE card = @card AND bonus < 0 AND refund = 1
	IF @discount IS NULL SET @discount = 0 SELECT @redeemrefund = COALESCE(SUM(bonus), 0) FROM bonus WHERE card = @card AND bonus > 0 AND refund = 1
	SET @balance = @charged - @redeemed - @chargerefund + @redeemrefund
	SET @fulldiscount = @redeemed + @discount
	RETURN(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('Reports.Buys') IS NOT NULL DROP PROCEDURE Reports.Buys
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Reports.Buys
	@operator smallint = null,
	@from date = null,
	@to date = null,
	@errormessage nvarchar(100) output
	AS SET NOCOUNT ON
	if not exists(select id from operator where id = @operator) begin set @errormessage = ''Оператор не найден'' return(1) end
	if @from is null begin set @from = (select min(chequetime) from cheque WHERE (cancelled IS NULL OR cancelled = 0)) end
	if @to is null set @to = (select max(chequetime) from cheque WHERE (cancelled IS NULL OR cancelled = 0))
	set @to = dateadd(day, 1, (@to))
	declare @chequebonussum as table (
		cheque int,
		bonus numeric(9,2),
		card bigint,
		proctime datetime	
	)
	insert into @chequebonussum(cheque, bonus, card, proctime)
		select
			bs.cheque,
			sum(bs.bonus) as bonus,
			bs.card,
			dateadd(millisecond, -datepart(millisecond, bs.proctime), bs.proctime)
		from
			bonus as bs
		where
			bs.card <> 10050000
			and bs.operator = @operator
		group by
			bs.cheque,
			bs.card,
			--bs.proctime
			dateadd(millisecond, -datepart(millisecond, bs.proctime), bs.proctime)
	declare @table as table	(
		rownum int,
		cheque int,
		bonus numeric(9,2),
		card bigint,
		proctime datetime,
		unique clustered (card, rownum)
	)
	declare @changebalance as table	(
		rownum int,
		cheque int,
		bonus numeric(9,2),
		card bigint,
		proctime datetime,
		changebalance numeric(9,2),
		unique clustered (card, rownum)
	)
	insert into @table(rownum, cheque, bonus, card, proctime)
		select
			ROW_NUMBER() over(partition by bs.card order by bs.proctime),
			bs.cheque,
			bs.bonus,
			bs.card,
			bs.proctime
		from
			@chequebonussum as bs
	insert into @changebalance(rownum, cheque, bonus, card, proctime, changebalance)
		select rownum, cheque, bonus, card, proctime, (select SUM(bonus) from @table where card = t.card and rownum <= t.rownum) from @table as t order by card
	select
		coalesce(ce.number, 0) as chequenum,
		case 
			when ce.chequetime is not null then ce.chequetime
			when ce.chequetime is null then cb.proctime
		end as chequetime,
		coalesce(ce.amount, 0) as chequeamount,
		ll.condition,
		case
			when ce.id is null and cb.bonus > 0 then ''Начислено по акции''
			when ce.id is null and cb.bonus < 0 then ''Списано по акции''
			when ce.refund = 0 or ce.refund is null then ''Покупка'' 
			when ce.refund = 1 then ''Возврат''
		end as OperationType,
		case
			when ce.id is null and cb.bonus > 0 then cb.bonus
			when ce.id is not null then coalesce((select sum(bonus) from bonus where bonus > 0 and card = cd.number and cheque = ce.id), 0)
			else 0
		end as [Начислено бонусов],
		case
			when ce.id is null and cb.bonus < 0 then -cb.bonus
			when ce.id is not null then coalesce((select (-1)*sum(bonus) from bonus where bonus < 0 and card = cd.number and cheque = ce.id), 0)
			else 0
		end as [Списано бонусов],
		cb.changebalance,
		coalesce(ct.name, ''Отсутствует имя'') as name,
		cd.number,
		coalesce(ct.phone, 0) as phone,
		coalesce(ct.email, '''') as email
	from 
		client as ct
		inner join card as cd on ct.id = cd.client
		inner join @changebalance as cb on cd.number = cb.card
		inner join cheque as ce on ce.card = cd.number and cb.cheque = ce.id
		left join level as ll on cd.level = ll.id
	where
		cd.operator = @operator
		and coalesce(ce.chequetime, cb.proctime) >= @from
		and coalesce(ce.chequetime, cb.proctime) < @to
	order by
		cd.number,
		cb.rownum
	return(0)'
	
	-- Выборка из чеков только без признака cancelled
	IF OBJECT_ID('CardListCreate') IS NOT NULL DROP PROCEDURE CardListCreate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardListCreate
	@operator SMALLINT = NULL, -- маркетинговый список обязательно по определенному оператору
	@name NVARCHAR(50) = NULL, -- имя маркетингового списка, обязательное
	@create BIT = NULL, -- только при значении параметра 1 маркетинговый список будет создан, иначе только вернется количество карт, попадающих в критерии
	@level SMALLINT = NULL, -- в маркетинговый список попадают только карты уровня с этим идентификатором
	@gender BIT = NULL, -- в маркетинговый список попадают только карты клиентов с указанным полом: 0 - женщина, 1 - мужчина
	@averagebegin DATE = NULL, -- в маркетениговый список попадают только карты, по которым средний чек, начиная с этой даты, меньше или больше указанной средней суммы
	@averagesum NUMERIC(9,2) = NULL, -- указанная сравнительная сумма для выборки по среднему чеку
	@averagemore BIT = NULL, -- в маркетинговый список по среднему чеку попадают при значении 0 - меньше сравнительной суммы, 1 - больше сравнительной суммы
	@purchasesumbegin DATE = NULL, -- в маркетениговый список попадают только карты, по которым общая сумма покупок, начиная с этой даты, меньше или больше указанной средней суммы
	@purchasesumsum NUMERIC(9,2) = NULL, -- указанная сравнительная сумма для выборки по общей сумме покупок
	@purchasesummore BIT = NULL, -- в маркетинговый список по общей сумме покупок попадают при значении 0 - меньше сравнительной суммы, 1 - больше сравнительной суммы
	@cardlist FastBonusCardList READONLY, -- список карт для создания маркетингового списка
	@marketlist SMALLINT = NULL OUTPUT, -- идентификатор созданной маркетинговой акции
	@count INT = NULL OUTPUT, -- количество карт, попавших в заданные критерии
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @card BIGINT = NULL, @inlist BIT = 0, @cardlevel TINYINT = NULL, @clientgender BIT = NULL, @cardaverage NUMERIC(9,2) = NULL, @cardpurchasesum NUMERIC(9,2) = NULL
	IF @create = 0 SET @create = NULL IF @name = '''' SET @name = NULL IF @operator = 0 SET @operator = NULL IF @level = 0 SET @level = NULL
	IF @operator IS NULL BEGIN SET @errormessage = ''Идентификатор оператора ПЛ должен быть задан'' RETURN(1) END
	IF @name IS NULL BEGIN SET @errormessage = ''Имя маркетингового списка должно быть задано'' RETURN(2) END
	IF EXISTS (SELECT id FROM marketlist WHERE operator = @operator AND name = @name) BEGIN SET @errormessage = ''Маркетинговый список с заданным именем у заданного оператора уже есть'' RETURN(3) END
	IF((SELECT COUNT(phone) FROM @cardlist) > 0)
	BEGIN
		IF @create = 1 BEGIN
			INSERT INTO marketlist (operator, name) VALUES (@operator, @name)
			SET @marketlist = SCOPE_IDENTITY()
		END
		IF (@create = 1)
		BEGIN
			INSERT INTO listcard(marketlist, card)
			SELECT @marketlist, ct.card FROM @cardlist AS ct INNER JOIN card AS cd ON ct.card = cd.number AND cd.operator = @operator
		END
	END
	ELSE BEGIN
		IF @averagebegin IS NOT NULL OR @averagesum IS NOT NULL OR @averagemore IS NOT NULL
			IF @averagebegin IS NULL OR @averagesum IS NULL OR @averagemore IS NULL
				BEGIN SET @errormessage = ''Если задан один из трех параметров среднего чека, два других тоже должны быть заданы'' RETURN(4) END
		IF @averagebegin > GETDATE() BEGIN SET @errormessage = ''Дата отсчета среднего чека больше текущей'' RETURN(5) END
		IF @averagesum < 0 BEGIN SET @errormessage = ''Сравнительная сумма среднего чека меньше 0'' RETURN(6) END
		IF @purchasesumbegin IS NOT NULL OR @purchasesumsum IS NOT NULL OR @purchasesummore IS NOT NULL
			IF @purchasesumbegin IS NULL OR @purchasesumsum IS NULL OR @purchasesummore IS NULL
				BEGIN SET @errormessage = ''Если задан один из трех параметров суммы покупок, два других тоже должны быть заданы'' RETURN(7) END
		IF @purchasesumbegin > GETDATE() BEGIN SET @errormessage = ''Дата отсчета суммы покупок больше текущей'' RETURN(8) END
		IF @purchasesumsum < 0 BEGIN SET @errormessage = ''Сравнительная сумма суммы покупок меньше 0'' RETURN(9) END
		IF @create = 1 BEGIN
			INSERT INTO marketlist (operator, name) VALUES (@operator, @name)
			SET @marketlist = SCOPE_IDENTITY()
		END
		SET @count = 0
		DECLARE tCardListCreate CURSOR LOCAL FAST_FORWARD FOR SELECT number FROM card WHERE operator = @operator
		OPEN tCardListCreate
		FETCH NEXT FROM tCardListCreate INTO @card
		WHILE @@FETCH_STATUS = 0 BEGIN
			SET @inlist = 1
			SET @cardlevel = NULL SET @clientgender = NULL SET @cardaverage = NULL SET @cardpurchasesum = NULL
			SELECT @cardlevel = cd.level, @clientgender = ct.gender FROM card cd LEFT JOIN client ct ON cd.client = ct.id WHERE cd.number = @card
			IF @level IS NOT NULL
				IF @cardlevel IS NULL SET @inlist = 0
				ELSE IF NOT @cardlevel = @level SET @inlist = 0
			IF @gender IS NOT NULL
				IF @clientgender IS NULL SET @inlist = 0
				ELSE IF NOT @clientgender = @gender SET @inlist = 0
			IF @averagebegin IS NOT NULL BEGIN
				SELECT @cardaverage = AVG(amount) FROM cheque WHERE card = @card AND amount > 0 AND chequetime > @averagebegin AND (cancelled IS NULL OR cancelled = 0)
				IF @cardaverage IS NULL SET @cardaverage = 0
				IF @averagemore = 0 AND @cardaverage >= @averagesum SET @inlist = 0
				IF @averagemore = 1 AND @cardaverage < @averagesum SET @inlist = 0
			END
			IF @purchasesumbegin IS NOT NULL BEGIN
				SELECT @cardpurchasesum = SUM(amount) FROM cheque WHERE card = @card AND chequetime > @purchasesumbegin AND (cancelled IS NULL OR cancelled = 0)
				IF @cardpurchasesum IS NULL SET @cardpurchasesum = 0
				IF @purchasesummore = 0 AND @cardpurchasesum >= @purchasesumsum SET @inlist = 0
				IF @purchasesummore = 1 AND @cardpurchasesum < @purchasesumsum SET @inlist = 0
			END
			IF @inlist = 1 BEGIN
				SET @count = @count + 1
				IF @create = 1 INSERT INTO listcard (marketlist, card) VALUES (@marketlist, @card)
			END
			FETCH NEXT FROM tCardListCreate INTO @card
		END
		CLOSE tCardListCreate
	END
	RETURN (0)'
	
END ELSE IF @version = 335 BEGIN
	SELECT '3.36 20171115 Смирнов'

	--Исправлено. Неправильная выборка мужчин и женщин
	IF OBJECT_ID(N'ClientBaseStructure', 'P') IS NOT NULL DROP PROCEDURE ClientBaseStructure
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseStructure
			@operator SMALLINT = NULL,
			@menQty INT = NULL OUTPUT,
			@womenQty INT = NULL OUTPUT,
			@unknownGender INT = NULL OUTPUT,
			@clientsWithBuys INT = NULL OUTPUT,
			@clientsWithoutBuys INT = NULL OUTPUT,
			@clientsWithTenBuys INT = NULL OUTPUT,
			@clientsWithOneBuys INT = NULL OUTPUT,
			@clientsWithPhone INT = NULL OUTPUT,
			@clientsWithEmail INT = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		SELECT
			@menQty = SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END),
			@womenQty = SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END),
			@unknownGender = SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END)
		FROM
			clientoperator
		WHERE
			operator = @operator;

		SELECT
			@clientsWithBuys = COUNT(DISTINCT cd.number)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator;

		SELECT
			@clientsWithoutBuys = COUNT(DISTINCT cd.number)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			LEFT JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			ce.id IS NULL
			AND cr.operator = @operator
			AND (ce.cancelled IS NULL OR ce.cancelled = 0);

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) >= 10
		)
		SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) = 1
		)
		SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;

		SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL;

		SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL;

		RETURN(0)
	END'

	--Добавлено. Активность клиентской базы
	IF OBJECT_ID(N'ClientBaseActive', 'P') IS NOT NULL DROP PROCEDURE ClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseActive @operator SMALLINT = NULL,
		@menBuys NUMERIC(9,2) = NULL OUTPUT,
		@womenBuys NUMERIC(9,2) = NULL OUTPUT,
		@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
		@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
		@buysOnClient NUMERIC(9,2) = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден указанный оператор'';
			RETURN(1)
		END
		DECLARE @clientsQty INT;

		SELECT
			@womenBuys = SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END),
			@menBuys = SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END),
			@unknownGenderBuys = SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator
			AND (ce.refund = 0 OR ce.refund IS NULL);

		WITH cheques AS
		(
			SELECT 
				ce.id, 
				ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime DESC) AS rownum
			FROM
				cheque AS ce
				INNER JOIN card AS cd ON ce.card = cd.number
			WHERE
				cd.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
		)
		SELECT
			@repeatedBuys = SUM(ce.amount)
		FROM
			clientoperator AS cr 
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator
			AND (ce.refund IS NULL OR ce.refund = 0)
			AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)

		SELECT
			@clientsQty = COUNT(client)
		FROM
			clientoperator AS cr
		WHERE
			cr.operator = @operator

		IF (@clientsQty > 0)
		BEGIN
			SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
		END
		ELSE
		BEGIN
			SET @buysOnClient = 0
		END
		RETURN(0)
	END'

END ELSE IF @version = 336 BEGIN
	SELECT '3.37 20171116 Смирнов'

	--Изменено. Подсчёт количества клиентов при вычислении среднего чека. Считаются только те клиенты, которые совершили покупки.
	IF OBJECT_ID(N'ClientBaseActive', 'P') IS NOT NULL DROP PROCEDURE ClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseActive @operator SMALLINT = NULL,
		@menBuys NUMERIC(9,2) = NULL OUTPUT,
		@womenBuys NUMERIC(9,2) = NULL OUTPUT,
		@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
		@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
		@buysOnClient NUMERIC(9,2) = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден указанный оператор'';
			RETURN(1)
		END
		DECLARE @clientsQty INT;

		SELECT
			@womenBuys = SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END),
			@menBuys = SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END),
			@unknownGenderBuys = SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator
			AND (ce.refund = 0 OR ce.refund IS NULL);

		WITH cheques AS
		(
			SELECT 
				ce.id, 
				ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime DESC) AS rownum
			FROM
				cheque AS ce
				INNER JOIN card AS cd ON ce.card = cd.number
			WHERE
				cd.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
		)
		SELECT
			@repeatedBuys = SUM(ce.amount)
		FROM
			clientoperator AS cr 
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator
			AND (ce.refund IS NULL OR ce.refund = 0)
			AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)

		SELECT
			@clientsQty = COUNT(DISTINCT cr.client)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON cd.number = ce.card
		WHERE
			cr.operator = @operator

		IF (@clientsQty > 0)
		BEGIN
			SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
		END
		ELSE
		BEGIN
			SET @buysOnClient = 0
		END
		RETURN(0)
	END'

	--Изменено. Средний чек рассчитывается только для не null чеков
	IF OBJECT_ID(N'CardBonusesByMonth', 'P') IS NOT NULL DROP PROCEDURE CardBonusesByMonth
	EXEC sp_executesql @statement = N'CREATE PROCEDURE CardBonusesByMonth @card BIGINT = NULL,
		@from DATE = NULL,
		@to DATE = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
		BEGIN
			SET @errormessage = N''Не найден номер карты''
			RETURN(1)
		END
		declare @cheques as table
		(
			cheque INT,
			rownum INT,
			unique clustered (cheque, rownum)
		)
		DECLARE @bonuses AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		DECLARE @bonuscheques AS TABLE
		(
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			cheque INT,
			bonussource NVARCHAR(50),
			rownum INT IDENTITY,
			proctime DATETIME,
			card BIGINT,
			amount NUMERIC(9,2),
			UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
		)

		INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime)
		SELECT
			CASE 
				WHEN bs.bonus > 0 THEN bs.bonus
				WHEN bs.bonus <= 0 THEN 0
			END AS bonusAdded,
			CASE 
				WHEN bs.bonus > 0 THEN 0
				WHEN bs.bonus <= 0 THEN (-1)*bs.bonus
			END AS bonusRedeemed,
			bs.cheque,
			COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
			bs.proctime
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			card = @card 
			AND bs.proctime >= @from 
			AND bs.proctime < @to	
			
		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource)
		SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource FROM @bonuses WHERE cheque IS NOT NULL

		INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, proctime)
		SELECT 
			bs.bonusAdded,
			bs.bonusRedeemed,
			bs.cheque,
			bs.bonussource,
			bs.proctime
		FROM
			@bonuses AS bs
		where
			bs.cheque IS NULL

		UPDATE bs SET bs.proctime = ce.chequetime, bs.amount = ce.amount
		FROM
			@bonuscheques AS bs
			INNER JOIN cheque AS ce ON bs.cheque = ce.id
	
		SELECT
			SUM(COALESCE(bonusAdded, 0)) AS bonusAdded,
			SUM(COALESCE(bonusRedeemed, 0)) AS bonusRedeemed,
			AVG(amount) AS avgcheque,
			SUM(COALESCE(amount, 0)) AS chequeSum,
			DATEPART(MONTH, proctime) monthnum
		FROM 
			@bonuscheques
		GROUP BY
			DATEPART(MONTH, proctime)
		RETURN(0)
	END'

	--Добавлено. Выручка оператора за период по месяцам
	IF OBJECT_ID(N'GainOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE GainOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE GainOperatorPeriod @operator SMALLINT = NULL,
		@from DATE = NULL,
		@to DATE = NULL,
		@errormessage NVARCHAR(100) = NULL
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден номер карты''
			RETURN(1)
		END
		SELECT
			COALESCE(SUM(ce.amount - COALESCE(ce.paidbybonus, 0)), 0) AS gain,
			COALESCE(AVG(ce.amount), 0) AS avgcheque,
			DATEPART(MONTH, proctime) AS monthnum
		FROM
			cheque AS ce
		WHERE
			ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
			AND (ce.refund = 0 OR ce.refund IS NULL)
			AND ce.proctime > @from
			AND ce.proctime <= @to
		GROUP BY
			DATEPART(MONTH, ce.proctime)
		RETURN(0)
	END'

END ELSE IF @version = 337 BEGIN
	SELECT '3.38 20171117 Смирнов'
	
	--Добавлено. Данные для страницы аналитики.
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = 40,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL);
		SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL);
		SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
		SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
		SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator);
		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) >= 10
		)
		SELECT @moreTenBuys = COUNT(number) FROM CTE;

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) = 1
		)
		SELECT @withOneBuy = COUNT(number) FROM CTE;

		SELECT 
			@gain = COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0),
			@avgCheque = AVG(amount)
		FROM 
			cheque 
		WHERE 
			partner IN (SELECT id FROM partner WHERE operator = @operator);

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2);

		WITH cte AS
		(
			SELECT	
				SUM(ce.amount) AS chequeSum,
				DATEPART(WEEKDAY, ce.proctime) AS dayweek
			FROM
				cheque AS ce
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
			GROUP BY
				DATEPART(WEEKDAY, ce.proctime)
		)
		SELECT	
			@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 1 AND dayweek <= 5),
			@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 6 AND dayweek <= 7);

		SELECT @chequeSum = COALESCE(SUM(amount), 0) FROM cheque WHERE partner IN (SELECT id FROM partner WHERE operator = @operator);

		IF(@chequeSum > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdaySum/@chequeSum)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekOffAmount/@chequeSum)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		SELECT @addedBonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL);

		SELECT @redeemedBonus = COALESCE((-1)*SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL);

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		SET @addedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL));

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		SET @redeemedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL))

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		SET @avgDiscount = ROUND((@redeemedBonus/@gain)*100, 0);
	END'

	--Изменено. Тип колонки в chequeitems в соответствии типам таблице items и удалён identity. В chequeadd добавлен id строки в позициях чека.
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	IF EXISTS (SELECT * FROM systypes WHERE name = 'ChequeItems') DROP TYPE ChequeItems
	CREATE TYPE ChequeItems AS TABLE
	(
		id INT, 
		position TINYINT, 
		code NVARCHAR(10), 
		price NUMERIC(9,2), 
		quantity NUMERIC(9,2), 
		amount NUMERIC(9,2), 
		paidbybonus NUMERIC(9,2), 
		minprice NUMERIC(9,2), 
		noadd BIT, 
		noredeem BIT, 
		maxredeem NUMERIC(9,2), 
		added NUMERIC(9,2), 
		redeemed NUMERIC(9,2)
	)
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = NULL, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND (cancelled IS NULL OR cancelled = 0)
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	DECLARE @itemsum NUMERIC(9,2) = 0
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		SET @itemscount = 0
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			INSERT INTO @itemtable (position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
			SET @itemscount = @itemscount + 1
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@chequeitemid, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL BEGIN
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @inoadd IS NULL BEGIN
					SET @i = @i + 1					
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)
					VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @inoadd)
					SET @itemid = SCOPE_IDENTITY()
					SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
					UPDATE @itemtable SET added = @bonus WHERE id = @i
					SET @added = @added + @bonus
				END
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 338 BEGIN
	SELECT '3.39 20171120 Медянин'
	
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND (cancelled IS NULL OR cancelled = 0)
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL BEGIN
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @inoadd IS NULL BEGIN
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)
					VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @inoadd)
					SET @itemid = SCOPE_IDENTITY()
					SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
					UPDATE @itemtable SET added = @bonus WHERE id = @i
					SET @added = @added + @bonus
				END
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 339 BEGIN
	SELECT '3.40 20171121 Медянин'
	
	-- У списка товаров новый признак "не списывать"
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'noredeem' AND id = (SELECT id FROM sysobjects WHERE name = 'itemlist'))
		ALTER TABLE itemlist ADD noredeem BIT
	IF NOT EXISTS(select id from sysindexes where name = 'IX_itemlist_partnernoredeem')
		CREATE INDEX IX_itemlist_partnernoredeem ON itemlist (partner, noredeem)
	-- У списка товаров новый признак "с минимальной стоимостью"
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'minprice' AND id = (SELECT id FROM sysobjects WHERE name = 'itemlist'))
		ALTER TABLE itemlist ADD minprice BIT
	IF NOT EXISTS(select id from sysindexes where name = 'IX_itemlist_partnerminprice')
		CREATE INDEX IX_itemlist_partnerminprice ON itemlist (partner, minprice)
	-- У товаров в списке новый параметр "Минимальная стоимость единицы"
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'minprice' AND id = (SELECT id FROM sysobjects WHERE name = 'listitem'))
		ALTER TABLE listitem ADD minprice NUMERIC(9,2)
	-- У товаров в списке индексация еще по идентификатору списка и коду
	IF NOT EXISTS(select id from sysindexes where name = 'IX_listitem_listcode')
		CREATE INDEX IX_listitem_listcode ON listitem (itemlist, code)
	
	-- при списании в чеке, если не задан параметр товара "не списывать", проверяется список товаров на процессинге
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		IF @terminal IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE IF @pos IS NOT NULL SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card
		ELSE SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND (cancelled IS NULL OR cancelled = 0)
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @noredeem IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL BEGIN
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @paidbybonus, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @inoadd IS NULL BEGIN
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)
					VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @inoadd)
					SET @itemid = SCOPE_IDENTITY()
					SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
					UPDATE @itemtable SET added = @bonus WHERE id = @i
					SET @added = @added + @bonus
				END
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 340 BEGIN
	SELECT '3.41 20171122 Медянин'
	
	IF OBJECT_ID('_BonusCheque') IS NOT NULL DROP PROCEDURE _BonusCheque
	EXEC sp_executesql @statement = N'CREATE PROCEDURE _BonusCheque
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@bonus NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@chequetime DATETIME = NULL,
	@item INT = NULL,
	@birthdate DATE = NULL,
	@nowrite BIT = NULL
	AS SET NOCOUNT ON
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN (1) END
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан партнер'' RETURN (2) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма'' RETURN (3) END
	IF @cheque IS NULL AND @nowrite IS NULL BEGIN SET @errormessage = ''Не задан чек'' RETURN (4) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN (5) END
	IF @amount IS NULL SET @amount = 0 IF @paidbybonus IS NULL SET @paidbybonus = 0 SET @bonus = 0
	DECLARE @chequerule SMALLINT, @interest NUMERIC(9,2), @fixed NUMERIC(9,2), @begdate DATE, @enddate DATE, @operator SMALLINT = NULL, @cardlevel SMALLINT = NULL, @level SMALLINT = NULL, @nopaidbybonus BIT = NULL, @expdays SMALLINT = NULL, @expirydate DATE = NULL, @active BIT = NULL, @actdays TINYINT = NULL, @cardtype SMALLINT = NULL, @type SMALLINT = NULL, @match BIT = 1, @rulepartner SMALLINT = NULL, @rulecode NVARCHAR(10) = NULL, @begweekday TINYINT = NULL, @endweekday TINYINT = NULL, @begtime TIME(0) = NULL, @endtime TIME(0) = NULL, @weekday TINYINT = NULL, @time TIME(0) = NULL, @stop BIT = NULL, @minsum NUMERIC(9,2), @maxsum NUMERIC(9,2), @friendcard BIGINT = NULL, @friend BIT = NULL, @birthday BIT = NULL, @chequedate DATE = NULL, @rulebonus NUMERIC(9,2) = NULL, @count INT = 0, @i INT = 0, @itemlist SMALLINT = NULL, @itemexclude BIT = NULL
	SET @chequedate = @chequetime
	SELECT @operator = operator FROM partner WHERE id = @partner
	SELECT @cardlevel = level, @cardtype = type, @friendcard = friendcard FROM card WHERE number = @card
	CREATE TABLE #tBonusCheque (id INT IDENTITY(1,1) PRIMARY KEY, chequerule SMALLINT, interest NUMERIC(9,2), fixed NUMERIC(9,2), begdate DATE, enddate DATE, level SMALLINT, expdays SMALLINT, actdays SMALLINT, nopaidbybonus BIT, cardtype SMALLINT, partner SMALLINT, code NVARCHAR(10), begweekday TINYINT, endweekday TINYINT, begtime TIME(0), endtime TIME(0), stop BIT, minsum NUMERIC(9,2), maxsum NUMERIC(9,2), friend BIT, birthday BIT, itemlist SMALLINT, itemexclude BIT)
	INSERT INTO #tBonusCheque (chequerule, interest, fixed, begdate, enddate, level, expdays, actdays, nopaidbybonus, cardtype, partner, code, begweekday, endweekday, begtime, endtime, stop, minsum, maxsum, friend, birthday, itemlist, itemexclude) SELECT cr.id, cr.interest, cr.fixed, cr.begdate, cr.enddate, cr.level, cr.expdays, cr.actdays, cr.nopaidbybonus, cr.cardtype, cr.partner, cr.code, cr.begweekday, cr.endweekday, cr.begtime, cr.endtime, cr.stop, cr.minsum, cr.maxsum, cr.friend, cr.birthday, cr.itemlist, il.exclude FROM chequerule cr LEFT JOIN itemlist il ON cr.itemlist = il.id WHERE cr.active = 1 AND (cr.partner = @partner OR cr.operator = @operator) ORDER BY cr.priority
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @chequerule = chequerule, @interest = interest, @fixed = fixed, @begdate = begdate, @enddate = enddate, @level = level, @expdays = expdays, @actdays = actdays, @nopaidbybonus = nopaidbybonus, @type = cardtype, @rulepartner = partner, @rulecode = code, @begweekday = begweekday, @endweekday = endweekday, @begtime = begtime, @endtime = endtime, @stop = stop, @minsum = minsum, @maxsum = maxsum, @friend = friend, @birthday = birthday, @itemlist = itemlist, @itemexclude = itemexclude FROM #tBonusCheque WHERE id = @i
		SET @rulebonus = 0 SET @match = 1
		IF @nowrite = 0 SET @nowrite = NULL IF @itemexclude = 0 SET @itemexclude = NULL
		IF @expdays IS NULL SET @expdays = 365 SET @expirydate = GETDATE() + @expdays
		SET @active = NULL IF @actdays IS NULL OR @actdays = 0 SET @active = 1
		SET @weekday = DATEPART(DW, @chequetime - 1)
		IF @weekday = 0 SET @weekday = 7
		SET @time = @chequetime
		IF @match = 1 AND @rulepartner IS NOT NULL
			IF NOT @partner = @rulepartner
				SET @match = 0
		IF @match = 1 AND @begdate IS NOT NULL
			IF NOT @chequetime >= @begdate
				SET @match = 0
		IF @match = 1 AND @enddate IS NOT NULL
			IF NOT @chequetime < DATEADD(DAY, 1, @enddate)
				SET @match = 0
		IF @match = 1 BEGIN
			IF @rulecode IS NOT NULL BEGIN
				IF @code IS NULL
					SET @match = 0
				ELSE BEGIN
					IF NOT @code = @rulecode
						SET @match = 0
				END
			END
		END
		IF @match = 1 BEGIN
			IF @itemlist IS NOT NULL
				IF @itemexclude IS NULL BEGIN
					IF @code IS NULL
						SET @match = 0
					ELSE
						IF NOT EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
				END ELSE
					IF @code IS NOT NULL
						IF EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
		END
		IF @match = 1 AND @begweekday IS NOT NULL
			IF @weekday < @begweekday
				SET @match = 0
		IF @match = 1 AND @endweekday IS NOT NULL
			IF @weekday > @endweekday
				SET @match = 0
		IF @match = 1 AND @begtime IS NOT NULL
			IF @time < @begtime
				SET @match = 0
		IF @match = 1 AND @endtime IS NOT NULL
			IF @time > @endtime
				SET @match = 0
		IF @match = 1 AND @minsum IS NOT NULL
			IF @amount < @minsum
				SET @match = 0
		IF @match = 1 AND @maxsum IS NOT NULL
			IF @amount > @maxsum
				SET @match = 0
		IF @match = 1 AND @level IS NOT NULL
			IF @cardlevel IS NOT NULL BEGIN
				IF NOT @cardlevel = @level
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @type IS NOT NULL
			IF @cardtype IS NOT NULL BEGIN
				IF NOT @cardtype = @type
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @birthday IS NOT NULL
			IF @birthdate IS NULL
				SET @match = 0
			ELSE IF @chequedate IS NULL
				SET @match = 0
			ELSE IF NOT @chequedate = @birthdate
				SET @match = 0
		IF @match = 1 BEGIN
			IF @interest IS NOT NULL BEGIN
				IF @nopaidbybonus IS NULL OR @nopaidbybonus = 0
					SET @rulebonus = @rulebonus + @amount * @interest / 100
				ELSE
					SET @rulebonus = @rulebonus + (@amount - @paidbybonus) * @interest / 100
			END
			IF @fixed IS NOT NULL SET @rulebonus = @rulebonus + @fixed
			IF @friend IS NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@card, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 1, @item)
			ELSE IF @friendcard IS NOT NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@friendcard, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 8, @item)
			SET @bonus = @bonus + @rulebonus
		END
		IF @match = 1 AND @stop = 1
			BREAK
	END
	DROP TABLE #tBonusCheque
	RETURN (0)'
	
	IF OBJECT_ID('sprt') IS NULL
		CREATE TABLE sprt (id INT, code INT, mark NVARCHAR(20), parentid INT, name NVARCHAR(100), text NVARCHAR(100), minprice NUMERIC(9,2), maxdiscount NUMERIC(9,2), aspectschemeid INT, isware BIT, hierlevel INT, life INT, flags INT, series NVARCHAR(50), certificat NVARCHAR(50), taxgroupid INT, scalelpdevid INT, scalelploaded INT, scalelpwarecode INT, aspecttype INT, description NVARCHAR(100), quantityprec INT, pricelabelid INT, deleted BIT, pricelbprinted INT, rewardtype INT, rewardval INT, ecrdepartment INT, gtd NVARCHAR(50), printgroupclose INT, printgroupcopy INT, printgroupprecheque INT, printgroupstamp INT, lpmsgnum INT, visualselect INT, minweight NUMERIC(9,2), maxweight NUMERIC(9,2), directscalelpmsg NVARCHAR(50), tariffserviceid INT, alcotypecode INT, alcovolume INT, waretype INT, withexcisestamp INT, alcocontent INT, itemtype INT, paymentmode INT)
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'name' AND id = (SELECT id FROM sysobjects WHERE name = 'goodsgroup'))
		ALTER TABLE goodsgroup ADD name NVARCHAR(100)
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'name' AND id = (SELECT id FROM sysobjects WHERE name = 'goods'))
		ALTER TABLE goods ADD name NVARCHAR(100)
	IF EXISTS(SELECT name FROM syscolumns WHERE name = 'goodsgroup' AND id = (SELECT id FROM sysobjects WHERE name = 'goods'))
		ALTER TABLE goods ALTER COLUMN goodsgroup SMALLINT NULL
	IF EXISTS(SELECT name FROM syscolumns WHERE name = 'catalog' AND id = (SELECT id FROM sysobjects WHERE name = 'goodsgroup'))
		ALTER TABLE goodsgroup ALTER COLUMN catalog SMALLINT NULL
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'partner' AND id = (SELECT id FROM sysobjects WHERE name = 'goodsgroup'))
		ALTER TABLE goodsgroup ADD partner SMALLINT
	IF NOT EXISTS(select id from sysobjects where name = 'FK_goodsgroup_partner') 
		ALTER TABLE goodsgroup WITH CHECK ADD CONSTRAINT FK_goodsgroup_partner FOREIGN KEY(partner) REFERENCES partner (id)
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'catalog' AND id = (SELECT id FROM sysobjects WHERE name = 'goods'))
		ALTER TABLE goods ADD catalog SMALLINT
	IF NOT EXISTS(select id from sysobjects where name = 'FK_goods_catalog') 
		ALTER TABLE goods WITH CHECK ADD CONSTRAINT FK_goods_catalog FOREIGN KEY(catalog) REFERENCES catalog (id)
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'name' AND id = (SELECT id FROM sysobjects WHERE name = 'itemlist'))
		ALTER TABLE itemlist ADD name NVARCHAR(50)
	IF NOT EXISTS(select id from sysindexes where name = 'IX_goodsgroup_partnercode')
		CREATE INDEX IX_goodsgroup_partnercode ON goodsgroup (partner, code)
	IF NOT EXISTS(select id from sysindexes where name = 'IX_goodsgroup_goodsgroupcode')
		CREATE INDEX IX_goodsgroup_goodsgroupcode ON goodsgroup (goodsgroup, code)
	IF NOT EXISTS(select id from sysindexes where name = 'IX_goods_goodsgroupcode')
		CREATE INDEX IX_goods_goodsgroupcode ON goodsgroup (goodsgroup, code)
	IF NOT EXISTS(select id from sysindexes where name = 'IX_listitem_itemlistcode')
		CREATE INDEX IX_listitem_itemlistcode ON listitem (itemlist, code)
	
	IF OBJECT_ID('GoodsFrontol5Update') IS NOT NULL DROP PROCEDURE GoodsFrontol5Update
	EXEC sp_executesql @statement = N'CREATE PROCEDURE GoodsFrontol5Update
	@partner SMALLINT = NULL,
	@errormessage nvarchar(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, @i INT = 0, @count INT = 0, @id INT = NULL, @code INT = NULL, @parentid INT = NULL, @name NVARCHAR(100) = NULL, @goodsgroup SMALLINT = NULL, @parentcode INT = NULL, @noredeem BIT = NULL, @nocharge BIT = NULL, @itemlist SMALLINT = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не заполнен идентификатор Партнера'' RETURN(1) END
	IF NOT EXISTS (SELECT * FROM partner WHERE id = @partner) BEGIN SET @errormessage = ''Партнер с заданным идентификатором отсутствует'' RETURN(2) END
	SELECT @itemlist = id FROM itemlist WHERE partner = @partner AND exclude = 1 AND name = ''Алкоголь и табак''
	CREATE TABLE #tSprt (i INT IDENTITY(1,1) PRIMARY KEY, id INT, code INT, parentid INT, name NVARCHAR(100), parentcode INT)
	INSERT INTO #tSprt (id, code, parentid, name) SELECT id, code, parentid, name FROM sprt WHERE hierlevel = 1
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @id = id, @code = code, @parentid = parentid, @name = name FROM #tSprt WHERE i = @i
		IF @code IS NULL CONTINUE
		IF EXISTS (SELECT id FROM goodsgroup WHERE partner = @partner AND code = @code)
			UPDATE goodsgroup SET name = @name, goodsgroup = NULL, catalog = NULL WHERE partner = @partner AND code = @code
		ELSE
			INSERT INTO goodsgroup (partner, code, name) VALUES (@partner, @code, @name)
		IF @name IN (''Алкогольные напитки'', ''Табачные изделия'')
			UPDATE goodsgroup SET noredeem = 1, nocharge = 1 WHERE partner = @partner AND code = @code
	END
	TRUNCATE TABLE #tSprt
	INSERT INTO #tSprt (id, code, parentid, name, parentcode) SELECT s.id, s.code, s.parentid, s.name, p.code FROM sprt s LEFT JOIN sprt p ON s.parentid = p.id WHERE s.hierlevel = 2
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @id = id, @code = code, @parentid = parentid, @name = name, @parentcode = parentcode FROM #tSprt WHERE i = @i
		IF @code IS NULL OR @parentcode IS NULL CONTINUE
		SET @parentid = NULL
		SELECT @parentid = id, @nocharge = nocharge, @noredeem = noredeem FROM goodsgroup WHERE partner = @partner AND code = @parentcode
		IF @parentid IS NULL CONTINUE
		IF EXISTS (SELECT id FROM goodsgroup WHERE goodsgroup = @parentid AND code = @code)
			UPDATE goodsgroup SET name = @name, partner = @partner, catalog = NULL, nocharge = @nocharge, noredeem = @noredeem WHERE goodsgroup = @parentid AND code = @code
		ELSE
			INSERT INTO goodsgroup (partner, goodsgroup, code, name, nocharge, noredeem) VALUES (@partner, @parentid, @code, @name, @nocharge, @noredeem)
	END
	TRUNCATE TABLE #tSprt
	INSERT INTO #tSprt (id, code, parentid, name, parentcode) SELECT s.id, s.code, s.parentid, s.name, p.code FROM sprt s LEFT JOIN sprt p ON s.parentid = p.id WHERE s.hierlevel = 3
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @id = id, @code = code, @parentid = parentid, @name = name, @parentcode = parentcode FROM #tSprt WHERE i = @i
		IF @code IS NULL OR @parentcode IS NULL CONTINUE
		SET @parentid = NULL
		SELECT @parentid = id, @nocharge = nocharge, @noredeem = noredeem FROM goodsgroup WHERE partner = @partner AND code = @parentcode
		IF @parentid IS NULL CONTINUE
		IF EXISTS (SELECT code FROM goods WHERE goodsgroup = @parentid AND code = @code)
			UPDATE goods SET name = @name, partner = @partner, catalog = NULL, nocharge = @nocharge, noredeem = @noredeem WHERE goodsgroup = @parentid AND code = @code
		ELSE
			INSERT INTO goods (partner, goodsgroup, code, name, nocharge, noredeem) VALUES (@partner, @parentid, @code, @name, @nocharge, @noredeem)
		IF @itemlist IS NOT NULL AND @noredeem = 1
			IF NOT EXISTS (SELECT code FROM listitem WHERE itemlist = @itemlist AND code = @code)
				INSERT INTO listitem (itemlist, code) VALUES (@itemlist, @code)
	END
	TRUNCATE TABLE #tSprt
	DROP TABLE #tSprt
 	RETURN(0)'
	
	
END ELSE IF @version = 341 BEGIN
	SELECT '3.42 20171123 Смирнов'

	--Исправлено. Заменено pos на purchasepos при возврате с указанием purchasepos
	IF OBJECT_ID('Refund') IS NOT NULL DROP PROCEDURE Refund
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Refund
	@card BIGINT = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@partner SMALLINT = NULL,
	@pos NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL OUTPUT,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@terminal NVARCHAR(10) = NULL,
	@purchaseid INT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasedate DATE = NULL,
	@purchasepos NVARCHAR(10) = NULL,
	@purchaseterminal NVARCHAR(10) = NULL,
	@redeemed NUMERIC(9,2) = 0 OUTPUT
	AS SET NOCOUNT ON	
	DECLARE @result INT = NULL, 
			@cardoperator SMALLINT = NULL, 
			@partneroperator SMALLINT = NULL, 
			@client INT = NULL, 
			@cheque INT = NULL, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@partnername NVARCHAR(20) = NULL, 
			@operator SMALLINT = NULL, 
			@phoneend INT = NULL, 
			@last4 SMALLINT = NULL, 
			@middle2 TINYINT = NULL, 
			@cardend INT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@purchaseposid INT = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не задан'' RETURN(8) END
	SELECT @id = id, @operator = operator FROM partner WHERE id = @partner
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (9) END
	SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(10)	END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(11) END
	END ELSE
		IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(12) END
	IF @purchasepos IS NOT NULL BEGIN
		SELECT @purchaseposid = id FROM pos WHERE partner = @partner AND code = @purchasepos
		IF @purchaseposid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки покупки'' RETURN(13) END
	END ELSE
		IF @purchaseterminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала покупки должна быть задана торговая точка'' RETURN(14) END
	IF @phone IS NOT NULL IF @phone < 1000000 SET @phoneend = @phone%1000000
	IF @card IS NOT NULL IF @card < 100000 SET @cardend = @card
	IF @phoneend IS NULL AND @cardend IS NULL BEGIN
		EXECUTE @result = Identify @card = @card OUTPUT, @phone = @phone, @client = @client OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @partner = @partner
		IF NOT @result = 0 RETURN (@result)
		IF @client IS NULL BEGIN SET @errormessage = ''Клиент не найден'' RETURN(15) END
	END ELSE BEGIN
		IF @operator IS NULL BEGIN SET @errormessage = ''Заданный Партнер не привязан к Оператору программы лояльности'' RETURN(16) END
		IF @phoneend IS NOT NULL BEGIN
			SET @last4 = @phoneend%10000 SET @middle2 = FLOOR((@phoneend%1000000)/10000)
			IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4
			ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
			IF @@ROWCOUNT > 1 BEGIN SET @errormessage = ''Найдено больше одного номера телефона с данным окончанием'' RETURN(17) END
			IF @card IS NULL BEGIN SET @errormessage = ''Номера телефонов с данным окончанием по оператору партнера не найдены'' RETURN(18) END
		END ELSE
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL SET @card = @prefix * POWER(10, @numlen - LEN(@prefix)) + @cardend
		SELECT @balance = balance, @cardoperator = operator FROM card WHERE number = @card
		IF NOT @cardoperator = @operator BEGIN SET @errormessage = ''Несовпадение программы лояльности карты и партнера'' RETURN(19) END
	END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL
		IF @terminal IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND chequetime = @chequetime AND number = @number AND card = @card AND refund = 1
		ELSE IF @pos IS NOT NULL
			SELECT @id = id FROM cheque WHERE partner = @partner AND pos = @posid AND chequetime = @chequetime AND number = @number AND card = @card AND refund = 1
		ELSE
			SELECT @id = id FROM cheque WHERE partner = @partner AND chequetime = @chequetime AND number = @number AND card = @card AND refund = 1
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек возврата уже зарегистрирован''
			IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
			ELSE SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @purchaseid IS NOT NULL OR @purchasenumber IS NOT NULL BEGIN
		IF @purchaseid IS NOT NULL
			SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE id = @purchaseid AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE BEGIN
			IF @purchasedate IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(20) END
			SET @purchasetimebegin = CONVERT(DATETIME, @purchasedate)
			SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
			IF @purchaseterminal IS NOT NULL
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND pos = @purchaseposid AND terminal = @purchaseterminal AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
			ELSE IF @purchasepos IS NOT NULL
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND pos = @purchaseposid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
			ELSE
				SELECT @cheque = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		END
		IF @cheque IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @cheque and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
		SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus < 0
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SET @cheque = SCOPE_IDENTITY()
		IF @added < 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		IF @redeemed > 0
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
	END ELSE BEGIN
		IF @amount IS NULL BEGIN SET @errormessage = ''Сумма чека не задана'' RETURN(22) END
		IF @amount <= 0 BEGIN SET @errormessage = ''Сумма чека возврата должна быть больше 0'' RETURN(23) END
		IF @paidbybonus < 0 BEGIN SET @errormessage = ''Сумма оплаты бонусами в чеке не может быть отрицательной'' RETURN(24) END
		IF NOT EXISTS(SELECT id FROM cheque WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND (cancelled IS NULL OR cancelled = 0)) BEGIN SET @errormessage = N''Не найден чек с данной суммой покупки у данного номера карты'' RETURN(25) END
		IF EXISTS(SELECT id FROM cheque AS ce WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND (cancelled IS NULL OR cancelled = 0) AND EXISTS(SELECT id FROM cheque WHERE cheque = ce.id)) BEGIN SET @errormessage = N''На чек с данной суммой покупки у данного номера карты уже существует возврат''	RETURN(26) END
		SELECT @cheque = id FROM cheque WHERE card = @card AND amount = @amount AND paidbybonus = @paidbybonus AND (cancelled IS NULL OR cancelled = 0)
		IF @@ROWCOUNT > 1 BEGIN SET @errormessage = N''Найдено больше одного чека с данными параметрами. Воспользуйтесь расширенной формой возврата''	RETURN(27) END
		SET @added = (-1)*(SELECT SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0)
		SET @amount = -@amount
		SELECT @oldbalance = balance FROM card WHERE number = @card
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @cheque, 1)
		SELECT @balance = balance FROM card WHERE number = @card
		SET @cheque = SCOPE_IDENTITY()
		IF @paidbybonus IS NULL SET @paidbybonus = 0
		IF @paidbybonus > 0	BEGIN
			SET @redeemed = @paidbybonus
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @paidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
		IF @added < 0 BEGIN
			EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
		END
	END
	EXEC CardLevelRecount @card = @card, @errormessage = @errormessage OUTPUT
	IF @operator IS NULL SELECT @balance = balance FROM client WHERE id = @client
	ELSE SELECT @balance = balance FROM card WHERE number = @card
	SELECT @partnername = name FROM partner WHERE id = @partner
	IF @phoneend IS NOT NULL SELECT @phone = phone FROM client WHERE id = (SELECT client FROM card WHERE number = @card)
	IF @phone IS NULL SELECT TOP 1 @phone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = @card 
	DECLARE @notsendsms bit = 1
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL and @notsendsms = 0
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @paidbybonus = @paidbybonus, @added = @added, @amount = @amount, @refund = 1, @balance = @balance, @errormessage = @errormessage output
	RETURN(0)'

	--Исправлено. Текст ошибки
	IF OBJECT_ID(N'GainOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE GainOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE GainOperatorPeriod @operator SMALLINT = NULL,
		@from DATE = NULL,
		@to DATE = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SELECT
			COALESCE(SUM(ce.amount - COALESCE(ce.paidbybonus, 0)), 0) AS gain,
			COALESCE(AVG(ce.amount), 0) AS avgcheque,
			DATEPART(MONTH, proctime) AS monthnum
		FROM
			cheque AS ce
		WHERE
			ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
			AND (ce.refund = 0 OR ce.refund IS NULL)
			AND ce.proctime > @from
			AND ce.proctime <= @to
		GROUP BY
			DATEPART(MONTH, ce.proctime)
		RETURN(0)
	END'

	--Добавлено. Сумма возвратов с разбивкой по месяцам.
	IF OBJECT_ID(N'RefundOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE RefundOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE RefundOperatorPeriod @operator SMALLINT = NULL, 
		@from DATE = NULL, 
		@to DATE = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SELECT
			DATEPART(MONTH, ce.chequetime) AS monthNum,
			(-1)*SUM(ce.amount) AS chequesum
		FROM
			cheque AS ce
		WHERE
			ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
			AND ce.refund = 1 
			AND ce.proctime > @from
			AND ce.proctime <= @to
		GROUP BY
			DATEPART(MONTH, ce.chequetime)
		RETURN(0)
	END'

	--Добавлено. Количество зарегистрированных клиентов в каждом месяце.
	IF OBJECT_ID(N'ClientOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE ClientOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientOperatorPeriod @operator SMALLINT = NULL, 
		@from DATE = NULL, 
		@to DATE = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		SELECT
			DATEPART(MONTH, cr.regdate),
			COUNT(client)
		FROM
			clientoperator AS cr
		WHERE
			cr.operator = @operator
			AND cr.regdate > @from
			AND cr.regdate <= @to
		GROUP BY
			DATEPART(MONTH, cr.regdate)
		RETURN(0)
	END'
	
	
END ELSE IF @version = 342 BEGIN
	SELECT '3.43 20171125 Медянин'
	
	-- Проверка на чек с тем же номером менее строгая - дата/время чека проверяются не на совпадение, а на разницу. В чеке со списанием списание сразу идет в PaidByBonus.
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(12) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(13) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(14) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(15) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(16) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (24) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SET @errormessage = ''Чек уже зарегистрирован''
			SELECT @balance = balance FROM card WHERE number = @card
			SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (24) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(25) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @noredeem IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(26)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL BEGIN
		INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @inoadd IS NULL BEGIN
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)
					VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
					SET @itemid = SCOPE_IDENTITY()
					SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
					UPDATE @itemtable SET added = @bonus WHERE id = @i
					SET @added = @added + @bonus
				END
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 343 BEGIN
	SELECT '3.44 20171127 Медянин'
	
	-- В процедуру добавления чека добавлен частичный возврат
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 344 BEGIN
	SELECT '3.45 20171201 Медянин'
	
	-- Исправлена ошибка - возвращался баланс до начисления
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 0.01
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
END ELSE IF @version = 345 BEGIN
	SELECT '3.46 20171203 Смирнов'
	
	--Изменено. Chequetime заменён на proctime при выборке последнего чека
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			cr.client,
			COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
			cr.phone,
			COALESCE(cr.email, N''Отсутствует'') AS email,
			cr.birthdate,
			CASE
				WHEN cr.gender = 1 THEN N''Мужской''
				WHEN cr.gender = 0 THEN N''Женский''
				ELSE N''Не указан''
			END AS gender,
			COALESCE(ce.name, N''Клиент''),
			cd.number,
			COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
			cd.fullbalance,
			(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
			(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
			(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
			(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
			(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
			(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
			(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
			(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
			(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			LEFT JOIN cardtype AS ce ON ce.id = cd.type
			LEFT JOIN level AS ll ON cd.level = ll.id
		WHERE
			cr.operator = @operator
		RETURN(0)
	END'

	--Добавлено. Колонка для привязки параметра к оператору.
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'operator' AND id = (SELECT id FROM sysobjects WHERE name = 'parameter'))
		ALTER TABLE parameter ADD operator SMALLINT

	--Добавлено. Внешний ключ на таблицу оператор
	IF NOT EXISTS(select id from sysobjects where name = 'FK_parameter_operator') 
		ALTER TABLE parameter WITH CHECK ADD CONSTRAINT FK_parameter_operator FOREIGN KEY(operator) REFERENCES operator (id)

	--Добавлено. Процедура устанавливает у пользователя пароль, если пароля нет и отправляет смс с паролем. Если пароль есть, то процедура ничего не делает.
	IF OBJECT_ID('ClientSetSendPassword') IS NOT NULL DROP PROCEDURE ClientSetSendPassword
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientSetSendPassword @operator SMALLINT = NULL,
		@client INT = NULL,
		@phone BIGINT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @digit INT = NULL,
				@smsusername NVARCHAR(20) = NULL, 
				@smspassword NVARCHAR(20) = NULL, 
				@smssender NVARCHAR(20) = NULL, 
				@smsprovider NVARCHAR(20) = NULL,
				@text NVARCHAR(200) = NULL,
				@clientpassword NVARCHAR(20) = NULL		

		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF NOT EXISTS(SELECT client FROM clientoperator WHERE client = @client AND operator = @operator AND phone = @phone)
		BEGIN
			SET @errormessage = N''Не найден указанный клиент у указанного оператора''
			RETURN(2)
		END

		SELECT @clientpassword = password FROM clientoperator WHERE phone = @phone AND client = @client AND operator = @operator
		IF @clientpassword IS NOT NULL
		BEGIN
			RETURN(0)
		END

		SELECT @digit = FLOOR(RAND() * POWER(CAST(10 as BIGINT), 8))
		SET @clientpassword = CAST(@digit AS NVARCHAR(20))
		SET @smsprovider = ''greensms''
		SELECT @smsprovider = smsprovider, @smsusername = smsusername, @smspassword = smspassword, @smssender = smssender FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN
			SELECT @smsusername = value FROM parameter WHERE name = ''smsusername''
			SELECT @smspassword = value FROM parameter WHERE name = ''smspassword''
			SELECT @smssender = value FROM parameter WHERE name = ''smssender''
		END		
		UPDATE clientoperator SET password = @clientpassword WHERE client = @client AND operator = @operator
		SELECT @text = REPLACE(value, N''{0}'', @clientpassword) FROM parameter WHERE operator = @operator AND name = N''smspaternpassword''
		IF @smsprovider = ''greensms''
			EXEC SmsSendGreenSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
		ELSE IF @smsprovider = ''terasms''
			EXEC SmsSendTeraSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
	END'

	--Добавлено. Если параметр @clientsetpassword передан в значении 1, то у пользователя устанавливается пароль, если пароля нет и отправляется смс с паролем.
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL,
	@reglku BIT = NULL,
	@clientsetpassword BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @cardoperator SMALLINT = NULL, @virtual BIT = 0, @welcomebonus NUMERIC(9,2) = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @result INT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL, @base10 BIGINT = NULL, @welcomebonuslku NUMERIC(9,2) = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL IF @reglku = 0 SET @reglku = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku FROM operator WHERE id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku FROM operator WHERE name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END ELSE BEGIN
		SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @reglku IS NOT NULL SET @welcomebonus = @welcomebonuslku
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @clientsetpassword = 1
	BEGIN
		EXEC ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	RETURN (0)'

	--Добавлено. Возвращает информацию о позициях чека.
	IF OBJECT_ID('ChequeItems') IS NOT NULL DROP PROCEDURE ChequeItems
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeItems @cheque INT = NULL
	AS
	BEGIN
		SELECT 
			code,
			price,
			quantity,
			amount,
			paidbybonus,
			bs.bonus AS addedBonus
		FROM
			item AS im
			LEFT JOIN bonus AS bs ON im.id = bs.item
		WHERE
			im.cheque = @cheque
			AND bs.cheque = @cheque
	END'

	--Добавлено. Флаг установки пользователю пароля при создании. 
	IF OBJECT_ID('ClientCreate') IS NOT NULL DROP PROCEDURE ClientCreate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientCreate
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@card BIGINT = NULL OUTPUT, 
	@phone BIGINT = NULL OUTPUT, 
	@name NVARCHAR(50) = NULL, 
	@surname NVARCHAR(20) = NULL, 
	@patronymic NVARCHAR(20) = NULL, 
	@email NVARCHAR(50) = NULL, 
	@birthdate DATE = NULL,
	@allowsms BIT = NULL,
	@allowemail BIT = NULL,		
	@gender BIT = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@client INT OUTPUT,
	@agreepersonaldata BIT = NULL,
	@poscode NVARCHAR(10) = NULL,
	@friend BIGINT = NULL,
	@clientsetpassword BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, @emailclient INT = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL
	IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL
	IF @operator IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Оператора ПЛ'' RETURN(11) END
	SELECT @emailclient = client FROM email WHERE email = @email
	IF @emailclient IS NOT NULL BEGIN SET @errormessage = ''Данный E-mail уже привязан к клиенту'' RETURN(12) END
	EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata, @friend = @friend, @partner = @partner, @clientsetpassword = @clientsetpassword
	IF @result > 0 RETURN(@result)
	IF @email IS NOT NULL BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1
		EXEC @result = ClientSendEmailRegistration @email = @email, @operator = @operator, @errormessage = @errormessage OUTPUT
	END
	EXEC @result = ClientChange @client = @client, @surname = @surname, @name = @name, @patronymic = @patronymic, @birthdate = @birthdate, @allowsms = @allowsms, @allowemail = @allowemail, @gender = @gender, @errormessage = @errormessage OUTPUT, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata
	IF @result > 0 RETURN(@result)
	RETURN(0)'

END ELSE IF @version = 346 BEGIN
	SELECT '3.47 20171203 Смирнов'

	--Добавлено. Для указанного номера телефона проверяется, есть ли он в списке пользователей оператора. Если есть, то отправляется проверочный код.
	IF OBJECT_ID('ManagerSendCode') IS NOT NULL DROP PROCEDURE ManagerSendCode
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ManagerSendCode @phone BIGINT = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @operator SMALLINT = NULL
		IF EXISTS(SELECT
					ct.phone
				FROM
					client AS ct
					INNER JOIN manager AS mr ON ct.id = mr.client
					INNER JOIN clientrole AS ce ON ce.client = ct.id
					INNER JOIN role AS re ON ce.role = re.id
					INNER JOIN rolepermission AS rn ON re.id = rn.role
					INNER JOIN permission AS pn ON rn.permission = pn.id
				WHERE
					ct.phone = @phone)
		BEGIN
			SELECT
				@phone = ct.phone,
				@operator = mr.operator
			FROM
				client AS ct
				INNER JOIN manager AS mr ON ct.id = mr.client
				INNER JOIN clientrole AS ce ON ce.client = ct.id
				INNER JOIN role AS re ON ce.role = re.id
				INNER JOIN rolepermission AS rn ON re.id = rn.role
				INNER JOIN permission AS pn ON rn.permission = pn.id
			WHERE
				ct.phone = @phone 
			IF @@ROWCOUNT = 1
			BEGIN
				EXEC ClientSendCode @phone = @phone, @operator = @operator, @errormessage = @errormessage OUTPUT
			END
			ELSE
			BEGIN
				SET @errormessage = N''Найдено больше одной учётной записи по данному номер телефона''
				RETURN(1)
			END
			RETURN(0)
		END
		ELSE
		BEGIN
			SET @errormessage = N''Указанный номер телефона не зарегистрирован в программе''
			RETURN(2)
		END
	END'


END ELSE IF @version = 347 BEGIN
	SELECT '3.48 20171205 Смирнов'

	--Добавлено. Активация карты и привязки к клиенту.
	IF OBJECT_ID('CardActivate', 'P') IS NOT NULL DROP PROCEDURE CardActivate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardActivate @card BIGINT = NULL, 
		@phone BIGINT = NULL, 
		@code NVARCHAR(10) = NULL, 
		@operator SMALLINT = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @client INT = NULL, @result INT
		IF NOT EXISTS(SELECT number FROM phone WHERE number = @phone)
		BEGIN
			SET @errormessage = N''Номер телефона не найден''
			RETURN(1)
		END
		IF @code IS NULL
		BEGIN
			IF NOT EXISTS(SELECT number FROM phone WHERE number = @phone AND validated = 1)
			BEGIN
				SET @errormessage = N''Номер телефона не подтверждён''
				RETURN(2)
			END
		END
		ELSE
		BEGIN
			EXECUTE @result = ClientConfirm @phone = @phone, @code = @code, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT
			IF @result <> 0
			BEGIN
				RETURN(@result)
			END
		END

		IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
		BEGIN
			SET @errormessage = N''Указанный номер карты не найден''
			RETURN(3)
		END

		SELECT @client = client FROM clientoperator WHERE phone = @phone AND operator = @operator

		IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NOT NULL)
		BEGIN
			IF NOT EXISTS(SELECT number FROM card WHERE number = @card AND client = @client)
			BEGIN
				SET @errormessage = N''Указанный номер карты принадлежит другому клиенту''
				RETURN(4)
			END
			ELSE
			BEGIN
				UPDATE card SET status = 0 WHERE number = @card
				RETURN(0)
			END
		END

		IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NULL)
		BEGIN
			EXEC @result = ClientAddCard @client = @client, @card = @card, @errormessage = @errormessage OUTPUT
			RETURN (@result)
		END
	END'

END ELSE IF @version = 348 BEGIN
	SELECT '3.49 20171206 Смирнов'
	
	--Добавлено. Возвращает наименование оператора по идентификатору.
	IF OBJECT_ID('OperatorInfoGet', 'P') IS NOT NULL DROP PROCEDURE OperatorInfoGet
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE OperatorInfoGet @operator SMALLINT = NULL, 
		@operatorname NVARCHAR(20) OUTPUT,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный идентификатор оператора''
			RETURN(1)
		END
		SELECT
			@operatorname = name
		FROM
			operator
		WHERE
			id = @operator
	END'

	--Исправлено. Процедура активации карты доработана в соответствии с требованиями.
	IF OBJECT_ID('CardActivate', 'P') IS NOT NULL DROP PROCEDURE CardActivate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardActivate @card BIGINT = NULL, 
		@phone BIGINT = NULL, 
		@code NVARCHAR(10) = NULL, 
		@operator SMALLINT = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @client INT = NULL, @result INT
		IF NOT EXISTS(SELECT number FROM phone WHERE number = @phone)
		BEGIN
			SET @errormessage = N''Номер телефона не найден''
			RETURN(1)
		END
		
		EXECUTE @result = ClientConfirm @phone = @phone, @code = @code, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT
		IF @result <> 0
		BEGIN
			RETURN(@result)
		END

		IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
		BEGIN
			SET @errormessage = N''Указанный номер карты не найден''
			RETURN(3)
		END
		
		SELECT @client = client FROM clientoperator WHERE phone = @phone AND operator = @operator

		--Если не зарегистрирован, то регистрируем
		IF(@client IS NULL)
		BEGIN
			EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator, @agreepersonaldata = 1
			IF @result <> 0
			BEGIN
				RETURN(@result)
			END
		END		

		IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NOT NULL)
		BEGIN
			IF NOT EXISTS(SELECT number FROM card WHERE number = @card AND client = @client)
			BEGIN
				SET @errormessage = N''Указанный номер карты принадлежит другому клиенту''
				RETURN(4)
			END
			ELSE
			BEGIN
				UPDATE card SET status = 0 WHERE number = @card
				--Высылаем пароль
				EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
				RETURN(@result)
			END
		END

		IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NULL)
		BEGIN
			EXEC @result = ClientAddCard @client = @client, @card = @card, @errormessage = @errormessage OUTPUT
			RETURN (@result)
		END
	END'

END ELSE IF @version = 349 BEGIN
	SELECT '3.50 20171208 Смирнов'

	--Добавлено. Процедура для системных оповещений. Отправка смс об активации карты
	IF OBJECT_ID('ClientNotificationSystem', 'P') IS NOT NULL DROP PROCEDURE ClientNotificationSystem
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientNotificationSystem @client INT = NULL, 
		@phone BIGINT = NULL, 
		@operator SMALLINT = NULL, 
		@sendpassword BIT = NULL, 
		@activatecard BIT = NULL, 
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF(@activatecard = 1)
		BEGIN
			DECLARE @result TINYINT,
					@phone_number BIGINT, 
					@code NVARCHAR(10) = NULL, 
					@text NVARCHAR(70) = NULL, 
					@smsusername NVARCHAR(20) = NULL, 
					@smspassword NVARCHAR(20) = NULL, 
					@smssender NVARCHAR(20) = NULL, 
					@smsprovider NVARCHAR(20) = NULL,
					@operatorlkuaddress NVARCHAR(200) = NULL
			IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
			SET @phone %= 10000000000
			IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
			SET @code = RIGHT(''000'' + CONVERT(NVARCHAR, FLOOR(RAND()*10000)), 4)	
			SELECT @phone_number = number, @client = client FROM phone WHERE number = @phone
			IF @@ROWCOUNT = 0 INSERT INTO phone (number, code) VALUES (@phone, @code)
			ELSE UPDATE phone SET code = @code, validated = 0 WHERE number = @phone
			SELECT @smsprovider = smsprovider, @operatorlkuaddress = ISNULL(lkuaddress, ''''), @smsusername = smsusername, @smspassword = smspassword, @smssender = smssender FROM operator WHERE id = @operator
			IF @smsprovider IS NULL SELECT @smsprovider = value FROM parameter WHERE name = ''smsprovider''
			IF @smsusername IS NULL SELECT @smsusername = value FROM parameter WHERE name = ''smsusername''
			IF @smspassword IS NULL SELECT @smspassword = value FROM parameter WHERE name = ''smspassword''
			IF @smssender IS NULL SELECT @smssender = value FROM parameter WHERE name = ''smssender''
			SET @operatorlkuaddress = @operatorlkuaddress + ''/sms/?client='' + CONVERT(NVARCHAR, @client) + ''&code='' + @code
			IF EXISTS(SELECT name FROM parameter WHERE operator = @operator AND name = N''ActivateCard'')
			BEGIN		
				SELECT @text = REPLACE(value, N''{0}'', @operatorlkuaddress) FROM parameter WHERE operator = @operator AND name = N''ActivateCard''
			END
			ELSE IF EXISTS(SELECT name FROM parameter WHERE operator IS NULL AND name = N''ActivateCard'')
			BEGIN
				SELECT @text = REPLACE(value, N''{0}'', @operatorlkuaddress) FROM parameter WHERE operator IS NULL AND name = N''ActivateCard''
			END
			IF @text IS NOT NULL
			BEGIN		
				IF @smsprovider = ''greensms''
					EXEC SmsSendGreenSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
				ELSE IF @smsprovider = ''terasms''
					EXEC SmsSendTeraSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
			END
			IF @text IS NULL SET @text = ''Текст сообщения в процедуре ClientSendCode не заполнен''
			INSERT INTO message (client, text, rectime, phone, status, provider, operator) VALUES (@client, @text, GETDATE(), @phone, 1, @smsprovider, @operator)
			RETURN(0)
		END
	END'

END ELSE IF @version = 350 BEGIN
	SELECT '3.51 20171209 Смирнов'

	--Добавлено. Флаг отправки смс со ссылкой на активацию.
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'activationlink' AND id = (SELECT id FROM sysobjects WHERE name = 'operator'))
		ALTER TABLE operator ADD activationlink BIT

	--Изменено. Запись об email добавляется также в таблицу clientoperator
	IF OBJECT_ID('ClientAddEmail') IS NOT NULL DROP PROCEDURE ClientAddEmail
	EXEC sp_executesql @statement = N'create procedure ClientAddEmail
	@client INT = NULL,
	@email NVARCHAR(50) = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL, -- добавлен параметр "Не проверять валидность E-mail", если доверяем источнику
	@operator SMALLINT = NULL
	AS SET NOCOUNT ON
	DECLARE @emailclient INT = NULL, @validated TINYINT = 0
	IF @email = '''' SET @email = NULL IF @client = 0 SET @client = NULL
	IF @email IS NULL BEGIN SET @errormessage = ''Не задан E-mail'' RETURN(1) END
	IF @client IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Клиента'' RETURN(2) END
	IF NOT EXISTS(SELECT id FROM client WHERE id = @client) BEGIN SET @errormessage = ''Заданный идентификатор Клиента не найден'' RETURN(3) END
	SELECT @validated = validated FROM email WHERE email = @email
	IF @@ROWCOUNT = 0 -- E-mail еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный E-mail не найден'' RETURN(4)	END -- если валидация обязательна - тогда нужно, чтобы email уже был
		ELSE INSERT INTO email (email) VALUES (@email) -- если говорим, что не проверять, валиден email или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''E-mail еще не подтвержден'' RETURN(5) END
	SELECT @emailclient = client, @validated = validated FROM email WHERE email = @email
	IF @emailclient IS NOT NULL AND @emailclient <> @client
	BEGIN 
		SET @errormessage = ''Данный E-mail уже привязан к клиенту'' 
		RETURN(6) 
	END
	IF @emailclient IS NULL
	BEGIN
		UPDATE email SET client = @client WHERE email = @email
	END
	IF(@operator IS NOT NULL AND @operator > 0)
	BEGIN
		UPDATE clientoperator SET email = @email WHERE client = @client AND operator = @operator
	END
	RETURN (0)'

	--Изменено. Добавлен email участника при регистрации.
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL,
	@reglku BIT = NULL,
	@clientsetpassword BIT = NULL,
	@email NVARCHAR(50) = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @cardoperator SMALLINT = NULL, @virtual BIT = 0, @welcomebonus NUMERIC(9,2) = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @result INT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL, @base10 BIGINT = NULL, @welcomebonuslku NUMERIC(9,2) = NULL, @activationlink BIT = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL IF @reglku = 0 SET @reglku = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku, @activationlink = activationlink FROM operator WHERE id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku, @activationlink = activationlink FROM operator WHERE name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END ELSE BEGIN
		SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku, @activationlink = activationlink FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @reglku IS NOT NULL SET @welcomebonus = @welcomebonuslku
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @clientsetpassword = 1
	BEGIN
		EXEC ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
	END
	IF @email IS NOT NULL
	BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
	END
	IF @activationlink = 1
	BEGIN
		EXEC @result = ClientNotificationSystem @client = @client, @phone = @phone, @operator = @operator, @activatecard = 1, @errormessage = @errormessage OUTPUT
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	RETURN (0)'

	--Изменено. Добавлено поле email.
	IF OBJECT_ID('ClientChange') IS NOT NULL DROP PROCEDURE ClientChange
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientChange
	@client INT = NULL,
	@password NVARCHAR(20) = NULL,
	@surname NVARCHAR(20) = NULL,
	@name NVARCHAR(20) = NULL,
	@patronymic NVARCHAR(20) = NULL,
	@gender BIT = NULL,
	@birthdate DATE = NULL,
	@address NVARCHAR(100) = NULL,
	@haschildren BIT = NULL,
	@description NVARCHAR(100) = NULL,
	@allowsms BIT = NULL,
	@allowemail BIT = NULL,
	@allowpush BIT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT, -- значение по умолчанию NULL для уменьшения ошибок вызова
	@operator SMALLINT = NULL, -- новая концепция - данные клиента относятся только к одному оператору, а не ко всем
	@agreepersonaldata BIT = NULL,
	@poscode NVARCHAR(10) = NULL,
	@email NVARCHAR(50) = NULL
	AS SET NOCOUNT ON
	DECLARE @id INT = NULL, @pos SMALLINT = NULL, @result INT = 0
	IF @client = 0 SET @client = NULL IF @password = '''' SET @password = NULL
	IF @client IS NULL BEGIN SET @errormessage = ''Не задан идентификатор клиента'' RETURN(1) END
	SELECT @client = id FROM client WHERE id = @client
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Клиент не найден'' RETURN(2) END
	IF @operator IS NULL BEGIN -- внешние методы пока не задают идентификатор оператора, поэтому до этих изменений данные пишутся как общие для всех операторов плюс для оператора по умолчанию
		SELECT @operator = id FROM operator WHERE name = ''Оператор'' -- оператор по умолчанию
		IF @operator IS NULL BEGIN
			INSERT INTO operator (name) VALUES(''Оператор'')-- если нет - создание
			SET @operator = SCOPE_IDENTITY()
		END
	END ELSE BEGIN
		SELECT @operator = id FROM operator WHERE id = @operator -- проверка, задан ли оператор корректно, если он задан
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный идентификатор Оператора ПЛ не найден'' RETURN(3) END
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner IN (SELECT id FROM partner WHERE operator = @operator))
	SELECT @id = client FROM clientoperator WHERE client = @client AND @operator = operator -- если записи данных клиента для оператора нет
	IF @@ROWCOUNT = 0 INSERT INTO clientoperator (client, operator) VALUES (@client, @operator) -- добавляем ее
	UPDATE client SET surname = @surname, name = @name, patronymic = @patronymic, gender = @gender, birthdate = @birthdate, address = @address, haschildren = @haschildren, description = @description, allowsms = @allowsms, allowemail = @allowemail WHERE id = @client -- обновление данных клиента для всех операторов
	UPDATE clientoperator SET surname = @surname, name = @name, patronymic = @patronymic, gender = @gender, birthdate = @birthdate, address = @address, haschildren = @haschildren, description = @description, allowsms = @allowsms, allowemail = @allowemail WHERE client = @client AND operator = @operator
	IF @pos IS NOT NULL UPDATE clientoperator SET pos = @pos WHERE client = @client AND operator = @operator
	IF @agreepersonaldata IS NOT NULL UPDATE clientoperator SET agreepersonaldata = @agreepersonaldata WHERE client = @client AND operator = @operator
	IF @password IS NOT NULL BEGIN
		UPDATE client SET password = @password WHERE id = @client -- обновляем пароль в данных клиента для всех операторов
		UPDATE clientoperator SET password = @password WHERE client = @client AND operator = @operator -- обновляем пароль в данных клиента для заданного оператора или оператора по умолчанию
	END
	IF @allowpush IS NOT NULL BEGIN
		UPDATE client SET allowpush = @allowpush WHERE id = @client -- обновляем разрашение на пуш в данных клиента для всех операторов
		UPDATE clientoperator SET allowpush = @allowpush WHERE client = @client AND operator = @operator -- обновляем разрашение на пуш в данных клиента для заданного оператора или оператора по умолчанию
	END
	IF @email IS NOT NULL
	BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
	END
	RETURN (0)'

	--Изменено. Добавлен идентификатор оператора при добавлении email новому участнику
	IF OBJECT_ID('ClientCreate') IS NOT NULL DROP PROCEDURE ClientCreate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientCreate
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@card BIGINT = NULL OUTPUT, 
	@phone BIGINT = NULL OUTPUT, 
	@name NVARCHAR(50) = NULL, 
	@surname NVARCHAR(20) = NULL, 
	@patronymic NVARCHAR(20) = NULL, 
	@email NVARCHAR(50) = NULL, 
	@birthdate DATE = NULL,
	@allowsms BIT = NULL,
	@allowemail BIT = NULL,		
	@gender BIT = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@client INT OUTPUT,
	@agreepersonaldata BIT = NULL,
	@poscode NVARCHAR(10) = NULL,
	@friend BIGINT = NULL,
	@clientsetpassword BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, @emailclient INT = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL
	IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL
	IF @operator IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Оператора ПЛ'' RETURN(11) END
	SELECT @emailclient = client FROM email WHERE email = @email
	IF @emailclient IS NOT NULL BEGIN SET @errormessage = ''Данный E-mail уже привязан к клиенту'' RETURN(12) END
	EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata, @friend = @friend, @partner = @partner, @clientsetpassword = @clientsetpassword
	IF @result > 0 RETURN(@result)
	IF @email IS NOT NULL BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
		EXEC @result = ClientSendEmailRegistration @email = @email, @operator = @operator, @errormessage = @errormessage OUTPUT
	END
	EXEC @result = ClientChange @client = @client, @surname = @surname, @name = @name, @patronymic = @patronymic, @birthdate = @birthdate, @allowsms = @allowsms, @allowemail = @allowemail, @gender = @gender, @errormessage = @errormessage OUTPUT, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata
	IF @result > 0 RETURN(@result)
	RETURN(0)'	
	
	
END ELSE IF @version = 351 BEGIN
	SELECT '3.52 20171212 Медянин'
	
	-- При добавлении чека минимальная сумма оплаты деньгами не 1 копейка, а 1 рубль.
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					IF @imaxredeem < 0 SET @imaxredeem = 0
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	-- В бонусных правилах можно прописывать количество дней до дня рождения и после
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'birthdaybefore' AND id = (SELECT id FROM sysobjects WHERE name = 'chequerule'))
		ALTER TABLE chequerule ADD birthdaybefore TINYINT
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'birthdayafter' AND id = (SELECT id FROM sysobjects WHERE name = 'chequerule'))
		ALTER TABLE chequerule ADD birthdayafter TINYINT
	
	-- В бонусных правилах можно прописывать количество дней до дня рождения и после
	IF OBJECT_ID('_BonusCheque') IS NOT NULL DROP PROCEDURE _BonusCheque
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE _BonusCheque
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@bonus NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@chequetime DATETIME = NULL,
	@item INT = NULL,
	@birthdate DATE = NULL,
	@nowrite BIT = NULL
	AS SET NOCOUNT ON
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN (1) END
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан партнер'' RETURN (2) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма'' RETURN (3) END
	IF @cheque IS NULL AND @nowrite IS NULL BEGIN SET @errormessage = ''Не задан чек'' RETURN (4) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN (5) END
	IF @amount IS NULL SET @amount = 0 IF @paidbybonus IS NULL SET @paidbybonus = 0 SET @bonus = 0
	DECLARE @chequerule SMALLINT, @interest NUMERIC(9,2), @fixed NUMERIC(9,2), @begdate DATE, @enddate DATE, @operator SMALLINT = NULL, @cardlevel SMALLINT = NULL, @level SMALLINT = NULL, @nopaidbybonus BIT = NULL, @expdays SMALLINT = NULL, @expirydate DATE = NULL, @active BIT = NULL, @actdays TINYINT = NULL, @cardtype SMALLINT = NULL, @type SMALLINT = NULL, @match BIT = 1, @rulepartner SMALLINT = NULL, @rulecode NVARCHAR(10) = NULL, @begweekday TINYINT = NULL, @endweekday TINYINT = NULL, @begtime TIME(0) = NULL, @endtime TIME(0) = NULL, @weekday TINYINT = NULL, @time TIME(0) = NULL, @stop BIT = NULL, @minsum NUMERIC(9,2), @maxsum NUMERIC(9,2), @friendcard BIGINT = NULL, @friend BIT = NULL, @birthday BIT = NULL, @chequedate DATE = NULL, @rulebonus NUMERIC(9,2) = NULL, @count INT = 0, @i INT = 0, @itemlist SMALLINT = NULL, @itemexclude BIT = NULL, @birthdaybefore TINYINT = NULL, @birthdayafter TINYINT = NULL
	SET @chequedate = @chequetime
	SELECT @operator = operator FROM partner WHERE id = @partner
	SELECT @cardlevel = level, @cardtype = type, @friendcard = friendcard FROM card WHERE number = @card
	CREATE TABLE #tBonusCheque (id INT IDENTITY(1,1) PRIMARY KEY, chequerule SMALLINT, interest NUMERIC(9,2), fixed NUMERIC(9,2), begdate DATE, enddate DATE, level SMALLINT, expdays SMALLINT, actdays SMALLINT, nopaidbybonus BIT, cardtype SMALLINT, partner SMALLINT, code NVARCHAR(10), begweekday TINYINT, endweekday TINYINT, begtime TIME(0), endtime TIME(0), stop BIT, minsum NUMERIC(9,2), maxsum NUMERIC(9,2), friend BIT, birthday BIT, itemlist SMALLINT, itemexclude BIT, birthdaybefore TINYINT, birthdayafter TINYINT)
	INSERT INTO #tBonusCheque (chequerule, interest, fixed, begdate, enddate, level, expdays, actdays, nopaidbybonus, cardtype, partner, code, begweekday, endweekday, begtime, endtime, stop, minsum, maxsum, friend, birthday, itemlist, itemexclude, birthdaybefore, birthdayafter) SELECT cr.id, cr.interest, cr.fixed, cr.begdate, cr.enddate, cr.level, cr.expdays, cr.actdays, cr.nopaidbybonus, cr.cardtype, cr.partner, cr.code, cr.begweekday, cr.endweekday, cr.begtime, cr.endtime, cr.stop, cr.minsum, cr.maxsum, cr.friend, cr.birthday, cr.itemlist, il.exclude, cr.birthdaybefore, cr.birthdayafter FROM chequerule cr LEFT JOIN itemlist il ON cr.itemlist = il.id WHERE cr.active = 1 AND (cr.partner = @partner OR cr.operator = @operator) ORDER BY cr.priority
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @chequerule = chequerule, @interest = interest, @fixed = fixed, @begdate = begdate, @enddate = enddate, @level = level, @expdays = expdays, @actdays = actdays, @nopaidbybonus = nopaidbybonus, @type = cardtype, @rulepartner = partner, @rulecode = code, @begweekday = begweekday, @endweekday = endweekday, @begtime = begtime, @endtime = endtime, @stop = stop, @minsum = minsum, @maxsum = maxsum, @friend = friend, @birthday = birthday, @itemlist = itemlist, @itemexclude = itemexclude, @birthdaybefore = birthdaybefore, @birthdayafter = birthdayafter FROM #tBonusCheque WHERE id = @i
		SET @rulebonus = 0 SET @match = 1
		IF @nowrite = 0 SET @nowrite = NULL IF @itemexclude = 0 SET @itemexclude = NULL
		IF @expdays IS NULL SET @expdays = 365 SET @expirydate = GETDATE() + @expdays
		SET @active = NULL IF @actdays IS NULL OR @actdays = 0 SET @active = 1
		SET @weekday = DATEPART(DW, @chequetime - 1)
		IF @weekday = 0 SET @weekday = 7
		IF @birthdaybefore IS NULL SET @birthdaybefore = 0 IF @birthdayafter IS NULL SET @birthdayafter = 0
		SET @time = @chequetime
		IF @match = 1 AND @rulepartner IS NOT NULL
			IF NOT @partner = @rulepartner
				SET @match = 0
		IF @match = 1 AND @begdate IS NOT NULL
			IF NOT @chequetime >= @begdate
				SET @match = 0
		IF @match = 1 AND @enddate IS NOT NULL
			IF NOT @chequetime < DATEADD(DAY, 1, @enddate)
				SET @match = 0
		IF @match = 1 BEGIN
			IF @rulecode IS NOT NULL BEGIN
				IF @code IS NULL
					SET @match = 0
				ELSE BEGIN
					IF NOT @code = @rulecode
						SET @match = 0
				END
			END
		END
		IF @match = 1 BEGIN
			IF @itemlist IS NOT NULL
				IF @itemexclude IS NULL BEGIN
					IF @code IS NULL
						SET @match = 0
					ELSE
						IF NOT EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
				END ELSE
					IF @code IS NOT NULL
						IF EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
		END
		IF @match = 1 AND @begweekday IS NOT NULL
			IF @weekday < @begweekday
				SET @match = 0
		IF @match = 1 AND @endweekday IS NOT NULL
			IF @weekday > @endweekday
				SET @match = 0
		IF @match = 1 AND @begtime IS NOT NULL
			IF @time < @begtime
				SET @match = 0
		IF @match = 1 AND @endtime IS NOT NULL
			IF @time > @endtime
				SET @match = 0
		IF @match = 1 AND @minsum IS NOT NULL
			IF @amount < @minsum
				SET @match = 0
		IF @match = 1 AND @maxsum IS NOT NULL
			IF @amount > @maxsum
				SET @match = 0
		IF @match = 1 AND @level IS NOT NULL
			IF @cardlevel IS NOT NULL BEGIN
				IF NOT @cardlevel = @level
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @type IS NOT NULL
			IF @cardtype IS NOT NULL BEGIN
				IF NOT @cardtype = @type
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @birthday IS NOT NULL
			IF @birthdate IS NULL
				SET @match = 0
			ELSE IF @chequedate IS NULL
				SET @match = 0
			ELSE
				IF @chequedate < DATEADD(DAY, -@birthdaybefore, @birthdate) OR @chequedate > DATEADD(DAY, @birthdayafter, @birthdate)
					SET @match = 0
		IF @match = 1 BEGIN
			IF @interest IS NOT NULL BEGIN
				IF @nopaidbybonus IS NULL OR @nopaidbybonus = 0
					SET @rulebonus = @rulebonus + @amount * @interest / 100
				ELSE
					SET @rulebonus = @rulebonus + (@amount - @paidbybonus) * @interest / 100
			END
			IF @fixed IS NOT NULL SET @rulebonus = @rulebonus + @fixed
			IF @friend IS NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@card, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 1, @item)
			ELSE IF @friendcard IS NOT NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@friendcard, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 8, @item)
			SET @bonus = @bonus + @rulebonus
		END
		IF @match = 1 AND @stop = 1
			BREAK
	END
	DROP TABLE #tBonusCheque
	RETURN (0)'
	
END ELSE IF @version = 352 BEGIN
	SELECT '3.53 20171212 Смирнов'
	
	--Добавлен номер карты
	IF OBJECT_ID('ClientGet') IS NOT NULL DROP PROCEDURE ClientGet
	EXEC sp_executesql @statement = N'create procedure ClientGet
	@id INT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT,
	@operator SMALLINT = NULL -- данные клиента должны получаться по оператору
	AS SET NOCOUNT ON
	DECLARE @client INT = NULL
	IF @id = 0 SET @id = NULL IF @operator = 0 SET @operator = NULL
	IF @id = NULL BEGIN SET @errormessage = ''Не задан идентификатор Клиента'' RETURN(1) END
	-- начало 1.60 20170226 Медянин
	-- Внешние методы пока не задают идентификатор оператора, поэтому до этих изменений данные пишутся как общие для всех операторов плюс для оператора по умолчанию
	IF @operator IS NULL BEGIN -- внешние методы пока не задают идентификатор оператора, поэтому до этих изменений данные пишутся как общие для всех операторов плюс для оператора по умолчанию
		SELECT @operator = id FROM operator WHERE name = ''Оператор'' -- оператор по умолчанию
		IF @operator IS NULL BEGIN
			INSERT INTO operator (name) VALUES(''Оператор'')-- если нет - создание
			SET @operator = SCOPE_IDENTITY()
		END
	END ELSE BEGIN
		SELECT @operator = id FROM operator WHERE id = @operator -- проверка, задан ли оператор корректно, если он задан
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный идентификатор Оператора ПЛ не найден'' RETURN(3) END
	END
	-- конец 1.60 20170226 Медянин
	SELECT @client = client FROM clientoperator WHERE client = @id AND operator = @operator
	IF @client IS NOT NULL
		SELECT
		 COALESCE(co.name, c.name) AS name,
		 COALESCE(co.patronymic, c.patronymic) AS patronymic,
		 COALESCE(co.surname, c.surname) AS surname,
		 COALESCE(co.gender, c.gender) AS gender,
		 COALESCE(co.birthdate, c.birthdate) AS birthdate,
		 COALESCE(co.haschildren, c.haschildren) AS haschildren,
		 COALESCE(co.description, c.description) AS description,
		 COALESCE(co.phone, c.phone) AS phone,
		 COALESCE(co.email, c.email) AS email,
		 COALESCE(co.allowsms, c.allowsms) AS allowsms,
		 COALESCE(co.allowemail, c.allowemail) AS allowemail,
		 cd.balance,
		 COALESCE(co.allowpush, c.allowpush) AS allowpush,
		 cs.name AS status,
		 cd.fullbalance,
		 cd.purchases,
		 cd.purchasesum,
		 cd.charged,
		 cd.redeemed,
		 cd.card
		FROM
		 clientoperator co
		 LEFT JOIN client c ON co.client = c.id
		 LEFT JOIN clientstatus cs ON c.status = cs.id
		 LEFT JOIN (SELECT client,
		  SUM(balance) AS balance,
		  SUM(fullbalance) AS fullbalance,
		  SUM(purchases) AS purchases,
		  SUM(purchasesum) AS purchasesum,
		  SUM(charged) AS charged,
		  SUM(redeemed) AS redeemed,
		  MAX(number) AS card
		  FROM card WHERE client = @id AND operator = @operator GROUP BY client) cd ON cd.client = c.id
		WHERE
		 co.client = @id
		 AND operator = @operator
	ELSE BEGIN
		SELECT
		 c.name,
		 c.patronymic,
		 c.surname,
		 c.gender,
		 c.birthdate,
		 c.haschildren,
		 c.description,
		 c.phone,
		 c.email,
		 c.allowsms,
		 c.allowemail,
		 cd.balance,
		 c.allowpush,
		 cs.name AS status,
		 cd.fullbalance,
		 cd.purchases,
		 cd.purchasesum,
		 cd.charged,
		 cd.redeemed,
		 cd.card
		FROM
		 client c
		 LEFT JOIN clientstatus cs ON c.status = cs.id
		 LEFT JOIN (SELECT client,
		  SUM(balance) AS balance,
		  SUM(fullbalance) AS fullbalance,
		  SUM(purchases) AS purchases,
		  SUM(purchasesum) AS purchasesum,
		  SUM(charged) AS charged,
		  SUM(redeemed) AS redeemed,
		  MAX(number) AS card
		  FROM card WHERE client = @id GROUP BY client) cd ON cd.client = c.id
		WHERE
		 c.id = @id
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Клиент не найден'' RETURN(2) END
	END
	RETURN(0)'
	
	
END ELSE IF @version = 353 BEGIN
	SELECT '3.54 20171214 Медянин'
	
	-- Исправлена ошибка при добавлении чеков @bonusid проверка на то, что заполнен, а не на то, что не заполнен
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'create procedure ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					IF @imaxredeem < 0 SET @imaxredeem = 0
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'

END ELSE IF @version = 354 BEGIN
	SELECT '3.55 20171217 Смирнов'
	
	--Email может добавляться, которого нет в базе.
	IF OBJECT_ID('FK_message_email') IS NOT NULL
		ALTER TABLE message DROP CONSTRAINT FK_message_email
	
	--Добавлено. Возвращает список товаров оператора
	IF OBJECT_ID('OperatorGetGoods') IS NOT NULL DROP PROCEDURE OperatorGetGoods
	EXEC sp_executesql @statement = N'CREATE PROCEDURE OperatorGetGoods 
		@operator SMALLINT = NULL, 
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			code,
			name
		FROM
			goods
		WHERE
			partner in (SELECT id FROM partner WHERE operator = @operator)
	END'

	--Добавлено. Возвращает список торговых точек оператора
	IF OBJECT_ID('OperatorGetPos') IS NOT NULL DROP PROCEDURE OperatorGetPos
	EXEC sp_executesql @statement = N'CREATE PROCEDURE OperatorGetPos @operator SMALLINT = NULL,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			rn.name AS region,
			cy.name AS city,
			ps.address AS posaddress
		FROM
			pos AS ps
			LEFT JOIN city AS cy ON ps.city = cy.id
			LEFT JOIN region AS rn ON cy.region = rn.id
		WHERE
			partner in (SELECT id FROM partner WHERE operator = @operator)
	END'

	--Исправлено. Добавлена отправка пароля в случае активации новой карты
	IF OBJECT_ID('CardActivate', 'P') IS NOT NULL DROP PROCEDURE CardActivate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardActivate @card BIGINT = NULL, 
		@phone BIGINT = NULL, 
		@code NVARCHAR(10) = NULL, 
		@operator SMALLINT = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @client INT = NULL, @result INT
		IF NOT EXISTS(SELECT number FROM phone WHERE number = @phone)
		BEGIN
			SET @errormessage = N''Номер телефона не найден''
			RETURN(1)
		END
		
		EXECUTE @result = ClientConfirm @phone = @phone, @code = @code, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT
		IF @result <> 0
		BEGIN
			RETURN(@result)
		END

		IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
		BEGIN
			SET @errormessage = N''Указанный номер карты не найден''
			RETURN(3)
		END
		
		SELECT @client = client FROM clientoperator WHERE phone = @phone AND operator = @operator

		--Если не зарегистрирован, то регистрируем
		IF(@client IS NULL)
		BEGIN
			EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator, @agreepersonaldata = 1
			IF @result <> 0
			BEGIN
				RETURN(@result)
			END
		END		

		IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NOT NULL)
		BEGIN
			IF NOT EXISTS(SELECT number FROM card WHERE number = @card AND client = @client)
			BEGIN
				SET @errormessage = N''Указанный номер карты принадлежит другому клиенту''
				RETURN(4)
			END
			ELSE
			BEGIN
				UPDATE card SET status = 0 WHERE number = @card
				--Высылаем пароль
				EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
				RETURN(@result)
			END
		END

		IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NULL)
		BEGIN
			EXEC @result = ClientAddCard @client = @client, @card = @card, @errormessage = @errormessage OUTPUT
			EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
			RETURN (@result)
		END
	END'

	--Добавлена проверка на NULL у выручки и среднего чека. Если NULL, то подставляется ноль
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = NULL,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL);
		SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL);
		SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
		SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
		SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator);
		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) >= 10
		)
		SELECT @moreTenBuys = COUNT(number) FROM CTE;

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) = 1
		)
		SELECT @withOneBuy = COUNT(number) FROM CTE;

		SELECT 
			@gain = COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0),
			@avgCheque = COALESCE(AVG(amount), 0)
		FROM 
			cheque 
		WHERE 
			partner IN (SELECT id FROM partner WHERE operator = @operator);

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2);

		WITH cte AS
		(
			SELECT	
				SUM(ce.amount) AS chequeSum,
				DATEPART(WEEKDAY, ce.proctime) AS dayweek
			FROM
				cheque AS ce
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
			GROUP BY
				DATEPART(WEEKDAY, ce.proctime)
		)
		SELECT	
			@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 1 AND dayweek <= 5),
			@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 6 AND dayweek <= 7);

		SELECT @chequeSum = COALESCE(SUM(amount), 0) FROM cheque WHERE partner IN (SELECT id FROM partner WHERE operator = @operator);

		IF(@chequeSum > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdaySum/@chequeSum)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekOffAmount/@chequeSum)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		SELECT @addedBonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL);

		SELECT @redeemedBonus = COALESCE((-1)*SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL);

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		SET @addedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL));

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		SET @redeemedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL))

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		IF(@gain > 0)
		BEGIN
			SET @avgDiscount = ROUND((@redeemedBonus/@gain)*100, 0);
		END
		ELSE
		BEGIN
			SET @avgDiscount = 0
		END
	END'

	--Добавлено. Проверка на NULL. Если повторных покупок не было, то ставится ноль.
	IF OBJECT_ID(N'ClientBaseActive', 'P') IS NOT NULL DROP PROCEDURE ClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseActive @operator SMALLINT = NULL,
		@menBuys NUMERIC(9,2) = NULL OUTPUT,
		@womenBuys NUMERIC(9,2) = NULL OUTPUT,
		@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
		@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
		@buysOnClient NUMERIC(9,2) = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден указанный оператор'';
			RETURN(1)
		END
		DECLARE @clientsQty INT;

		SELECT
			@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
			@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
			@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator
			AND (ce.refund = 0 OR ce.refund IS NULL);

		WITH cheques AS
		(
			SELECT 
				ce.id, 
				ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime DESC) AS rownum
			FROM
				cheque AS ce
				INNER JOIN card AS cd ON ce.card = cd.number
			WHERE
				cd.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
		)
		SELECT
			@repeatedBuys = COALESCE(SUM(ce.amount), 0)
		FROM
			clientoperator AS cr 
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON ce.card = cd.number
		WHERE
			cr.operator = @operator
			AND (ce.refund IS NULL OR ce.refund = 0)
			AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)

		SELECT
			@clientsQty = COUNT(DISTINCT cr.client)
		FROM
			clientoperator AS cr
			INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
			INNER JOIN cheque AS ce ON cd.number = ce.card
		WHERE
			cr.operator = @operator

		IF (@clientsQty > 0)
		BEGIN
			SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
		END
		ELSE
		BEGIN
			SET @buysOnClient = 0
		END
		RETURN(0)
	END'

	--Исправлено. Убрана отправка ссылки активации карты на телефон
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL,
	@reglku BIT = NULL,
	@clientsetpassword BIT = NULL,
	@email NVARCHAR(50) = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @cardoperator SMALLINT = NULL, @virtual BIT = 0, @welcomebonus NUMERIC(9,2) = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @result INT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL, @base10 BIGINT = NULL, @welcomebonuslku NUMERIC(9,2) = NULL, @activationlink BIT = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL IF @reglku = 0 SET @reglku = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku, @activationlink = activationlink FROM operator WHERE id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku, @activationlink = activationlink FROM operator WHERE name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END ELSE BEGIN
		SELECT @operator = id, @prefix = prefix, @numlen = numlen, @welcomebonus = welcomebonus, @bonustofriend = bonustofriend, @bonusforfriend = bonusforfriend, @welcomebonuslku = welcomebonuslku, @activationlink = activationlink FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @reglku IS NOT NULL SET @welcomebonus = @welcomebonuslku
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @clientsetpassword = 1
	BEGIN
		EXEC ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
	END
	IF @email IS NOT NULL
	BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	RETURN (0)'

	--Добавлено. Отправка ссылки активации карты на телефон
	IF OBJECT_ID('ClientCreate') IS NOT NULL DROP PROCEDURE ClientCreate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientCreate
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@card BIGINT = NULL OUTPUT, 
	@phone BIGINT = NULL OUTPUT, 
	@name NVARCHAR(50) = NULL, 
	@surname NVARCHAR(20) = NULL, 
	@patronymic NVARCHAR(20) = NULL, 
	@email NVARCHAR(50) = NULL, 
	@birthdate DATE = NULL,
	@allowsms BIT = NULL,
	@allowemail BIT = NULL,		
	@gender BIT = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@client INT OUTPUT,
	@agreepersonaldata BIT = NULL,
	@poscode NVARCHAR(10) = NULL,
	@friend BIGINT = NULL,
	@clientsetpassword BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, @emailclient INT = NULL, @friendphone BIGINT = NULL, @friendcard BIGINT = NULL, @friendclient INT = NULL, @bonustofriend NUMERIC(9,2) = NULL, @bonusforfriend NUMERIC(9,2) = NULL, @activationlink BIT = NULL
	IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL
	IF @operator IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Оператора ПЛ'' RETURN(11) END
	SELECT @emailclient = client FROM email WHERE email = @email
	IF @emailclient IS NOT NULL BEGIN SET @errormessage = ''Данный E-mail уже привязан к клиенту'' RETURN(12) END
	EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata, @friend = @friend, @partner = @partner, @clientsetpassword = @clientsetpassword
	IF @result > 0 RETURN(@result)	
	SELECT @activationlink = activationlink FROM operator WHERE id = @operator
	IF @activationlink = 1
	BEGIN
		EXEC @result = ClientNotificationSystem @client = @client, @phone = @phone, @operator = @operator, @activatecard = 1, @errormessage = @errormessage OUTPUT
	END
	IF @email IS NOT NULL BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
		EXEC @result = ClientSendEmailRegistration @email = @email, @operator = @operator, @errormessage = @errormessage OUTPUT
	END
	EXEC @result = ClientChange @client = @client, @surname = @surname, @name = @name, @patronymic = @patronymic, @birthdate = @birthdate, @allowsms = @allowsms, @allowemail = @allowemail, @gender = @gender, @errormessage = @errormessage OUTPUT, @operator = @operator, @poscode = @poscode, @agreepersonaldata = @agreepersonaldata
	IF @result > 0 RETURN(@result)
	RETURN(0)'	

	--Изменено. Если отсутствует уровень начисления, то запрашивается минимальный из таблицы правил начисления
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		SET @to = DATEADD(DAY, 1, (@to))
		SET @beginDate = @from
		SET @endDate = @to

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			AND (cancelled IS NULL OR cancelled = 0)
			
		SELECT
			(SELECT smssender FROM operator WHERE id = @operator) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''M5TT21'' AND pr.operator = @operator), N''Lcpos'')
				WHEN cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
				ELSE N''Нет''
			END AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT (-1)*SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			COALESCE((SELECT condition FROM level WHERE id = cd.level), (SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator)) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки]
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

END ELSE IF @version = 355 BEGIN
	SELECT '3.56 20171221 Смирнов'

	--Изменено. Добавлена возможность отправлять в тексте смс знак &
	IF OBJECT_ID('SmsSendGreenSms', 'PC') IS NOT NULL DROP PROCEDURE SmsSendGreenSms
	IF EXISTS(SELECT assembly_id FROM sys.assemblies WHERE name = 'sms') DROP ASSEMBLY sms
	CREATE ASSEMBLY [sms]
	FROM 
	WITH PERMISSION_SET = UNSAFE
	EXEC sp_executesql @statement = N'CREATE PROCEDURE SmsSendGreenSms (
		@username NVARCHAR(30),
		@password NVARCHAR(30),
		@phonenumber BIGINT,
		@text NVARCHAR(300),
		@from NVARCHAR(11))
	WITH EXECUTE AS CALLER AS EXTERNAL NAME sms.StoredProcedures.SmsSendGreen'

	--Изменено. Увеличено количество символов в смс
	IF OBJECT_ID('ClientNotificationSystem', 'P') IS NOT NULL DROP PROCEDURE ClientNotificationSystem
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientNotificationSystem @client INT = NULL, 
		@phone BIGINT = NULL, 
		@operator SMALLINT = NULL, 
		@sendpassword BIT = NULL, 
		@activatecard BIT = NULL, 
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF(@activatecard = 1)
		BEGIN
			DECLARE @result TINYINT,
					@phone_number BIGINT, 
					@code NVARCHAR(10) = NULL, 
					@text NVARCHAR(134) = NULL, 
					@smsusername NVARCHAR(20) = NULL, 
					@smspassword NVARCHAR(20) = NULL, 
					@smssender NVARCHAR(20) = NULL, 
					@smsprovider NVARCHAR(20) = NULL,
					@operatorlkuaddress NVARCHAR(200) = NULL
			IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
			SET @phone %= 10000000000
			IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
			SET @code = RIGHT(''000'' + CONVERT(NVARCHAR, FLOOR(RAND()*10000)), 4)	
			SELECT @phone_number = number, @client = client FROM phone WHERE number = @phone
			IF @@ROWCOUNT = 0 INSERT INTO phone (number, code) VALUES (@phone, @code)
			ELSE UPDATE phone SET code = @code, validated = 0 WHERE number = @phone
			SELECT @smsprovider = smsprovider, @operatorlkuaddress = ISNULL(lkuaddress, ''''), @smsusername = smsusername, @smspassword = smspassword, @smssender = smssender FROM operator WHERE id = @operator
			IF @smsprovider IS NULL SELECT @smsprovider = value FROM parameter WHERE name = ''smsprovider''
			IF @smsusername IS NULL SELECT @smsusername = value FROM parameter WHERE name = ''smsusername''
			IF @smspassword IS NULL SELECT @smspassword = value FROM parameter WHERE name = ''smspassword''
			IF @smssender IS NULL SELECT @smssender = value FROM parameter WHERE name = ''smssender''
			SET @operatorlkuaddress = @operatorlkuaddress + ''/sms/?client='' + CONVERT(NVARCHAR, @client) + ''&code='' + @code
			IF EXISTS(SELECT name FROM parameter WHERE operator = @operator AND name = N''ActivateCard'')
			BEGIN		
				SELECT @text = REPLACE(value, N''{0}'', @operatorlkuaddress) FROM parameter WHERE operator = @operator AND name = N''ActivateCard''
			END
			ELSE IF EXISTS(SELECT name FROM parameter WHERE operator IS NULL AND name = N''ActivateCard'')
			BEGIN
				SELECT @text = REPLACE(value, N''{0}'', @operatorlkuaddress) FROM parameter WHERE operator IS NULL AND name = N''ActivateCard''
			END
			IF @text IS NOT NULL
			BEGIN		
				IF @smsprovider = ''greensms''
					EXEC SmsSendGreenSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
				ELSE IF @smsprovider = ''terasms''
					EXEC SmsSendTeraSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
			END
			IF @text IS NULL SET @text = ''Текст сообщения в процедуре ClientSendCode не заполнен''
			INSERT INTO message (client, text, rectime, phone, status, provider, operator) VALUES (@client, @text, GETDATE(), @phone, 1, @smsprovider, @operator)
			RETURN(0)
		END
	END'


END ELSE IF @version = 356 BEGIN
	SELECT '3.57 20171221 Смирнов'

	--Изменено. Добавлена возможность активации карты по номеру телефона и коду (берётся из ссылки активации).
	IF OBJECT_ID('CardActivate', 'P') IS NOT NULL DROP PROCEDURE CardActivate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardActivate @card BIGINT = NULL, 
		@phone BIGINT = NULL, 
		@code NVARCHAR(10) = NULL, 
		@operator SMALLINT = NULL, 
		@client INT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @result INT		
		IF((@card = 0 OR @card IS NULL) AND @client > 0)
		BEGIN
			IF (EXISTS(SELECT number FROM card WHERE @client = @client AND operator = @operator))
			BEGIN
				UPDATE card SET status = 0 WHERE client = @client AND operator = @operator
				SELECT @phone = phone FROM clientoperator WHERE client = @client AND operator = @operator
				EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
				EXECUTE @result = ClientConfirm @phone = @phone, @code = @code, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT
				IF @result <> 0
				BEGIN
					RETURN(@result)
				END				
			END
			ELSE
			BEGIN
				SET @errormessage = N''У указанного клиента отсутствует карта''
				RETURN(2)
			END
		END
		ELSE
		BEGIN			
			IF NOT EXISTS(SELECT number FROM phone WHERE number = @phone)
			BEGIN
				SET @errormessage = N''Номер телефона не найден''
				RETURN(1)
			END
		
			EXECUTE @result = ClientConfirm @phone = @phone, @code = @code, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT
			IF @result <> 0
			BEGIN
				RETURN(@result)
			END
						
			IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
			BEGIN
				SET @errormessage = N''Указанный номер карты не найден''
				RETURN(3)
			END
		
			SELECT @client = client FROM clientoperator WHERE phone = @phone AND operator = @operator

			--Если не зарегистрирован, то регистрируем
			IF(@client IS NULL)
			BEGIN
				EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator, @agreepersonaldata = 1
				IF @result <> 0
				BEGIN
					RETURN(@result)
				END
			END		

			IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NOT NULL)
			BEGIN
				IF NOT EXISTS(SELECT number FROM card WHERE number = @card AND client = @client)
				BEGIN
					SET @errormessage = N''Указанный номер карты принадлежит другому клиенту''
					RETURN(4)
				END
				ELSE
				BEGIN
					UPDATE card SET status = 0 WHERE number = @card
					--Высылаем пароль
					EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
					RETURN(@result)
				END
			END

			IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NULL)
			BEGIN
				EXEC @result = ClientAddCard @client = @client, @card = @card, @errormessage = @errormessage OUTPUT
				EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
				RETURN (@result)
			END
		END
	END'

	--Изменён расчёт выручки. Учитываются только покупки, без возвратов.
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = NULL,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL);
		SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL);
		SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
		SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
		SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator);
		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) >= 10
		)
		SELECT @moreTenBuys = COUNT(number) FROM CTE;

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) = 1
		)
		SELECT @withOneBuy = COUNT(number) FROM CTE;

		SELECT 			
			@avgCheque = COALESCE(AVG(amount), 0)
		FROM 
			cheque 
		WHERE 
			partner IN (SELECT id FROM partner WHERE operator = @operator)
			AND (refund = 0 OR refund IS NULL);

		SELECT 
			@gain = COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0)
		FROM 
			cheque 
		WHERE 
			partner IN (SELECT id FROM partner WHERE operator = @operator);

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2);

		WITH cte AS
		(
			SELECT	
				SUM(ce.amount) AS chequeSum,
				DATEPART(WEEKDAY, ce.proctime) AS dayweek
			FROM
				cheque AS ce
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
			GROUP BY
				DATEPART(WEEKDAY, ce.proctime)
		)
		SELECT	
			@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
			@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

		SELECT @chequeSum = COALESCE(SUM(amount), 0) FROM cheque WHERE partner IN (SELECT id FROM partner WHERE operator = @operator);

		IF(@chequeSum > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdaySum/@chequeSum)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekOffAmount/@chequeSum)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		SELECT @addedBonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL);

		SELECT @redeemedBonus = COALESCE((-1)*SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL);

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		SET @addedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL));

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		SET @redeemedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL))

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		IF(@gain > 0)
		BEGIN
			SET @avgDiscount = ROUND((@redeemedBonus/@gain)*100, 0);
		END
		ELSE
		BEGIN
			SET @avgDiscount = 0
		END
	END'

	--Удалён первичный ключ с колонки name таблицы parameter. Добавлен индекс уникальности на колонки name и operator. У оператора могут быть свои шаблоны смс.
	IF EXISTS(SELECT name FROM sys.key_constraints WHERE type = N'PK' AND OBJECT_NAME(parent_object_id) = N'parameter')
	BEGIN
		ALTER TABLE parameter DROP CONSTRAINT PK_parameter
	END
	ALTER TABLE parameter ADD CONSTRAINT UQ_parameter UNIQUE(name, operator)

	--Изменено. Максимальная сумма списания 100% - 1 рубль
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'create procedure ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 1
					IF @imaxredeem < 0 SET @imaxredeem = 0
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			IF @balance < @maxredeem BEGIN
				SET @relation = @balance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @balance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @balance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @balance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	
END ELSE IF @version = 357 BEGIN
	SELECT '3.58 20171225 Медянин'
	
	IF OBJECT_ID('HolikaInitiate') IS NOT NULL DROP PROCEDURE HolikaInitiate
	EXEC sp_executesql @statement = N'create procedure HolikaInitiate
	AS SET NOCOUNT ON
	DECLARE @result TINYINT = 0
	IF NOT EXISTS (SELECT * FROM parameter WHERE name = ''smspatternpassword'' AND operator = (SELECT id FROM operator WHERE name = ''Holika Holika''))
		INSERT INTO parameter (name, value, operator) VALUES(''smspatternpassword'', ''Вы успешно зарегистрированы. Пароль в личный кабинет {0}'', (SELECT TOP(1) id FROM operator WHERE name = ''Holika Holika''))
	RETURN 0'
	
	IF OBJECT_ID('SemSarInitiate') IS NOT NULL DROP PROCEDURE SemSarInitiate
	EXEC sp_executesql @statement = N'create procedure SemSarInitiate
	AS SET NOCOUNT ON
	DECLARE @result TINYINT = 0
	IF NOT EXISTS (SELECT * FROM parameter WHERE name = ''ActivateCard'' AND operator = (SELECT id FROM operator WHERE name = ''Семейный''))
		INSERT INTO parameter (name, value, operator) VALUES(''ActivateCard'', ''Вы зарегистировались в Семейной Копилке!Активируйте карту: {0}'', (SELECT id FROM operator WHERE name = ''Семейный''))
	RETURN 0'
	
	-- При слиянии карт, если задано, что карта может быть свободной, и новая активная карта свободна (не привязана к клиенту), то теперь она привязывается к клиенту "старой" карты
	IF OBJECT_ID('CardMerge') IS NOT NULL DROP PROCEDURE CardMerge
	EXEC sp_executesql @statement = N'create procedure CardMerge
	@active BIGINT = NULL,
	@merged BIGINT = NULL,
	@noblock BIT = NULL,
	@noactivate BIT = NULL,
	@freecard BIT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @mergedoperator SMALLINT = NULL, @activeoperator SMALLINT = NULL, @mergedclient INT = NULL, @activeclient INT = NULL, @bonus NUMERIC(9,2) = NULL, @activestatus TINYINT = NULL, @client INT = NULL
	IF @active = 0 SET @active = NULL IF @merged = 0 SET @merged = NULL IF @noblock = 0 SET @noblock = NULL IF @noactivate = 0 SET @noactivate = NULL IF @freecard = 0 SET @freecard = NULL
	IF @merged IS NULL BEGIN SET @errormessage = ''Номер Объединяемой карты не указан'' RETURN (1) END
	IF @active IS NULL BEGIN SET @errormessage = ''Номер Остающейся карты не указан'' RETURN (2) END
	IF @active = @merged BEGIN SET @errormessage = ''Номера карт не должны совпадать'' RETURN (3) END
	SELECT @merged = number, @mergedoperator = operator, @mergedclient = client, @bonus = balance FROM card WHERE number = @merged
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Номер Объединяемой карты не найден'' RETURN (4) END
	SELECT @active = number, @activeoperator = operator, @activeclient = client, @activestatus = status FROM card WHERE number = @active
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Номер Остающейся карты не найден'' RETURN (5) END
	IF @mergedoperator != @activeoperator BEGIN SET @errormessage = ''Номера карт должны относиться к одному Оператору ПЛ'' RETURN (6) END
	IF @activeclient IS NOT NULL SET @client = @activeclient
	ELSE IF @mergedclient IS NOT NULL SET @client = @mergedclient
	IF @freecard IS NULL BEGIN
		IF @mergedclient IS NULL OR @activeclient IS NULL OR @mergedclient != @activeclient BEGIN SET @errormessage = ''Номера карт должны принадлежать одному Клиенту'' RETURN (7) END
	END	ELSE IF @activeclient IS NULL UPDATE card SET client = @client WHERE number = @active
	UPDATE bonus SET card = @active WHERE card = @merged -- замена номера карты в бонусах, балансы карт автоматически пересчитываются
	INSERT INTO merging (merged, merging, time) VALUES(@merged, @active, GETDATE()) -- добавление записи о слиянии в историю слияния карт
	IF @noblock IS NULL UPDATE card SET card = @active, status = 1 WHERE number = @merged -- сливаемая карта привязывается к остающейся, блокировка деактивируемой карты
	ELSE UPDATE card SET card = @active WHERE number = @merged -- сливаемая карта привязывается к остающейся
	IF @noactivate IS NULL IF @activestatus > 0 UPDATE card SET status = 0 WHERE number = @active -- на всякий случай активируем активную
	RETURN (0)'
	
	-- Параметры, определеяющие при объединении карт, что не блокировать (по умолчанию) и не активировать (по умолчанию) теперь задаются, и по умолчанию блокировать и активировать
	IF OBJECT_ID('ClientAddCard') IS NOT NULL DROP PROCEDURE ClientAddCard
	EXEC sp_executesql @statement = N'create procedure ClientAddCard
	@client INT = NULL,
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@noblock BIT = NULL,
	@noactivate BIT = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @clientcard BIGINT = NULL, @cardclient INT = NULL, @cardend INT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @clientoperator SMALLINT = NULL, @cardoperator SMALLINT = NULL, @clientvirtual BIT = NULL, @cardvirtual BIT = NULL
	IF @client = 0 SET @client = NULL IF @card = 0 SET @card = NULL IF @partner = 0 SET @partner = NULL
	IF @client IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Клиента'' RETURN(11) END
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер присоединяемой карты'' RETURN(12) END
	EXEC @result = Identify @client = @client OUTPUT, @card = @clientcard OUTPUT, @operator = @clientoperator OUTPUT, @virtual = @clientvirtual OUTPUT, @partner = @partner, @errormessage = @errormessage OUTPUT
	IF @result != 0 RETURN(@result)
	EXEC @result = Identify @client = @cardclient OUTPUT, @card = @card OUTPUT, @operator = @cardoperator OUTPUT, @virtual = @cardvirtual OUTPUT, @partner = @partner, @errormessage = @errormessage OUTPUT
	IF @result != 0 RETURN(@result)
	IF @cardclient IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(13) END
	EXEC @result = CardMerge @active = @card, @merged = @clientcard, @noblock = @noblock, @noactivate = @noactivate, @freecard = 1, @errormessage = @errormessage OUTPUT -- слияние с оставлением статусов карт как есть
	RETURN (0)'
	
	-- В добавлении чека минимальная сумма оплаты денежными средствами 1 рубль на чек, а не на каждую позицию
	-- В добавлении чека исправлена ошибка - если не было состава чека, то количество начисленных бонусов не возвращалось, хотя бонусы начислялись
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC sp_executesql @statement = N'create procedure ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL, @calcbalance NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
END ELSE IF @version = 358 BEGIN
	SELECT '3.59 20171226 Смирнов'

	--Исправлено. Расчёт выручки.
	IF OBJECT_ID(N'GainOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE GainOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE GainOperatorPeriod @operator SMALLINT = NULL,
		@from DATE = NULL,
		@to DATE = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		DECLARE @table AS table
		(
			gain NUMERIC(9,2),
			avgcheque NUMERIC(9,2),
			monthnum INT
		)

		DECLARE @gainTable AS TABLE
		(
			gain NUMERIC(9,2),
			monthnum INT
		)

		INSERT INTO @table(avgcheque, monthnum)
		SELECT
			COALESCE(AVG(ce.amount), 0) AS avgcheque,
			DATEPART(MONTH, proctime) AS monthnum
		FROM
			cheque AS ce
		WHERE
			ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
			AND (ce.refund = 0 OR ce.refund IS NULL)
			AND ce.proctime > @from
			AND ce.proctime <= @to
		GROUP BY
			DATEPART(MONTH, ce.proctime)

		INSERT INTO @gainTable(gain, monthnum)
		SELECT 
			COALESCE(SUM(ce.amount - COALESCE(ce.paidbybonus, 0)), 0),
			DATEPART(MONTH, proctime) AS monthnum
		FROM 
			@table AS te
			INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
		WHERE
			ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
			AND ce.proctime > @from
			AND ce.proctime <= @to
		GROUP BY
			DATEPART(MONTH, ce.proctime)

		MERGE @table AS target
			USING @gaintable AS source
			ON (target.monthnum = source.monthnum)
			WHEN MATCHED THEN UPDATE SET gain = source.gain
			WHEN NOT MATCHED THEN INSERT (gain, avgcheque, monthnum) VALUES(source.gain, 0, source.monthnum);

		SELECT
			gain,
			avgcheque,
			monthnum
		FROM
			@table AS te
		RETURN(0)
	END'

	--Изменено. Расчёт покупок в будни/выходные. Расчёт фактической скидки. 
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = NULL,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL);
		SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL);
		SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
		SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
		SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator);
		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) >= 10
		)
		SELECT @moreTenBuys = COUNT(number) FROM CTE;

		WITH CTE AS
		(
			SELECT
				cd.number
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			GROUP BY
				cd.number
			HAVING
				COUNT(ce.id) = 1
		)
		SELECT @withOneBuy = COUNT(number) FROM CTE;

		SELECT 			
			@avgCheque = COALESCE(AVG(amount), 0)
		FROM 
			cheque 
		WHERE 
			partner IN (SELECT id FROM partner WHERE operator = @operator)
			AND (refund = 0 OR refund IS NULL);

		SELECT 
			@gain = COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0)
		FROM 
			cheque 
		WHERE 
			partner IN (SELECT id FROM partner WHERE operator = @operator);

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2),  @buyWeekdayQty NUMERIC(9,2), @buyWeekoffQty NUMERIC(9,2), @buyQty NUMERIC(9,2);

		WITH cte AS
		(
			SELECT	
				SUM(ce.amount) AS chequeSum,
				DATEPART(WEEKDAY, ce.proctime) AS dayweek
			FROM
				cheque AS ce
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
			GROUP BY
				DATEPART(WEEKDAY, ce.proctime)
		)
		SELECT	
			@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
			@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

		WITH cte AS
		(
			SELECT
				COUNT(id) chequeQty,
				DATEPART(WEEKDAY, ce.proctime) AS dayweek
			FROM
				cheque AS ce
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (refund = 0 OR refund IS NULL)
			GROUP BY
				DATEPART(WEEKDAY, ce.proctime)
		)
		SELECT
			@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
			@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

		SELECT @buyQty = COUNT(id) FROM cheque WHERE partner IN (SELECT id FROM partner WHERE operator = @operator) AND (refund IS NULL OR refund = 0);

		SELECT @chequeSum = COALESCE(SUM(amount), 0) FROM cheque WHERE partner IN (SELECT id FROM partner WHERE operator = @operator);

		IF(@buyQty > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		SELECT @addedBonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL);

		SELECT @redeemedBonus = COALESCE((-1)*SUM(bonus), 0) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL);

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		SET @addedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL));

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		SET @redeemedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus < 0 AND (cheque IS NOT NULL OR source = 1) AND (refund = 0 OR refund IS NULL))

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		IF(@addedBonus > 0)
		BEGIN
			SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
		END
		ELSE
		BEGIN
			SET @avgDiscount = 0
		END
	END'

END ELSE IF @version = 359 BEGIN
	SELECT '3.60 20171226 Смирнов'

	--Изменено. Возвращается наименование товара из чека, сопоставленное коду товара, если есть. Фильтрация бонуса по чеку перенесена в соединение
	IF OBJECT_ID('ChequeItems') IS NOT NULL DROP PROCEDURE ChequeItems
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeItems @cheque INT = NULL
	AS
	BEGIN
		SELECT 
			COALESCE(gs.name, im.code),
			im.price,
			quantity,
			amount,
			paidbybonus,
			bs.bonus AS addedBonus
		FROM
			item AS im
			LEFT JOIN bonus AS bs ON im.id = bs.item AND bs.cheque = @cheque
			LEFT JOIN goods AS gs ON im.code = gs.code
		WHERE
			im.cheque = @cheque
	END'

	--Добавлено. Запись сообщения в таблицу message.
	IF OBJECT_ID('ClientSetSendPassword') IS NOT NULL DROP PROCEDURE ClientSetSendPassword
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientSetSendPassword @operator SMALLINT = NULL,
		@client INT = NULL,
		@phone BIGINT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @digit INT = NULL,
				@smsusername NVARCHAR(20) = NULL, 
				@smspassword NVARCHAR(20) = NULL, 
				@smssender NVARCHAR(20) = NULL, 
				@smsprovider NVARCHAR(20) = NULL,
				@text NVARCHAR(200) = NULL,
				@clientpassword NVARCHAR(20) = NULL		

		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF NOT EXISTS(SELECT client FROM clientoperator WHERE client = @client AND operator = @operator AND phone = @phone)
		BEGIN
			SET @errormessage = N''Не найден указанный клиент у указанного оператора''
			RETURN(2)
		END

		SELECT @clientpassword = password FROM clientoperator WHERE phone = @phone AND client = @client AND operator = @operator
		IF @clientpassword IS NOT NULL
		BEGIN
			RETURN(0)
		END

		SELECT @digit = FLOOR(RAND() * POWER(CAST(10 as BIGINT), 8))
		SET @clientpassword = CAST(@digit AS NVARCHAR(20))
		SET @smsprovider = ''greensms''
		SELECT @smsprovider = smsprovider, @smsusername = smsusername, @smspassword = smspassword, @smssender = smssender FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN
			SELECT @smsusername = value FROM parameter WHERE name = ''smsusername''
			SELECT @smspassword = value FROM parameter WHERE name = ''smspassword''
			SELECT @smssender = value FROM parameter WHERE name = ''smssender''
		END		
		UPDATE clientoperator SET password = @clientpassword WHERE client = @client AND operator = @operator
		SELECT @text = REPLACE(value, N''{0}'', @clientpassword) FROM parameter WHERE operator = @operator AND name = N''smspaternpassword''
		IF @smsprovider = ''greensms''
			EXEC SmsSendGreenSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
		ELSE IF @smsprovider = ''terasms''
			EXEC SmsSendTeraSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
		INSERT INTO message (client, text, rectime, phone, status, provider, operator) VALUES (@client, @text, GETDATE(), @phone, 1, @smsprovider, @operator)
	END'

	--Добавлено. Проверка на наличие ошибок при добавлении карты. Изменён код ошибки в случае, если карта принадлежит другому участнику.
	IF OBJECT_ID('CardActivate', 'P') IS NOT NULL DROP PROCEDURE CardActivate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE CardActivate @card BIGINT = NULL, 
		@phone BIGINT = NULL, 
		@code NVARCHAR(10) = NULL, 
		@operator SMALLINT = NULL, 
		@client INT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @result INT		
		IF((@card = 0 OR @card IS NULL) AND @client > 0)
		BEGIN
			IF (EXISTS(SELECT number FROM card WHERE @client = @client AND operator = @operator))
			BEGIN
				UPDATE card SET status = 0 WHERE client = @client AND operator = @operator
				SELECT @phone = phone FROM clientoperator WHERE client = @client AND operator = @operator
				EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
				EXECUTE @result = ClientConfirm @phone = @phone, @code = @code, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT
				IF @result <> 0
				BEGIN
					RETURN(@result)
				END				
			END
			ELSE
			BEGIN
				SET @errormessage = N''У указанного клиента отсутствует карта''
				RETURN(2)
			END
		END
		ELSE
		BEGIN			
			IF NOT EXISTS(SELECT number FROM phone WHERE number = @phone)
			BEGIN
				SET @errormessage = N''Номер телефона не найден''
				RETURN(1)
			END
		
			EXECUTE @result = ClientConfirm @phone = @phone, @code = @code, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT
			IF @result <> 0
			BEGIN
				RETURN(@result)
			END
						
			IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
			BEGIN
				SET @errormessage = N''Указанный номер карты не найден''
				RETURN(3)
			END
		
			SELECT @client = client FROM clientoperator WHERE phone = @phone AND operator = @operator

			--Если не зарегистрирован, то регистрируем
			IF(@client IS NULL)
			BEGIN
				EXEC @result = ClientAdd @phone = @phone OUTPUT, @card = @card OUTPUT, @client = @client OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator, @agreepersonaldata = 1
				IF @result <> 0
				BEGIN
					RETURN(@result)
				END
			END		

			IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NOT NULL)
			BEGIN
				IF NOT EXISTS(SELECT number FROM card WHERE number = @card AND client = @client)
				BEGIN
					SET @errormessage = N''Указанный номер карты принадлежит другому клиенту''
					RETURN(5)
				END
				ELSE
				BEGIN
					UPDATE card SET status = 0 WHERE number = @card
					--Высылаем пароль
					EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
					RETURN(@result)
				END
			END

			IF EXISTS(SELECT number FROM card WHERE number = @card AND client IS NULL)
			BEGIN
				EXEC @result = ClientAddCard @client = @client, @card = @card, @errormessage = @errormessage OUTPUT
				IF @result <> 0
				BEGIN
					RETURN(@result)
				END
				EXEC @result = ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
				RETURN (@result)
			END
		END
	END'

	--Добавлено. Возвращаются все ТТ, кроме Анкета_офис. Анкета_офис предназначена для регистрации через сайт или создание учётной записи из lc-manager
	IF OBJECT_ID('OperatorGetPos') IS NOT NULL DROP PROCEDURE OperatorGetPos
	EXEC sp_executesql @statement = N'CREATE PROCEDURE OperatorGetPos @operator SMALLINT = NULL,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			rn.name AS region,
			cy.name AS city,
			ps.address AS posaddress
		FROM
			pos AS ps
			LEFT JOIN city AS cy ON ps.city = cy.id
			LEFT JOIN region AS rn ON cy.region = rn.id
		WHERE
			partner in (SELECT id FROM partner WHERE operator = @operator)
			AND ps.name <> N''Анкета_офис''
	END'

	--Добавлено. Проверка статуса карты (заблокирована или нет). Привязка новой карты к клиенту. Удаление записи о клиенте у деактивируемой карты.
	IF OBJECT_ID('CardMerge') IS NOT NULL DROP PROCEDURE CardMerge
	EXEC sp_executesql @statement = N'create procedure CardMerge
	@active BIGINT = NULL,
	@merged BIGINT = NULL,
	@noblock BIT = NULL,
	@noactivate BIT = NULL,
	@freecard BIT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @mergedoperator SMALLINT = NULL, @activeoperator SMALLINT = NULL, @mergedclient INT = NULL, @activeclient INT = NULL, @bonus NUMERIC(9,2) = NULL, @activestatus TINYINT = NULL
	IF @active = 0 SET @active = NULL IF @merged = 0 SET @merged = NULL IF @noblock = 0 SET @noblock = NULL IF @noactivate = 0 SET @noactivate = NULL IF @freecard = 0 SET @freecard = NULL
	IF @merged IS NULL BEGIN SET @errormessage = ''Номер Объединяемой карты не указан'' RETURN (1) END
	IF @active IS NULL BEGIN SET @errormessage = ''Номер Остающейся карты не указан'' RETURN (2) END
	IF @active = @merged BEGIN SET @errormessage = ''Номера карт не должны совпадать'' RETURN (3) END
	SELECT @merged = number, @mergedoperator = operator, @mergedclient = client, @bonus = balance FROM card WHERE number = @merged
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Номер Объединяемой карты не найден'' RETURN (4) END
	SELECT @active = number, @activeoperator = operator, @activeclient = client, @activestatus = status FROM card WHERE number = @active
	IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Номер Остающейся карты не найден'' RETURN (5) END
	IF @mergedoperator != @activeoperator BEGIN SET @errormessage = ''Номера карт должны относиться к одному Оператору ПЛ'' RETURN (6) END
	IF @freecard IS NULL IF @mergedclient IS NULL OR @activeclient IS NULL OR @mergedclient != @activeclient BEGIN SET @errormessage = N''Номера карт должны принадлежать одному Клиенту'' RETURN (7) END
	IF @activestatus = 1
	BEGIN
		SET @errormessage = N''Нельзя активировать заблокированную карту''
		RETURN(8)
	END
	UPDATE bonus SET card = @active WHERE card = @merged -- замена номера карты в бонусах, балансы карт автоматически пересчитываются
	INSERT INTO merging (merged, merging, time) VALUES(@merged, @active, GETDATE()) -- добавление записи о слиянии в историю слияния карт
	IF @noblock IS NULL UPDATE card SET card = @active, status = 1, client = NULL WHERE number = @merged -- сливаемая карта привязывается к остающейся, блокировка деактивируемой карты
	ELSE UPDATE card SET card = @active, client = NULL WHERE number = @merged -- сливаемая карта привязывается к остающейся
	IF @noactivate IS NULL IF @activestatus > 0 UPDATE card SET status = 0 WHERE number = @active -- на всякий случай активируем активную
	UPDATE card SET free = 0, client = @mergedclient WHERE number = @active
	RETURN (0)'

	--Изменено. Удалена передача параметров @noblock и @noactivate. Добавлена проверка на наличие ошибок при выполнении слияния карт и возврат кода ошибки в случае, если ошибка произошла.
	IF OBJECT_ID('ClientAddCard') IS NOT NULL DROP PROCEDURE ClientAddCard
	EXEC sp_executesql @statement = N'create procedure ClientAddCard
	@client INT = NULL,
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @clientcard BIGINT = NULL, @cardclient INT = NULL, @cardend INT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @clientoperator SMALLINT = NULL, @cardoperator SMALLINT = NULL, @clientvirtual BIT = NULL, @cardvirtual BIT = NULL
	IF @client = 0 SET @client = NULL IF @card = 0 SET @card = NULL IF @partner = 0 SET @partner = NULL
	IF @client IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Клиента'' RETURN(11) END
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер присоединяемой карты'' RETURN(12) END
	EXEC @result = Identify @client = @client OUTPUT, @card = @clientcard OUTPUT, @operator = @clientoperator OUTPUT, @virtual = @clientvirtual OUTPUT, @partner = @partner, @errormessage = @errormessage OUTPUT
	IF @result != 0 RETURN(@result)
	EXEC @result = Identify @client = @cardclient OUTPUT, @card = @card OUTPUT, @operator = @cardoperator OUTPUT, @virtual = @cardvirtual OUTPUT, @partner = @partner, @errormessage = @errormessage OUTPUT
	IF @result != 0 RETURN(@result)
	IF @cardclient IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(13) END
	EXEC @result = CardMerge @active = @card, @merged = @clientcard, @freecard = 1, @errormessage = @errormessage OUTPUT -- слияние с оставлением статусов карт как есть
	IF @result != 0 RETURN(@result)
	RETURN (0)'
	
	
END ELSE IF @version = 360 BEGIN
	SELECT '3.61 20171228 Медянин'
	
	-- Добавлены ссылка каталога на торговую точку, кроме партнера, и наименование каталога
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'pos' AND id = (SELECT id FROM sysobjects WHERE name = 'catalog'))
		ALTER TABLE catalog ADD pos SMALLINT
	IF NOT EXISTS(select id from sysobjects where name = 'FK_catalog_pos') 
		ALTER TABLE catalog WITH CHECK ADD CONSTRAINT FK_catalog_pos FOREIGN KEY(pos) REFERENCES pos (id)
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'name' AND id = (SELECT id FROM sysobjects WHERE name = 'catalog'))
		ALTER TABLE catalog ADD name NVARCHAR(50)
	
	-- Добавлена ссылка бонусного правила на торговую точку
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'pos' AND id = (SELECT id FROM sysobjects WHERE name = 'chequerule'))
		ALTER TABLE chequerule ADD pos SMALLINT
	IF NOT EXISTS(select id from sysobjects where name = 'FK_chequerule_pos') 
		ALTER TABLE chequerule WITH CHECK ADD CONSTRAINT FK_chequerule_pos FOREIGN KEY(pos) REFERENCES pos (id)
	
	-- Добавлена ссылка списка артикулов на торговую точку
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'pos' AND id = (SELECT id FROM sysobjects WHERE name = 'itemlist'))
		ALTER TABLE itemlist ADD pos SMALLINT
	IF NOT EXISTS(select id from sysobjects where name = 'FK_itemlist_pos') 
		ALTER TABLE itemlist WITH CHECK ADD CONSTRAINT FK_itemlist_pos FOREIGN KEY(pos) REFERENCES pos (id)
	
	-- Код в таблице товаров уже не уникальный, индекс с учетом каталога
	IF EXISTS(select id from sysindexes where name = 'IX_goods')
		DROP INDEX IX_goods ON goods
	IF NOT EXISTS(select id from sysindexes where name = 'IX_goods_catalogcode')
		CREATE INDEX IX_goods_catalogcode ON goods (catalog, code)
	
	-- В процедуру расчета чеков добавлен входной параметр id ТТ и учет его наличия в бонусном правиле
	IF OBJECT_ID('_BonusCheque') IS NOT NULL DROP PROCEDURE _BonusCheque
	EXEC sp_executesql @statement = N'CREATE PROCEDURE _BonusCheque
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@bonus NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@chequetime DATETIME = NULL,
	@item INT = NULL,
	@birthdate DATE = NULL,
	@nowrite BIT = NULL,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN (1) END
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан партнер'' RETURN (2) END
	IF @pos IS NULL BEGIN SET @errormessage = ''Не задана торговая точка'' RETURN (3) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма'' RETURN (4) END
	IF @cheque IS NULL AND @nowrite IS NULL BEGIN SET @errormessage = ''Не задан чек'' RETURN (5) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN (6) END
	IF @amount IS NULL SET @amount = 0 IF @paidbybonus IS NULL SET @paidbybonus = 0 SET @bonus = 0
	DECLARE @chequerule SMALLINT, @interest NUMERIC(9,2), @fixed NUMERIC(9,2), @begdate DATE, @enddate DATE, @operator SMALLINT = NULL, @cardlevel SMALLINT = NULL, @level SMALLINT = NULL, @nopaidbybonus BIT = NULL, @expdays SMALLINT = NULL, @expirydate DATE = NULL, @active BIT = NULL, @actdays TINYINT = NULL, @cardtype SMALLINT = NULL, @type SMALLINT = NULL, @match BIT = 1, @rulepartner SMALLINT = NULL, @rulepos SMALLINT = NULL, @rulecode NVARCHAR(10) = NULL, @begweekday TINYINT = NULL, @endweekday TINYINT = NULL, @begtime TIME(0) = NULL, @endtime TIME(0) = NULL, @weekday TINYINT = NULL, @time TIME(0) = NULL, @stop BIT = NULL, @minsum NUMERIC(9,2), @maxsum NUMERIC(9,2), @friendcard BIGINT = NULL, @friend BIT = NULL, @birthday BIT = NULL, @chequedate DATE = NULL, @rulebonus NUMERIC(9,2) = NULL, @count INT = 0, @i INT = 0, @itemlist SMALLINT = NULL, @itemexclude BIT = NULL, @birthdaybefore TINYINT = NULL, @birthdayafter TINYINT = NULL
	SET @chequedate = @chequetime
	SELECT @operator = operator FROM partner WHERE id = @partner
	SELECT @cardlevel = level, @cardtype = type, @friendcard = friendcard FROM card WHERE number = @card
	CREATE TABLE #tBonusCheque (id INT IDENTITY(1,1) PRIMARY KEY, chequerule SMALLINT, interest NUMERIC(9,2), fixed NUMERIC(9,2), begdate DATE, enddate DATE, level SMALLINT, expdays SMALLINT, actdays SMALLINT, nopaidbybonus BIT, cardtype SMALLINT, partner SMALLINT, pos SMALLINT, code NVARCHAR(10), begweekday TINYINT, endweekday TINYINT, begtime TIME(0), endtime TIME(0), stop BIT, minsum NUMERIC(9,2), maxsum NUMERIC(9,2), friend BIT, birthday BIT, itemlist SMALLINT, itemexclude BIT, birthdaybefore TINYINT, birthdayafter TINYINT)
	INSERT INTO #tBonusCheque (chequerule, interest, fixed, begdate, enddate, level, expdays, actdays, nopaidbybonus, cardtype, partner, pos, code, begweekday, endweekday, begtime, endtime, stop, minsum, maxsum, friend, birthday, itemlist, itemexclude, birthdaybefore, birthdayafter) SELECT cr.id, cr.interest, cr.fixed, cr.begdate, cr.enddate, cr.level, cr.expdays, cr.actdays, cr.nopaidbybonus, cr.cardtype, cr.partner, cr.pos, cr.code, cr.begweekday, cr.endweekday, cr.begtime, cr.endtime, cr.stop, cr.minsum, cr.maxsum, cr.friend, cr.birthday, cr.itemlist, il.exclude, cr.birthdaybefore, cr.birthdayafter FROM chequerule cr LEFT JOIN itemlist il ON cr.itemlist = il.id WHERE cr.active = 1 AND (cr.partner = @partner OR cr.operator = @operator) ORDER BY cr.priority
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @chequerule = chequerule, @interest = interest, @fixed = fixed, @begdate = begdate, @enddate = enddate, @level = level, @expdays = expdays, @actdays = actdays, @nopaidbybonus = nopaidbybonus, @type = cardtype, @rulepartner = partner, @rulepos = pos, @rulecode = code, @begweekday = begweekday, @endweekday = endweekday, @begtime = begtime, @endtime = endtime, @stop = stop, @minsum = minsum, @maxsum = maxsum, @friend = friend, @birthday = birthday, @itemlist = itemlist, @itemexclude = itemexclude, @birthdaybefore = birthdaybefore, @birthdayafter = birthdayafter FROM #tBonusCheque WHERE id = @i
		SET @rulebonus = 0 SET @match = 1
		IF @nowrite = 0 SET @nowrite = NULL IF @itemexclude = 0 SET @itemexclude = NULL
		IF @expdays IS NULL SET @expdays = 365 SET @expirydate = GETDATE() + @expdays
		SET @active = NULL IF @actdays IS NULL OR @actdays = 0 SET @active = 1
		SET @weekday = DATEPART(DW, @chequetime - 1)
		IF @weekday = 0 SET @weekday = 7
		IF @birthdaybefore IS NULL SET @birthdaybefore = 0 IF @birthdayafter IS NULL SET @birthdayafter = 0
		SET @time = @chequetime
		IF @match = 1 AND @rulepartner IS NOT NULL
			IF NOT @partner = @rulepartner
				SET @match = 0
		IF @match = 1 AND @rulepos IS NOT NULL
			IF NOT @pos = @rulepos
				SET @match = 0
		IF @match = 1 AND @begdate IS NOT NULL
			IF NOT @chequetime >= @begdate
				SET @match = 0
		IF @match = 1 AND @enddate IS NOT NULL
			IF NOT @chequetime < DATEADD(DAY, 1, @enddate)
				SET @match = 0
		IF @match = 1 BEGIN
			IF @rulecode IS NOT NULL BEGIN
				IF @code IS NULL
					SET @match = 0
				ELSE BEGIN
					IF NOT @code = @rulecode
						SET @match = 0
				END
			END
		END
		IF @match = 1 BEGIN
			IF @itemlist IS NOT NULL
				IF @itemexclude IS NULL BEGIN
					IF @code IS NULL
						SET @match = 0
					ELSE
						IF NOT EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
				END ELSE
					IF @code IS NOT NULL
						IF EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
		END
		IF @match = 1 AND @begweekday IS NOT NULL
			IF @weekday < @begweekday
				SET @match = 0
		IF @match = 1 AND @endweekday IS NOT NULL
			IF @weekday > @endweekday
				SET @match = 0
		IF @match = 1 AND @begtime IS NOT NULL
			IF @time < @begtime
				SET @match = 0
		IF @match = 1 AND @endtime IS NOT NULL
			IF @time > @endtime
				SET @match = 0
		IF @match = 1 AND @minsum IS NOT NULL
			IF @amount < @minsum
				SET @match = 0
		IF @match = 1 AND @maxsum IS NOT NULL
			IF @amount > @maxsum
				SET @match = 0
		IF @match = 1 AND @level IS NOT NULL
			IF @cardlevel IS NOT NULL BEGIN
				IF NOT @cardlevel = @level
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @type IS NOT NULL
			IF @cardtype IS NOT NULL BEGIN
				IF NOT @cardtype = @type
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @birthday IS NOT NULL
			IF @birthdate IS NULL
				SET @match = 0
			ELSE IF @chequedate IS NULL
				SET @match = 0
			ELSE
				IF @chequedate < DATEADD(DAY, -@birthdaybefore, @birthdate) OR @chequedate > DATEADD(DAY, @birthdayafter, @birthdate)
					SET @match = 0
		IF @match = 1 BEGIN
			IF @interest IS NOT NULL BEGIN
				IF @nopaidbybonus IS NULL OR @nopaidbybonus = 0
					SET @rulebonus = @rulebonus + @amount * @interest / 100
				ELSE
					SET @rulebonus = @rulebonus + (@amount - @paidbybonus) * @interest / 100
			END
			IF @fixed IS NOT NULL SET @rulebonus = @rulebonus + @fixed
			IF @friend IS NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@card, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 1, @item)
			ELSE IF @friendcard IS NOT NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@friendcard, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 8, @item)
			SET @bonus = @bonus + @rulebonus
		END
		IF @match = 1 AND @stop = 1
			BREAK
	END
	DROP TABLE #tBonusCheque
	RETURN (0)'
	
	-- В триггер чеков добавлен идентификатор ТТ при вызове расчета бонусов
	IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'tCheque')) DROP TRIGGER tCheque
	EXEC sp_executesql @statement = N'CREATE TRIGGER tCheque ON cheque AFTER INSERT, DELETE, UPDATE AS
	DECLARE @id_old INT, @id_new INT, @card_old BIGINT, @card_new BIGINT, @partner_old SMALLINT, @partner_new SMALLINT, @amount_old NUMERIC(9,2), @amount_new NUMERIC(9,2), @paidbybonus_old NUMERIC(9,2), @paidbybonus_new NUMERIC(9,2), @amount NUMERIC(9,2), @paidbybonus NUMERIC(9,2), @refund_old BIT, @refund_new BIT, @operator SMALLINT, @quantity SMALLINT, @client INT, @norules_old BIT, @norules_new BIT, @chequetime_old DATETIME, @chequetime_new DATETIME, @birthdate DATE = NULL, @pos_old SMALLINT, @pos_new SMALLINT
	DECLARE tCheque CURSOR LOCAL FAST_FORWARD FOR SELECT d.id AS id_old, i.id AS id_new, d.card AS card_old, i.card AS card_new, d.partner AS partner_old, i.partner AS partner_new, d.pos AS pos_old, i.pos AS pos_new, d.amount AS amount_old, i.amount AS amount_new, d.paidbybonus AS paidbybonus_old, i.paidbybonus AS paidbybonus_new, d.refund AS refund_old, i.refund AS refund_new, d.norules AS norules_old, i.norules AS norules_new, d.chequetime AS chequetime_old, i.chequetime AS chequetime_new FROM deleted d FULL JOIN inserted i ON d.id = i.id
	OPEN tCheque
	FETCH NEXT FROM tCheque INTO @id_old, @id_new, @card_old, @card_new, @partner_old, @partner_new, @pos_old, @pos_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @refund_old, @refund_new, @norules_old, @norules_new, @chequetime_old, @chequetime_new
	WHILE @@FETCH_STATUS = 0 BEGIN
		SET @operator = NULL IF @partner_old IS NOT NULL SELECT @operator = operator FROM partner WHERE id = @partner_old ELSE SELECT @operator = operator FROM partner WHERE id = @partner_new
		SET @client = NULL IF @card_old IS NOT NULL SELECT @client = client FROM card WHERE number = @card_old ELSE SELECT @client = client FROM card WHERE number = @card_new
		SET @birthdate = NULL SELECT @birthdate = birthdate FROM clientoperator WHERE client = @client AND operator = @operator
		IF @id_old IS NOT NULL BEGIN
			IF @id_new IS NOT NULL BEGIN
				IF @card_old = @card_new BEGIN
					IF @amount_new != @amount_old BEGIN
						SET @amount = @amount_new - @amount_old
						SET @paidbybonus = @paidbybonus_new - @paidbybonus_old
						IF @norules_new IS NULL OR @norules_new = 0
							EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @pos = @pos_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @id_old, @refund = @refund_old, @chequetime = @chequetime_old, @birthdate = @birthdate
						IF @operator IS NULL
							UPDATE client SET purchasesum = purchasesum + @amount WHERE id = @client
						ELSE
							UPDATE card SET purchasesum = purchasesum + @amount WHERE number = @card_new
					END
				END ELSE BEGIN
					SET @amount = - @amount_old
					SET @paidbybonus = @paidbybonus_old
					IF @norules_old IS NULL OR @norules_old = 0
						EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @pos = @pos_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @id_old, @refund = @refund_old, @chequetime = @chequetime_old, @birthdate = @birthdate
					IF @norules_new IS NULL OR @norules_new = 0
						EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @pos = @pos_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @id_new, @refund = @refund_new, @chequetime = @chequetime_new, @birthdate = @birthdate
					SET @quantity = 1 IF @refund_old = 1 BEGIN SET @amount = - @amount_old SET @quantity = -1 END
					IF @operator IS NULL
						UPDATE client SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE id = @client
					ELSE
						UPDATE card SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE number = @card_old
					SET @operator = NULL SELECT @operator = operator FROM partner WHERE id = @partner_new
					SET @client = NULL SELECT @client = client FROM card WHERE number = @card_new
					SET @quantity = 1 IF @refund_new = 1 SET @quantity = -1
					IF @operator IS NULL
						UPDATE client SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE id = @client
					ELSE
						UPDATE card SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE number = @card_new
				END
			END ELSE BEGIN
				SET @amount = - @amount_old
				SET @paidbybonus = @paidbybonus_old 
				IF @norules_old IS NULL OR @norules_old = 0
					EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @pos = @pos_old, @amount = @amount, @paidbybonus = @paidbybonus, @refund = @refund_old, @chequetime = @chequetime_old, @birthdate = @birthdate
				SET @quantity = 1 IF @refund_old = 1 SET @quantity = -1
				IF @operator IS NULL
					UPDATE client SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE id = @client
				ELSE
					UPDATE card SET purchases = purchases - @quantity, purchasesum = purchasesum - @amount_old WHERE number = @card_old
			END
		END ELSE BEGIN
			IF @norules_new IS NULL OR @norules_new = 0
				EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @pos = @pos_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @id_new, @refund = @refund_new, @chequetime = @chequetime_new, @birthdate = @birthdate
			SET @quantity = 1 IF @refund_new = 1 SET @quantity = -1
			IF @operator IS NULL
				UPDATE client SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE id = @client
			ELSE
				UPDATE card SET purchases = purchases + @quantity, purchasesum = purchasesum + @amount_new WHERE number = @card_new
		END
		FETCH NEXT FROM tCheque INTO @id_old, @id_new, @card_old, @card_new, @partner_old, @partner_new, @pos_old, @pos_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @refund_old, @refund_new, @norules_old, @norules_new, @chequetime_old, @chequetime_new
	END
	CLOSE tCheque'
	
	-- В триггер позиций чека добавлен идентификатор ТТ при вызове расчета бонусов
	IF  EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N'tItem')) DROP TRIGGER tItem
	EXEC sp_executesql @statement = N'CREATE TRIGGER tItem ON item AFTER INSERT, DELETE, UPDATE AS
	DECLARE @id_old INT, @id_new INT, @cheque_old INT, @cheque_new INT, @card_old BIGINT, @card_new BIGINT, @partner_old SMALLINT, @partner_new SMALLINT, @pos_old SMALLINT, @pos_new SMALLINT, @amount_old NUMERIC(9,2), @amount_new NUMERIC(9,2), @paidbybonus_old NUMERIC(9,2), @paidbybonus_new NUMERIC(9,2), @code_old NVARCHAR(10), @code_new NVARCHAR(10), @amount NUMERIC(9,2), @paidbybonus NUMERIC(9,2), @refund_old BIT, @refund_new BIT, @operator SMALLINT, @norules_old BIT, @norules_new BIT, @chequetime_old DATETIME, @chequetime_new DATETIME, @birthdate DATE = NULL, @client INT = NULL
	DECLARE tItem CURSOR LOCAL FAST_FORWARD FOR SELECT d.id AS id_old, i.id AS id_new, d.cheque AS cheque_old, i.cheque AS cheque_new, d.code AS code_old, i.code AS code_new, d.amount AS amount_old, i.amount AS amount_new, d.paidbybonus AS paidbybonus_old, i.paidbybonus AS paidbybonus_new, d.norules AS norules_old, i.norules AS norules_new, cd.card AS card_old, ci.card AS card_new, cd.partner AS partner_old, ci.partner AS partner_new, cd.pos AS pos_old, ci.pos AS pos_new, cd.refund AS refund_old, ci.refund AS refund_new, cd.chequetime AS chequetime_old, ci.chequetime AS chequetime_new FROM deleted d FULL JOIN inserted i ON d.id = i.id LEFT JOIN cheque cd ON cd.id = d.cheque LEFT JOIN cheque ci ON ci.id = i.cheque
	OPEN tItem
	FETCH NEXT FROM tItem INTO @id_old, @id_new, @cheque_old, @cheque_new, @code_old, @code_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @norules_old, @norules_new, @card_old, @card_new, @partner_old, @partner_new, @pos_old, @pos_new, @refund_old, @refund_new, @chequetime_old, @chequetime_new
	WHILE @@FETCH_STATUS = 0 BEGIN
		SET @operator = NULL IF @partner_old IS NOT NULL SELECT @operator = operator FROM partner WHERE id = @partner_old ELSE SELECT @operator = operator FROM partner WHERE id = @partner_new
		SET @client = NULL IF @card_old IS NOT NULL SELECT @client = client FROM card WHERE number = @card_old ELSE SELECT @client = client FROM card WHERE number = @card_new
		SET @birthdate = NULL SELECT @birthdate = birthdate FROM clientoperator WHERE client = @client AND operator = @operator
		IF @id_old IS NOT NULL BEGIN
			IF @id_new IS NOT NULL BEGIN
				IF @card_old = @card_new BEGIN
					IF @amount_new != @amount_old BEGIN
						SET @amount = @amount_new - @amount_old
						SET @paidbybonus = @paidbybonus_new - @paidbybonus_old
						IF @norules_new IS NULL OR @norules_new = 0
							EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @pos = @pos_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @cheque_old, @refund = @refund_old, @code = @code_old, @chequetime = @chequetime_old, @item = @id_old, @birthdate = @birthdate
					END
				END ELSE BEGIN
					SET @amount = - @amount_old
					SET @paidbybonus = @paidbybonus_old
					IF @norules_old IS NULL OR @norules_old = 0
						EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @pos = @pos_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @cheque_old, @refund = @refund_old, @code = @code_old, @chequetime = @chequetime_old, @item = @id_old, @birthdate = @birthdate
					IF @norules_new IS NULL OR @norules_new = 0
						EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @pos = @pos_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @cheque_new, @refund = @refund_new, @code = @code_new, @chequetime = @chequetime_new, @item = @id_new, @birthdate = @birthdate
				END
			END ELSE BEGIN
				SET @amount = - @amount_old
				SET @paidbybonus = @paidbybonus_old 
				IF @norules_old IS NULL OR @norules_old = 0
					EXECUTE _BonusCheque @card = @card_old, @partner = @partner_old, @pos = @pos_old, @amount = @amount, @paidbybonus = @paidbybonus, @cheque = @cheque_old, @refund = @refund_old, @code = @code_old, @chequetime = @chequetime_old, @item = @id_old, @birthdate = @birthdate
			END
		END ELSE BEGIN
			IF @norules_new IS NULL OR @norules_new = 0
				EXECUTE _BonusCheque @card = @card_new, @partner = @partner_new, @pos = @pos_new, @amount = @amount_new, @paidbybonus = @paidbybonus_new, @cheque = @cheque_new, @refund = @refund_new, @code = @code_new, @chequetime = @chequetime_new, @item = @id_new, @birthdate = @birthdate
		END
		FETCH NEXT FROM tItem INTO @id_old, @id_new, @cheque_old, @cheque_new, @code_old, @code_new, @amount_old, @amount_new, @paidbybonus_old, @paidbybonus_new, @norules_old, @norules_new, @card_old, @card_new, @partner_old, @partner_new, @pos_old, @pos_new, @refund_old, @refund_new, @chequetime_old, @chequetime_new
	END
	CLOSE tItem'	
	
	-- В процедуре добавления чека проверяется, является ли товар исключением, с учетом того, что списки товаров теперь могут быть разбиты по торговым точкам
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL, @calcbalance NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'
	
	-- В процедуре импорта товарного каталога теперь код торговой точки и ссылка на каталог
	IF OBJECT_ID('GoodsFrontol5Update') IS NOT NULL DROP PROCEDURE GoodsFrontol5Update
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE GoodsFrontol5Update
	@partner SMALLINT = NULL,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@pos NVARCHAR(10) = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, @i INT = 0, @count INT = 0, @id INT = NULL, @code INT = NULL, @parentid INT = NULL, @name NVARCHAR(100) = NULL, @goodsgroup SMALLINT = NULL, @parentcode INT = NULL, @noredeem BIT = NULL, @nocharge BIT = NULL, @itemlist SMALLINT = NULL, @posid SMALLINT = NULL, @partnername NVARCHAR(50) = NULL, @catalog SMALLINT = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не заполнен идентификатор Партнера'' RETURN(1) END
	IF @pos IS NULL BEGIN SET @errormessage = ''Не заполнен код торговой точки'' RETURN(2) END
	IF NOT EXISTS (SELECT * FROM partner WHERE id = @partner) BEGIN SET @errormessage = ''Партнер с заданным идентификатором отсутствует'' RETURN(3) END
	SELECT @partnername = name FROM partner WHERE id = @partner
	SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
	IF @posid IS NULL BEGIN SET @errormessage = ''Торговая точка у заданного Партнера с заданным кодом отсутствует'' RETURN(4) END
	SELECT @itemlist = id FROM itemlist WHERE partner = @partner AND pos = @posid AND exclude = 1 AND name = ''Алкоголь и табак''
	IF @itemlist IS NULL BEGIN
		INSERT INTO itemlist (partner, pos, exclude, noredeem, name) VALUES (@partner, @posid, 1, 1, ''Алкоголь и табак'')
		SET @itemlist = SCOPE_IDENTITY()
	END
	SELECT @catalog = id FROM catalog WHERE partner = @partner AND pos = @posid
	IF @catalog IS NULL BEGIN
		INSERT INTO catalog (partner, pos, name) VALUES (@partner, @posid, @partnername + '' '' + @pos)
		SET @catalog = SCOPE_IDENTITY()
	END
	CREATE TABLE #tSprt (i INT IDENTITY(1,1) PRIMARY KEY, id INT, code INT, parentid INT, name NVARCHAR(100), parentcode INT)
	INSERT INTO #tSprt (id, code, parentid, name) SELECT id, code, parentid, name FROM sprt WHERE hierlevel = 1
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @id = id, @code = code, @parentid = parentid, @name = name FROM #tSprt WHERE i = @i
		IF @code IS NULL CONTINUE
		IF EXISTS (SELECT id FROM goodsgroup WHERE catalog = @catalog AND code = @code)
			UPDATE goodsgroup SET name = @name, partner = @partner, goodsgroup = NULL WHERE catalog = @catalog AND code = @code
		ELSE
			INSERT INTO goodsgroup (catalog, code, name, partner) VALUES (@catalog, @code, @name, @partner)
		IF @name IN (''Алкогольные напитки'', ''Табачные изделия'')
			UPDATE goodsgroup SET noredeem = 1, nocharge = 1 WHERE catalog = @catalog AND code = @code
	END
	TRUNCATE TABLE #tSprt
	INSERT INTO #tSprt (id, code, parentid, name, parentcode) SELECT s.id, s.code, s.parentid, s.name, p.code FROM sprt s LEFT JOIN sprt p ON s.parentid = p.id WHERE s.hierlevel = 2
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @id = id, @code = code, @parentid = parentid, @name = name, @parentcode = parentcode FROM #tSprt WHERE i = @i
		IF @code IS NULL OR @parentcode IS NULL CONTINUE
		SET @parentid = NULL
		SELECT @parentid = id, @nocharge = nocharge, @noredeem = noredeem FROM goodsgroup WHERE catalog = @catalog AND code = @parentcode
		IF @parentid IS NULL CONTINUE
		IF EXISTS (SELECT id FROM goodsgroup WHERE goodsgroup = @parentid AND code = @code)
			UPDATE goodsgroup SET name = @name, catalog = @catalog, partner = @partner, nocharge = @nocharge, noredeem = @noredeem WHERE goodsgroup = @parentid AND code = @code
		ELSE
			INSERT INTO goodsgroup (catalog, goodsgroup, code, name, nocharge, noredeem, partner) VALUES (@catalog, @parentid, @code, @name, @nocharge, @noredeem, @partner)
	END
	TRUNCATE TABLE #tSprt
	INSERT INTO #tSprt (id, code, parentid, name, parentcode) SELECT s.id, s.code, s.parentid, s.name, p.code FROM sprt s LEFT JOIN sprt p ON s.parentid = p.id WHERE s.hierlevel = 3
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @id = id, @code = code, @parentid = parentid, @name = name, @parentcode = parentcode FROM #tSprt WHERE i = @i
		IF @code IS NULL OR @parentcode IS NULL CONTINUE
		SET @parentid = NULL
		SELECT @parentid = id, @nocharge = nocharge, @noredeem = noredeem FROM goodsgroup WHERE catalog = @catalog AND code = @parentcode
		IF @parentid IS NULL CONTINUE
		IF EXISTS (SELECT code FROM goods WHERE goodsgroup = @parentid AND code = @code)
			UPDATE goods SET name = @name, catalog = @catalog, partner = @partner, nocharge = @nocharge, noredeem = @noredeem WHERE goodsgroup = @parentid AND code = @code
		ELSE
			INSERT INTO goods (catalog, partner, goodsgroup, code, name, nocharge, noredeem) VALUES (@catalog, @partner, @parentid, @code, @name, @nocharge, @noredeem)
		IF @itemlist IS NOT NULL AND @noredeem = 1
			IF NOT EXISTS (SELECT code FROM listitem WHERE itemlist = @itemlist AND code = @code)
				INSERT INTO listitem (itemlist, code) VALUES (@itemlist, @code)
	END
	TRUNCATE TABLE #tSprt
	DROP TABLE #tSprt
 	RETURN(0)'
	
	
END ELSE IF @version = 361 BEGIN
	SELECT '3.62 20180110 Медянин'
	
	-- Исправлена ошибка расчета бонусов в период дня рождения. Не учитывалось, что клиент может родиться и не в год покупки.
	IF OBJECT_ID('_BonusCheque') IS NOT NULL DROP PROCEDURE _BonusCheque
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE _BonusCheque
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@bonus NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@chequetime DATETIME = NULL,
	@item INT = NULL,
	@birthdate DATE = NULL,
	@nowrite BIT = NULL,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN (1) END
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан партнер'' RETURN (2) END
	IF @pos IS NULL BEGIN SET @errormessage = ''Не задана торговая точка'' RETURN (3) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма'' RETURN (4) END
	IF @cheque IS NULL AND @nowrite IS NULL BEGIN SET @errormessage = ''Не задан чек'' RETURN (5) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN (6) END
	IF @amount IS NULL SET @amount = 0 IF @paidbybonus IS NULL SET @paidbybonus = 0 SET @bonus = 0
	DECLARE @chequerule SMALLINT, @interest NUMERIC(9,2), @fixed NUMERIC(9,2), @begdate DATE, @enddate DATE, @operator SMALLINT = NULL, @cardlevel SMALLINT = NULL, @level SMALLINT = NULL, @nopaidbybonus BIT = NULL, @expdays SMALLINT = NULL, @expirydate DATE = NULL, @active BIT = NULL, @actdays TINYINT = NULL, @cardtype SMALLINT = NULL, @type SMALLINT = NULL, @match BIT = 1, @rulepartner SMALLINT = NULL, @rulepos SMALLINT = NULL, @rulecode NVARCHAR(10) = NULL, @begweekday TINYINT = NULL, @endweekday TINYINT = NULL, @begtime TIME(0) = NULL, @endtime TIME(0) = NULL, @weekday TINYINT = NULL, @time TIME(0) = NULL, @stop BIT = NULL, @minsum NUMERIC(9,2), @maxsum NUMERIC(9,2), @friendcard BIGINT = NULL, @friend BIT = NULL, @birthday BIT = NULL, @chequedate DATE = NULL, @rulebonus NUMERIC(9,2) = NULL, @count INT = 0, @i INT = 0, @itemlist SMALLINT = NULL, @itemexclude BIT = NULL, @birthdaybefore TINYINT = NULL, @birthdayafter TINYINT = NULL, @thisbirthdate DATE = NULL
	SET @chequedate = @chequetime
	SELECT @operator = operator FROM partner WHERE id = @partner
	SELECT @cardlevel = level, @cardtype = type, @friendcard = friendcard FROM card WHERE number = @card
	CREATE TABLE #tBonusCheque (id INT IDENTITY(1,1) PRIMARY KEY, chequerule SMALLINT, interest NUMERIC(9,2), fixed NUMERIC(9,2), begdate DATE, enddate DATE, level SMALLINT, expdays SMALLINT, actdays SMALLINT, nopaidbybonus BIT, cardtype SMALLINT, partner SMALLINT, pos SMALLINT, code NVARCHAR(10), begweekday TINYINT, endweekday TINYINT, begtime TIME(0), endtime TIME(0), stop BIT, minsum NUMERIC(9,2), maxsum NUMERIC(9,2), friend BIT, birthday BIT, itemlist SMALLINT, itemexclude BIT, birthdaybefore TINYINT, birthdayafter TINYINT)
	INSERT INTO #tBonusCheque (chequerule, interest, fixed, begdate, enddate, level, expdays, actdays, nopaidbybonus, cardtype, partner, pos, code, begweekday, endweekday, begtime, endtime, stop, minsum, maxsum, friend, birthday, itemlist, itemexclude, birthdaybefore, birthdayafter) SELECT cr.id, cr.interest, cr.fixed, cr.begdate, cr.enddate, cr.level, cr.expdays, cr.actdays, cr.nopaidbybonus, cr.cardtype, cr.partner, cr.pos, cr.code, cr.begweekday, cr.endweekday, cr.begtime, cr.endtime, cr.stop, cr.minsum, cr.maxsum, cr.friend, cr.birthday, cr.itemlist, il.exclude, cr.birthdaybefore, cr.birthdayafter FROM chequerule cr LEFT JOIN itemlist il ON cr.itemlist = il.id WHERE cr.active = 1 AND (cr.partner = @partner OR cr.operator = @operator) ORDER BY cr.priority
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @chequerule = chequerule, @interest = interest, @fixed = fixed, @begdate = begdate, @enddate = enddate, @level = level, @expdays = expdays, @actdays = actdays, @nopaidbybonus = nopaidbybonus, @type = cardtype, @rulepartner = partner, @rulepos = pos, @rulecode = code, @begweekday = begweekday, @endweekday = endweekday, @begtime = begtime, @endtime = endtime, @stop = stop, @minsum = minsum, @maxsum = maxsum, @friend = friend, @birthday = birthday, @itemlist = itemlist, @itemexclude = itemexclude, @birthdaybefore = birthdaybefore, @birthdayafter = birthdayafter FROM #tBonusCheque WHERE id = @i
		SET @rulebonus = 0 SET @match = 1
		IF @nowrite = 0 SET @nowrite = NULL IF @itemexclude = 0 SET @itemexclude = NULL
		IF @expdays IS NULL SET @expdays = 365 SET @expirydate = GETDATE() + @expdays
		SET @active = NULL IF @actdays IS NULL OR @actdays = 0 SET @active = 1
		SET @weekday = DATEPART(DW, @chequetime - 1)
		IF @weekday = 0 SET @weekday = 7
		IF @birthdaybefore IS NULL SET @birthdaybefore = 0 IF @birthdayafter IS NULL SET @birthdayafter = 0
		SET @time = @chequetime
		IF @match = 1 AND @rulepartner IS NOT NULL
			IF NOT @partner = @rulepartner
				SET @match = 0
		IF @match = 1 AND @rulepos IS NOT NULL
			IF NOT @pos = @rulepos
				SET @match = 0
		IF @match = 1 AND @begdate IS NOT NULL
			IF NOT @chequetime >= @begdate
				SET @match = 0
		IF @match = 1 AND @enddate IS NOT NULL
			IF NOT @chequetime < DATEADD(DAY, 1, @enddate)
				SET @match = 0
		IF @match = 1 BEGIN
			IF @rulecode IS NOT NULL BEGIN
				IF @code IS NULL
					SET @match = 0
				ELSE BEGIN
					IF NOT @code = @rulecode
						SET @match = 0
				END
			END
		END
		IF @match = 1 BEGIN
			IF @itemlist IS NOT NULL
				IF @itemexclude IS NULL BEGIN
					IF @code IS NULL
						SET @match = 0
					ELSE
						IF NOT EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
				END ELSE
					IF @code IS NOT NULL
						IF EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
		END
		IF @match = 1 AND @begweekday IS NOT NULL
			IF @weekday < @begweekday
				SET @match = 0
		IF @match = 1 AND @endweekday IS NOT NULL
			IF @weekday > @endweekday
				SET @match = 0
		IF @match = 1 AND @begtime IS NOT NULL
			IF @time < @begtime
				SET @match = 0
		IF @match = 1 AND @endtime IS NOT NULL
			IF @time > @endtime
				SET @match = 0
		IF @match = 1 AND @minsum IS NOT NULL
			IF @amount < @minsum
				SET @match = 0
		IF @match = 1 AND @maxsum IS NOT NULL
			IF @amount > @maxsum
				SET @match = 0
		IF @match = 1 AND @level IS NOT NULL
			IF @cardlevel IS NOT NULL BEGIN
				IF NOT @cardlevel = @level
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @type IS NOT NULL
			IF @cardtype IS NOT NULL BEGIN
				IF NOT @cardtype = @type
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @birthday IS NOT NULL
			IF @birthdate IS NULL
				SET @match = 0
			ELSE IF @chequedate IS NULL
				SET @match = 0
			ELSE BEGIN
				SET @thisbirthdate = CONVERT(DATETIME, 0)
				SET @thisbirthdate = DATEADD(YEAR, YEAR(@chequetime) - 1900, @thisbirthdate)
				SET @thisbirthdate = DATEADD(MONTH, MONTH(@birthdate) - 1, @thisbirthdate)
				SET @thisbirthdate = DATEADD(DAY, DAY(@birthdate) - 1, @thisbirthdate)
				IF DATEDIFF(DAY, @chequetime, @thisbirthdate) > 200 SET @thisbirthdate = DATEADD(YEAR, -1, @thisbirthdate)
				IF DATEDIFF(DAY, @chequetime, @thisbirthdate) < -200 SET @thisbirthdate = DATEADD(YEAR, 1, @thisbirthdate)
				IF @chequedate < DATEADD(DAY, -@birthdaybefore, @thisbirthdate) OR @chequedate > DATEADD(DAY, @birthdayafter, @thisbirthdate)
					SET @match = 0
			END
		IF @match = 1 BEGIN
			IF @interest IS NOT NULL BEGIN
				IF @nopaidbybonus IS NULL OR @nopaidbybonus = 0
					SET @rulebonus = @rulebonus + @amount * @interest / 100
				ELSE
					SET @rulebonus = @rulebonus + (@amount - @paidbybonus) * @interest / 100
			END
			IF @fixed IS NOT NULL SET @rulebonus = @rulebonus + @fixed
			IF @friend IS NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@card, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 1, @item)
			ELSE IF @friendcard IS NOT NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@friendcard, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 8, @item)
			SET @bonus = @bonus + @rulebonus
		END
		IF @match = 1 AND @stop = 1
			BREAK
	END
	DROP TABLE #tBonusCheque
	RETURN (0)'
	
END ELSE IF @version = 362 BEGIN
	SELECT '3.63 20180112 Смирнов'

	--Изменено. Добавлена выборка товара из каталога конкретной ТТ.
	IF OBJECT_ID('ChequeItems') IS NOT NULL DROP PROCEDURE ChequeItems
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ChequeItems @cheque INT = NULL
	AS
	BEGIN
		SELECT 
			COALESCE(gs.name, im.code),
			im.price,
			quantity,
			amount,
			paidbybonus,
			SUM(bs.bonus) AS addedBonus
		FROM
			item AS im
			LEFT JOIN bonus AS bs ON im.id = bs.item AND bs.cheque = @cheque
			LEFT JOIN goods AS gs ON im.code = gs.code
		WHERE
			im.cheque = @cheque
			AND (gs.catalog IN (SELECT id FROM catalog WHERE pos IN (SELECT ps.id FROM pos AS ps INNER JOIN cheque AS ce ON ps.id = ce.pos AND ps.partner = ce.partner WHERE ce.id = @cheque)) OR gs.catalog IS NULL)
		GROUP BY
			COALESCE(gs.name, im.code),
			im.position,
			im.price,
			quantity,
			amount,
			paidbybonus
	END'

	--Изменено. В проверке на отправку письма заменено @email на @emailTo
	IF OBJECT_ID('MessageAdd') IS NOT NULL DROP PROCEDURE MessageAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE MessageAdd
	@client INT = NULL,
	@text NVARCHAR(1000) = NULL,
	@subject NVARCHAR(100) = NULL,
	@email NVARCHAR(100) = NULL,
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	IF @client = 0 SET @client = NULL IF @text = '''' SET @text = NULL IF @subject = '''' SET @subject = NULL IF @email = '''' SET @email = NULL
	IF @text IS NULL BEGIN SET @errormessage = ''Не задан текст сообщения'' RETURN(1) END
	IF @subject IS NULL BEGIN SET @errormessage = ''Не задана заголовок сообщения'' RETURN(2) END
	IF @operator IS NULL BEGIN SET @errormessage = N''Не задан оператор'' RETURN(3) END
	IF @text IS NULL SET @text = ''Текст сообщения в процедуре MessageAdd не заполнен''
	IF @client IS NOT NULL BEGIN INSERT INTO message (client, text, rectime, subject, operator) VALUES (@client, @text, GETDATE(), @subject, @operator) END
	IF @email IS NOT NULL BEGIN INSERT INTO message (email, text, rectime, subject, operator) VALUES (@email, @text, GETDATE(), @subject, @operator) END
	DECLARE @header NVARCHAR(100) = NULL, 
			@emailaddress NVARCHAR(20) = NULL, 
			@emailsender NVARCHAR(20) = NULL, 
			@operatorname NVARCHAR(50) = NULL, 
			@operatorlkuaddress NVARCHAR(200) = NULL,
			@emailto NVARCHAR(50) = NULL
	SELECT @emailsender = emailsender, @emailaddress = emailaddress, @operatorname = ISNULL(name, ''''), @operatorlkuaddress = ISNULL(lkuaddress, ''''), @emailto = email FROM operator WHERE id = @operator
	IF(@emailaddress IS NOT NULL AND @emailsender IS NOT NULL AND @emailTo IS NOT NULL)
		EXEC EmailSendPulse @emailTo = @emailto, @header = @subject, @body = @text, @fromHeader = @emailsender, @from = @emailaddress
	RETURN (0)'

END ELSE IF @version = 363 BEGIN
	SELECT '3.64 20180119 Смирнов'

	--Добавлено. Добавлена выборка с фильтрацией по ТТ и партнёру.
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS
		BEGIN
			IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
			BEGIN
				SET @errormessage = N''Указанный оператор не найден''
				RETURN(1)
			END
			IF (@partner = 0)
			BEGIN
				SET @partner = NULL;
				SET @pos = NULL;
			END
			IF (@pos = 0)
			BEGIN
				SET @pos = NULL;
			END
			IF(@operator IS NOT NULL AND @operator > 0 AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				SELECT
					cr.client,
					COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
					cr.phone,
					COALESCE(cr.email, N''Отсутствует'') AS email,
					cr.birthdate,
					CASE
						WHEN cr.gender = 1 THEN N''Мужской''
						WHEN cr.gender = 0 THEN N''Женский''
						ELSE N''Не указан''
					END AS gender,
					COALESCE(ce.name, N''Клиент''),
					cd.number,
					COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
					cd.fullbalance,
					(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
					(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
					(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
					(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
					(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
					(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
					(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					LEFT JOIN cardtype AS ce ON ce.id = cd.type
					LEFT JOIN level AS ll ON cd.level = ll.id
				WHERE
					cr.operator = @operator
				RETURN(0)
			END
			ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NULL)
			BEGIN
				SELECT
					cr.client,
					COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
					cr.phone,
					COALESCE(cr.email, N''Отсутствует'') AS email,
					cr.birthdate,
					CASE
						WHEN cr.gender = 1 THEN N''Мужской''
						WHEN cr.gender = 0 THEN N''Женский''
						ELSE N''Не указан''
					END AS gender,
					COALESCE(ce.name, N''Клиент''),
					cd.number,
					COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
					cd.fullbalance,
					(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
					(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
					(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
					(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
					(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
					(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
					(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					LEFT JOIN cardtype AS ce ON ce.id = cd.type
					LEFT JOIN level AS ll ON cd.level = ll.id
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
				RETURN(0)
			END
			ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NOT NULL AND @pos > 0)
			BEGIN
				SELECT
					cr.client,
					COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
					cr.phone,
					COALESCE(cr.email, N''Отсутствует'') AS email,
					cr.birthdate,
					CASE
						WHEN cr.gender = 1 THEN N''Мужской''
						WHEN cr.gender = 0 THEN N''Женский''
						ELSE N''Не указан''
					END AS gender,
					COALESCE(ce.name, N''Клиент''),
					cd.number,
					COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
					cd.fullbalance,
					(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
					(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
					(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
					(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
					(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
					(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
					(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					LEFT JOIN cardtype AS ce ON ce.id = cd.type
					LEFT JOIN level AS ll ON cd.level = ll.id
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
				RETURN(0)
			END
			ELSE
			BEGIN
				SET @errormessage = N''Не указаны данные для выборки''
				RETURN(2)
			END
		END'

END ELSE IF @version = 364 BEGIN
	SELECT '3.65 20180122 Смирнов'

	--Изменено. Тексты ошибок.
	IF OBJECT_ID('Identify') IS NOT NULL DROP PROCEDURE Identify
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Identify
	@phone BIGINT = NULL, -- номер телефона, можно передавать не полный номер, а окончание, но тогда либо партнер, либо оператор должны быть заполнены
	@email NVARCHAR(30) = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT, -- номер карты, можно передавать не полный номер, а локальный (без префикса оператора), но тогда либо партнер, либо оператор должны быть заполнены
	@status TINYINT = NULL OUTPUT, -- статус карты
	@virtual BIT = NULL OUTPUT, -- признак виртуальной
	@balance NUMERIC(9,2) = NULL OUTPUT, -- активный баланс заодно
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	DECLARE @cardnumber BIGINT = NULL, @count INT = NULL, @last4 SMALLINT = NULL, @middle2 TINYINT = NULL, @prefix SMALLINT = NULL, @numlen TINYINT = NULL, @maxlocal BIGINT = NULL, @freecard BIT = NULL, @cardoperator SMALLINT = NULL, @rows INT = NULL, @defaultoperator SMALLINT = NULL
	IF @phone = 0 SET @phone = NULL IF @partner = 0 SET @partner = NULL IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL
	IF @operator IS NULL BEGIN -- если не задан идентификатор оператора
		IF @partner IS NULL BEGIN -- если не задан и идентификатор партнера, то идентификатор оператора так и остается пустым, но заранее фиксируется идентификатор оператора по умолчанию
			IF @card IS NOT NULL SELECT @operator = operator FROM card WHERE number = @card
			IF @operator IS NULL BEGIN
				SELECT @defaultoperator = id FROM operator WHERE name = ''Оператор'' -- оператор по умолчанию
				IF @defaultoperator IS NULL BEGIN
					INSERT INTO operator (name) VALUES(''Оператор'')-- если нет - создание
					SET @defaultoperator = SCOPE_IDENTITY()
				END
			END
		END ELSE BEGIN -- оператор не задан, но партнер задан, оперируем им
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @operator IS NULL BEGIN SET @errormessage = ''Заданный идентификатор партнера не найден'' RETURN(1) END -- иначе говорим, что карты с заданным номером нет
		END
	END ELSE
		IF NOT EXISTS (SELECT id FROM operator WHERE id = @operator) BEGIN SET @errormessage = ''Заданный идентификатор Оператора ПЛ не найден'' RETURN(1) END -- проверка, задан ли оператор корректно, если он задан
	IF @card IS NOT NULL BEGIN -- если номер карты, на который надо выйти, уже задан, просто проверка на ее существование
		SET @cardnumber = @card SET @card = NULL
		SET @client = NULL
		SELECT @card = number, @client = client, @status = status, @balance = balance, @cardoperator = operator, @virtual = virtual FROM card WHERE number = @cardnumber
		IF @card IS NOT NULL BEGIN -- если номер карты найден, проверяем на привязку к клиенту и совпадение операторов
			SELECT @freecard = freecard FROM operator WHERE id = @cardoperator
			IF @cardoperator != @operator BEGIN	SET @errormessage = ''Карта другого оператора ПЛ'' RETURN(2) END -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
			ELSE IF @client IS NULL AND (@freecard IS NULL OR @freecard = 0) BEGIN SET @errormessage = ''Карта не привязана к клиенту, оператор не позволяет свободные карты'' RETURN(3) END -- карта может быть не привязана к клиенту только если у оператора разрешены свободные карты
			ELSE RETURN(0) -- если номер карты найден и клиент есть либо можно без него, оставляем номером карты заданный, успешный ответ
		END ELSE BEGIN -- номер карты не найден, может быть, задан локальный номер
			IF @operator IS NULL SET @operator = @defaultoperator -- нет оператора, чтобы работать с локальным номером карты - смотрим у оператора по умолчанию
			ELSE BEGIN
				SELECT @prefix = prefix, @numlen = numlen FROM operator WHERE id = @operator
				IF @prefix IS NOT NULL AND @numlen IS NOT NULL BEGIN
					SET @maxlocal = CONVERT(BIGINT, POWER(10.0, @numlen - LEN(@prefix)))
					IF @cardnumber < @maxlocal BEGIN
						SET @cardnumber = @prefix * @maxlocal + @cardnumber
						SET @client = NULL
						SELECT @card = number, @client = client, @status = status, @balance = balance, @operator = operator FROM card WHERE number = @cardnumber
					END
				END
			END
			IF @card IS NOT NULL BEGIN -- если номер карты найден, проверяем на привязку к клиенту
				SELECT @freecard = freecard FROM operator WHERE id = @operator
				IF @client IS NULL AND (@freecard IS NULL OR @freecard = 0) BEGIN SET @errormessage = ''Карта не привязана к клиенту, оператор не позволяет свободные карты'' RETURN(3) END -- карта может быть не привязана к клиенту только если у оператора разрешены свободные карты
				ELSE RETURN(0) -- если номер карты найден и клиент есть либо можно без него, оставляем номером карты заданный, успешный ответ
			END ELSE BEGIN SET @errormessage = ''Номер карты не найден'' RETURN(4) END -- иначе говорим, что карты с заданным номером нет
		END
	END
	IF @client IS NULL BEGIN -- если идентификатор клиента не задан - выходим на него всеми возможными средствами
		IF @phone IS NOT NULL BEGIN -- если не задан номер карты, но задан номер телефона - ищем по нему
			IF @phone > 9000000000 BEGIN-- если задан полный номер телефона
				SELECT @client = client FROM phone WHERE number = @phone -- ищем клиента, на которого ссылается полный телефон
				IF @client IS NULL BEGIN SET @errormessage = ''Не существует клиента с заданным номером телефона'' RETURN(5) END -- если клиент не найден
			END ELSE BEGIN -- если задан неполный номер телефона
				IF @operator IS NULL SET @operator = @defaultoperator -- нет оператора, чтобы работать с неполным номером телефона - смотрим у оператора по умолчанию
				SET @last4 = @phone%10000 SET @middle2 = FLOOR((@phone%1000000)/10000)
				IF @middle2 = 0 SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 -- ищем карту по оператору и окончания телефона
				ELSE SELECT @card = card FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2 -- или по оператору, окончанию и серединке номера телефона 
				SET @rows = @@ROWCOUNT
				IF @rows > 1 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = N''Внимание. Выявлены совпадения. Введите полный номер телефона клиента без 8 или +7, или номер карты.''
					ELSE SET @errormessage = ''Окончание номера телефона не уникальное для оператора по умолчанию''
					RETURN(6)
				END	ELSE IF @rows < 1 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = N''Внимание. Клиент не найден. Введите полный номер телефона клиента без 8 или +7, или номер карты.''
					ELSE SET @errormessage = ''Номера телефонов с данным окончанием по оператору по умолчанию не найдены''
					RETURN(7)
				END
				ELSE BEGIN
					SELECT @client = client, @status = status, @balance = balance, @virtual = virtual FROM card WHERE number = @card -- статус и баланс еще берем
					RETURN(0) -- если номер карты найден, успешный ответ
				END
			END
		END	ELSE IF @email IS NOT NULL BEGIN -- если не задан номер карты, не задан номер телефона и задан E-mail - ищем по нему
			SELECT @client = client FROM email WHERE email = @email -- ищем клиента, на которого ссылается email
			IF @client IS NULL BEGIN SET @errormessage = ''Не существует клиента с заданным E-mail'' RETURN(5) END -- если клиент не найден
		END
	END
	IF @client IS NOT NULL BEGIN -- искомый клиент по ид, телефону или E-mail найден
		SET @card = NULL
		SELECT @card = card FROM client WHERE id = @client -- смотрим, есть ли у клиента единственная карта
		IF @card IS NOT NULL BEGIN -- у клиента единственная карта. Если не задан оператор изначально, считаем, что это она. Если задан - смотрим, этого оператора карта или нет.
			SELECT @status = status, @balance = balance, @cardoperator = operator, @virtual = virtual FROM card WHERE number = @card -- статус и баланс еще берем
			IF @operator IS NULL SET @operator = @cardoperator
			ELSE IF @cardoperator != @operator BEGIN -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
					IF @defaultoperator IS NULL SET @errormessage = ''Найденная карта не заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найденная карта не оператора ПЛ по умолчанию''
					RETURN(2)
				END
			RETURN(0) -- если номер карты найден, успешный ответ
		END ELSE BEGIN -- если у клиента не задана карта, то либо нет карт, либо больше одной - запускаем более медленный механизм уточнения номера карты, вероятность использования которого крайне мала - только если клиент в нескольких ПЛ
			SELECT @count = COUNT(*) FROM card WHERE client = @client
			IF @count = 0 BEGIN SET @errormessage = ''У клиента нет карт'' RETURN(8) END -- если у клиента нет карт
			ELSE IF @count = 1 BEGIN -- если у клиента все же одна карта, которая каким-то образом была из клиента, возвращаем ее и записываем клиенту
				SELECT @card = number, @cardoperator = operator, @status = status, @balance = balance, @virtual = virtual FROM card WHERE client = @client
				UPDATE client SET card = @card WHERE id = @client
				IF @operator IS NULL SET @operator = @cardoperator
				ELSE IF @cardoperator != @operator BEGIN -- заданный оператор (м.б. партнера) и оператор карты должны совпадать
						IF @defaultoperator IS NULL SET @errormessage = ''Найденная карта не заданного оператора ПЛ''
						ELSE SET @errormessage = ''Найденная карта не оператора ПЛ по умолчанию''
						RETURN(2)
					END
				RETURN(0) -- если номер карты найден, успешный ответ
			END	ELSE BEGIN -- если у клиента более одной карты
				IF @operator IS NULL SET @operator = @defaultoperator
				SELECT @count = COUNT(*) FROM card WHERE client = @client AND operator = @operator
				IF @count = 0 BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Найденные карты не заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найденные карты не оператора ПЛ по умолчанию''
					RETURN(2)
				END ELSE IF @count = 1 BEGIN
					SELECT @card = number, @status = status, @balance = balance, @virtual = virtual FROM card WHERE client = @client AND operator = @operator -- ищем карту теперь по клиенту и оператору
					RETURN(0) -- если номер карты найден, успешный ответ
				END ELSE BEGIN
					IF @defaultoperator IS NULL SET @errormessage = ''Найдено более одной карты клиента заданного оператора ПЛ''
					ELSE SET @errormessage = ''Найдено более одной карты клиента оператора ПЛ по умолчанию''
					RETURN(9)
				END
			END
		END
	END
	RETURN(0)'

	--Изменено. Заменена выборка с идентификатора ТТ на код ТТ.
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos NVARCHAR(10) = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS
		BEGIN
			IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
			BEGIN
				SET @errormessage = N''Указанный оператор не найден''
				RETURN(1)
			END
			IF (@partner = 0)
			BEGIN
				SET @partner = NULL;
				SET @pos = NULL;
			END
			IF (@pos = N'''')
			BEGIN
				SET @pos = NULL;
			END
			IF(@operator IS NOT NULL AND @operator > 0 AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				SELECT
					cr.client,
					COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
					cr.phone,
					COALESCE(cr.email, N''Отсутствует'') AS email,
					cr.birthdate,
					CASE
						WHEN cr.gender = 1 THEN N''Мужской''
						WHEN cr.gender = 0 THEN N''Женский''
						ELSE N''Не указан''
					END AS gender,
					COALESCE(ce.name, N''Клиент''),
					cd.number,
					COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
					cd.fullbalance,
					(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
					(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
					(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
					(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
					(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
					(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
					(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					LEFT JOIN cardtype AS ce ON ce.id = cd.type
					LEFT JOIN level AS ll ON cd.level = ll.id
				WHERE
					cr.operator = @operator
				RETURN(0)
			END
			ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NULL)
			BEGIN
				SELECT
					cr.client,
					COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
					cr.phone,
					COALESCE(cr.email, N''Отсутствует'') AS email,
					cr.birthdate,
					CASE
						WHEN cr.gender = 1 THEN N''Мужской''
						WHEN cr.gender = 0 THEN N''Женский''
						ELSE N''Не указан''
					END AS gender,
					COALESCE(ce.name, N''Клиент''),
					cd.number,
					COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
					cd.fullbalance,
					(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
					(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
					(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
					(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
					(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
					(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
					(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					LEFT JOIN cardtype AS ce ON ce.id = cd.type
					LEFT JOIN level AS ll ON cd.level = ll.id
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
				RETURN(0)
			END
			ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NOT NULL)
			BEGIN
				SELECT
					cr.client,
					COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
					cr.phone,
					COALESCE(cr.email, N''Отсутствует'') AS email,
					cr.birthdate,
					CASE
						WHEN cr.gender = 1 THEN N''Мужской''
						WHEN cr.gender = 0 THEN N''Женский''
						ELSE N''Не указан''
					END AS gender,
					COALESCE(ce.name, N''Клиент''),
					cd.number,
					COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
					cd.fullbalance,
					(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
					(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
					(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyDate,
					(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0)) AS lastBuyAmount,
					(SELECT COUNT(id) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemqty,
					(SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND card = cd.number) AS bonusredeemsum,
					(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
					(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
					(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus
				FROM
					clientoperator AS cr
					INNER JOIN pos AS ps ON cr.pos = ps.id
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					LEFT JOIN cardtype AS ce ON ce.id = cd.type
					LEFT JOIN level AS ll ON cd.level = ll.id
				WHERE
					cr.operator = @operator
					AND ps.code = @pos
				RETURN(0)
			END
			ELSE
			BEGIN
				SET @errormessage = N''Не указаны данные для выборки''
				RETURN(2)
			END
		END'

END ELSE IF @version = 365 BEGIN
	SELECT '3.66 20180124 Смирнов'

	--Изменено. Добавлен идентификатор ТТ.
	IF OBJECT_ID('ManagerLogin') IS NOT NULL DROP PROCEDURE ManagerLogin
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ManagerLogin
			@phone BIGINT = NULL, 
			@password NVARCHAR(20) = NULL,
			@operator SMALLINT = NULL OUTPUT,
			@partner SMALLINT = NULL OUTPUT,
			@pos SMALLINT = NULL OUTPUT,
			@posCode NVARCHAR(10) = NULL OUTPUT,
			@rolename NVARCHAR(50) = NULL OUTPUT,
			@permissioncode NVARCHAR(20) = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		SET NOCOUNT ON
		IF NOT EXISTS(SELECT id FROM client WHERE phone = @phone)
		BEGIN
			SET @errormessage = N''Учётная запись не найдена''
			RETURN(1)
		END

		SELECT
			@operator = mr.operator,
			@partner = mr.partner,
			@posCode = (SELECT code FROM pos WHERE id = mr.pos),
			@pos = mr.pos,
			@rolename = re.name,
			@permissioncode = pn.code
		FROM
			client AS ct
			INNER JOIN manager AS mr ON ct.id = mr.client
			INNER JOIN clientrole AS ce ON ce.client = ct.id
			INNER JOIN role AS re ON ce.role = re.id
			INNER JOIN rolepermission AS rn ON re.id = rn.role
			INNER JOIN permission AS pn ON rn.permission = pn.id
		WHERE
			ct.phone = @phone
			AND ct.password = @password

		IF @@ROWCOUNT <> 1 
		BEGIN
			SET @operator = NULL
			SET	@partner = NULL
			SET	@posCode = NULL
			SET	@rolename = NULL
			SET	@permissioncode = NULL
			SET @errormessage = N''Не найдены данные для учётной записи''
		
			RETURN(2)
		END
		RETURN(0)
	END'

	--Исправлено. Ошибка при расчёте максимальной суммы списания без позиций чека
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, @operator SMALLINT = NULL, @client INT, @id INT = NULL, @oldbalance NUMERIC(9,2) = NULL, @text NVARCHAR(200) = NULL, @posid INT = NULL, @bonustime DATETIME = NULL, @bonuscheque INT = NULL, @bonusrefund BIT = NULL, @checkredeem BIT = NULL, @freecard BIT = NULL, @status TINYINT = NULL, @notsendsms BIT = NULL, @idoc int = NULL, @code NVARCHAR(10), @price NUMERIC(9,2), @quantity NUMERIC(9,2), @iamount NUMERIC(9,2), @ipaidbybonus NUMERIC(9,2), @minprice NUMERIC(9,2), @scard NVARCHAR(20), @sphone NVARCHAR(10), @schequetime NVARCHAR(20), @spartner NVARCHAR(10), @samount NVARCHAR(10), @sprice NVARCHAR(10), @squantity NVARCHAR(10), @siamount NVARCHAR(10), @sposition NVARCHAR(10), @position TINYINT, @norules BIT = NULL, @now DATETIME = GETDATE(), @itemstring NVARCHAR(100) = NULL, @bonus NUMERIC(9,2) = NULL, @itemscount INT = 0, @operatormaxredeem NUMERIC(9,2) = NULL, @partnermaxredeem NUMERIC(9,2) = NULL, @maxredeempercent NUMERIC(9,2) = NULL, @i INT = 0, @imaxredeem NUMERIC(9,2) = NULL, @redeem NUMERIC(9,2) = NULL, @itemtable ChequeItems, @inoadd BIT = NULL, @inoredeem BIT = NULL, @redeemedbefore NUMERIC(9,2) = NULL, @itemid INT = NULL, @chequeitemid INT = NULL, @itemsum NUMERIC(9,2) = 0, @lastchequetime DATETIME = NULL, @purchasetimebegin DATETIME = NULL, @purchasetimeend DATETIME = NULL, @purchaseid INT = NULL, @calcbalance NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE IF @maxredeempercent > 0 AND @maxredeempercent < 100 SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'

END ELSE IF @version = 366 BEGIN
	SELECT '3.67 20180128 Смирнов'

	--Изменено. К адресу ТТ добавлено наименование города
	IF OBJECT_ID('Poses') IS NOT NULL DROP PROCEDURE Poses
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Poses
	@partner SMALLINT = NULL,
	@campaign INT = NULL,
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	IF @partner = 0 SET @partner = NULL IF @campaign = 0 SET @campaign = NULL
	IF @campaign IS NOT NULL 
	BEGIN
		SELECT 
			cp.id, 
			cp.name, 
			c.name, 
			r.name, 
			c.name + N'' '' + p.address, 
			p.phone, 
			p.mapposition, 
			pr.givescard AS IsCardIssue 
		FROM 
			pos AS p 
			LEFT JOIN partner AS pr ON p.partner = pr.id 
			LEFT JOIN city AS c ON p.city = c.id 
			LEFT JOIN region AS r ON c.region = r.id 
			LEFT JOIN campaign AS cp ON pr.id = cp.partner 
		WHERE 
			cp.id = @campaign 
			AND pr.operator = @operator
	END
	ELSE IF @partner IS NULL 
	BEGIN
		SELECT 
			p.id, 
			pr.name, 
			p.code, 
			r.name, 
			c.name, 
			c.name + N'' '' + p.address, 
			p.phone, 
			p.mapposition, 
			p.shown, 
			p.issues, 
			p.adds, 
			p.redeems, 
			pr.givescard AS IsCardIssue 
		FROM 
			pos AS p 
			LEFT JOIN partner AS pr ON p.partner = pr.id 
			LEFT JOIN city AS c ON p.city = c.id 
			LEFT JOIN region r ON c.region = r.id 
		WHERE 
			pr.operator = @operator
	END
	ELSE 
	BEGIN
		SELECT 
			p.id, 
			pr.name, 
			p.code, 
			r.name, 
			c.name, 
			c.name + N'' '' + p.address, 
			p.phone, 
			p.mapposition, 
			p.shown, 
			p.issues, 
			p.adds, 
			p.redeems, 
			pr.givescard AS IsCardIssue 
		FROM 
			pos AS p 
			LEFT JOIN partner AS pr ON p.partner = pr.id 
			LEFT JOIN city AS c ON p.city = c.id 
			LEFT JOIN region AS r ON c.region = r.id 
		WHERE 
			p.partner = @partner 
			AND pr.operator = @operator
	END
	RETURN (0)'

	--Изменено. Изменена сортировка чеков на сортировку по убыванию даты
	IF OBJECT_ID('Cheques') IS NOT NULL DROP PROCEDURE Cheques
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Cheques
	@client INT = NULL,
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL,
	@cheque INT = NULL,
	@page SMALLINT = NULL,
	@pagesize SMALLINT = NULL,
	@pagecount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	BEGIN
		IF @client = 0 SET @client = NULL 
		IF @card = 0 SET @card = NULL 
		IF @partner = 0 SET @partner = NULL 
		IF @operator = 0 SET @operator = NULL 
		IF @cheque = 0 SET @cheque = NULL
		IF @page = 0 
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pagesize = 0
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pos = 0 SET @pos = NULL
		declare @cheques as table
		(
			cheque INT,
			rownum INT,
			unique clustered (cheque, rownum)
		)
		set @pagecount = 1
		IF @client IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.proctime DESC
		end
		ELSE IF @card IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card = @card AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.proctime DESC
		end
		ELSE IF @partner IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.proctime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner = @partner AND (cancelled IS NULL OR cancelled = 0)
				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE IF @operator IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner IN (SELECT id FROM partner WHERE operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0) 
				ORDER BY 
					c.proctime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner IN (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0)

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner IN (SELECT id FROM partner WHERE operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE IF @cheque IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.id = @cheque AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.id
		end
		ELSE IF @pos IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0) 
				ORDER BY 
					c.proctime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					pos = @pos AND (cancelled IS NULL OR cancelled = 0)

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) 
				AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id
			WHERE (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.proctime DESC
		end
		RETURN (0)
	END'

	--Исправлено. Added выбирается отдельно в случае, если нет списания, только начисление.
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, 
			@operator SMALLINT = NULL, 
			@client INT, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@bonustime DATETIME = NULL, 
			@bonuscheque INT = NULL, 
			@bonusrefund BIT = NULL, 
			@checkredeem BIT = NULL, 
			@freecard BIT = NULL, 
			@status TINYINT = NULL, 
			@notsendsms BIT = NULL, 
			@idoc int = NULL, 
			@code NVARCHAR(10), 
			@price NUMERIC(9,2), 
			@quantity NUMERIC(9,2), 
			@iamount NUMERIC(9,2), 
			@ipaidbybonus NUMERIC(9,2), 
			@minprice NUMERIC(9,2), 
			@scard NVARCHAR(20), 
			@sphone NVARCHAR(10), 
			@schequetime NVARCHAR(20), 
			@spartner NVARCHAR(10), 
			@samount NVARCHAR(10), 
			@sprice NVARCHAR(10), 
			@squantity NVARCHAR(10), 
			@siamount NVARCHAR(10), 
			@sposition NVARCHAR(10), 
			@position TINYINT, 
			@norules BIT = NULL, 
			@now DATETIME = GETDATE(), 
			@itemstring NVARCHAR(100) = NULL, 
			@bonus NUMERIC(9,2) = NULL, 
			@itemscount INT = 0, 
			@operatormaxredeem NUMERIC(9,2) = NULL, 
			@partnermaxredeem NUMERIC(9,2) = NULL, 
			@maxredeempercent NUMERIC(9,2) = NULL, 
			@i INT = 0, 
			@imaxredeem NUMERIC(9,2) = NULL, 
			@redeem NUMERIC(9,2) = NULL, 
			@itemtable ChequeItems, 
			@inoadd BIT = NULL, 
			@inoredeem BIT = NULL, 
			@redeemedbefore NUMERIC(9,2) = NULL, 
			@itemid INT = NULL, 
			@chequeitemid INT = NULL, 
			@itemsum NUMERIC(9,2) = 0, 
			@lastchequetime DATETIME = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL, 
			@purchaseid INT = NULL, 
			@calcbalance NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE IF @maxredeempercent > 0 AND @maxredeempercent < 100 SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF (@added IS NULL OR @added = 0) SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'

END ELSE IF @version = 367 BEGIN
	SELECT '3.68 20180130 Смирнов'
	
	--Изменено. Добавлена выборка по партнёру и ТТ.
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (@partner = 0)
		BEGIN
			SET @partner = NULL;
		END
		IF (@pos = 0)
		BEGIN
			SET @pos = NULL;
		END
		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL);
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL);
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
			SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND pos = @pos);
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL AND pos = @pos);
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos = @pos);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos = @pos);
			SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator AND pos = @pos);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@gain = COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT 
				@gain = COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@gain = COALESCE(SUM(amount - COALESCE(paidbybonus, 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0);
		END

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2),  @buyWeekdayQty NUMERIC(9,2), @buyWeekoffQty NUMERIC(9,2), @buyQty NUMERIC(9,2);

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator) 
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner 
				AND (refund IS NULL OR refund = 0) 
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (cancelled IS NULL OR cancelled = 0);
		END

		IF(@buyQty > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus > 0 
				AND (refund = 0 OR refund IS NULL);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND (cheque IS NOT NULL OR source = 1) 
				AND (refund = 0 OR refund IS NULL);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND ce.pos = @pos
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								);
		END

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(id) 
										FROM 
											bonus 
										WHERE 
											operator = @operator 
											AND bonus < 0 
											AND (cheque IS NOT NULL OR source = 1) 
											AND (refund = 0 OR refund IS NULL)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND bs.bonus < 0 
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND bs.bonus < 0 
											AND ce.pos = @pos
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
									)
		END

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos = @pos
								)/@clientQty
			END
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		IF(@addedBonus > 0)
		BEGIN
			SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
		END
		ELSE
		BEGIN
			SET @avgDiscount = 0
		END
	END'

	--Изменено. Добавлена фильтрация по партнёру и ТТ.
	IF OBJECT_ID(N'ClientBaseStructure', 'P') IS NOT NULL DROP PROCEDURE ClientBaseStructure
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseStructure
			@operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@menQty INT = NULL OUTPUT,
			@womenQty INT = NULL OUTPUT,
			@unknownGender INT = NULL OUTPUT,
			@clientsWithBuys INT = NULL OUTPUT,
			@clientsWithoutBuys INT = NULL OUTPUT,
			@clientsWithTenBuys INT = NULL OUTPUT,
			@clientsWithOneBuys INT = NULL OUTPUT,
			@clientsWithPhone INT = NULL OUTPUT,
			@clientsWithEmail INT = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END
		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@menQty = COALESCE(SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END), 0),
				@womenQty = COALESCE(SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END), 0),
				@unknownGender = COALESCE(SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END), 0)
			FROM
				clientoperator
			WHERE
				operator = @operator;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@menQty = COALESCE(SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END), 0),
				@womenQty = COALESCE(SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END), 0),
				@unknownGender = COALESCE(SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END), 0)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@menQty = COALESCE(SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END), 0),
				@womenQty = COALESCE(SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END), 0),
				@unknownGender = COALESCE(SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END), 0)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos = @pos;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@clientsWithBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator;

			SELECT
				@clientsWithoutBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				ce.id IS NULL
				AND cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@clientsWithBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);

			SELECT
				@clientsWithoutBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				ce.id IS NULL
				AND cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@clientsWithBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND cr.pos = @pos
				AND ce.pos = @pos;

			SELECT
				@clientsWithoutBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				ce.id IS NULL
				AND cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND cr.pos = @pos;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND ce.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND ce.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL;
			SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND phone IS NOT NULL;
			SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND email IS NOT NULL;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND phone IS NOT NULL;
			SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND email IS NOT NULL;
		END

		RETURN(0)
	END'

	--Изменено. Добавлена выборка по партнёру и ТТ.
	IF OBJECT_ID(N'SegmentationAge', 'P') IS NOT NULL DROP PROCEDURE SegmentationAge
	EXEC sp_executesql @statement = N'CREATE PROCEDURE SegmentationAge @operator SMALLINT,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@less25 INT = NULL OUTPUT,
			@more25less35 INT = NULL OUTPUT,
			@more35less45 INT = NULL OUTPUT,
			@more45 INT = NULL OUTPUT,
			@unknown INT = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END
		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@less25 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more25less35 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more35less45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate THEN 1 ELSE 0 END),
				@unknown = SUM(CASE WHEN birthdate IS NULL THEN 1 ELSE 0 END)
			FROM
				clientoperator
			WHERE
				operator = @operator
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@less25 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more25less35 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more35less45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate THEN 1 ELSE 0 END),
				@unknown = SUM(CASE WHEN birthdate IS NULL THEN 1 ELSE 0 END)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos IN (SELECT id FROM pos WHERE partner = @partner)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@less25 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more25less35 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more35less45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate THEN 1 ELSE 0 END),
				@unknown = SUM(CASE WHEN birthdate IS NULL THEN 1 ELSE 0 END)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos = @pos
		END
		RETURN(0)
	END'

END ELSE IF @version = 368 BEGIN
	SELECT '3.69 20180201 Смирнов'

	--Изменено. Из выборки по идентификатору акции удалён идентификатор оператора и убран город из адреса
	IF OBJECT_ID('Poses') IS NOT NULL DROP PROCEDURE Poses
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Poses
	@partner SMALLINT = NULL,
	@campaign INT = NULL,
	@operator SMALLINT = NULL,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	IF @partner = 0 SET @partner = NULL IF @campaign = 0 SET @campaign = NULL
	IF @campaign IS NOT NULL 
	BEGIN
		SELECT 
			cp.id, 
			cp.name, 
			c.name, 
			r.name, 
			p.address, 
			p.phone, 
			p.mapposition, 
			pr.givescard AS IsCardIssue 
		FROM 
			pos AS p 
			LEFT JOIN partner AS pr ON p.partner = pr.id 
			LEFT JOIN city AS c ON p.city = c.id 
			LEFT JOIN region AS r ON c.region = r.id 
			LEFT JOIN campaign AS cp ON pr.id = cp.partner 
		WHERE 
			cp.id = @campaign 
	END
	ELSE IF @partner IS NULL 
	BEGIN
		SELECT 
			p.id, 
			pr.name, 
			p.code, 
			r.name, 
			c.name, 
			p.address, 
			p.phone, 
			p.mapposition, 
			p.shown, 
			p.issues, 
			p.adds, 
			p.redeems, 
			pr.givescard AS IsCardIssue 
		FROM 
			pos AS p 
			LEFT JOIN partner AS pr ON p.partner = pr.id 
			LEFT JOIN city AS c ON p.city = c.id 
			LEFT JOIN region r ON c.region = r.id 
		WHERE 
			pr.operator = @operator
	END
	ELSE 
	BEGIN
		SELECT 
			p.id, 
			pr.name, 
			p.code, 
			r.name, 
			c.name, 
			p.address, 
			p.phone, 
			p.mapposition, 
			p.shown, 
			p.issues, 
			p.adds, 
			p.redeems, 
			pr.givescard AS IsCardIssue 
		FROM 
			pos AS p 
			LEFT JOIN partner AS pr ON p.partner = pr.id 
			LEFT JOIN city AS c ON p.city = c.id 
			LEFT JOIN region AS r ON c.region = r.id 
		WHERE 
			p.partner = @partner 
			AND pr.operator = @operator
	END
	RETURN (0)'

	--Изменено. Добавлены входные параметры партнёр и ТТ. И фильтрация по ним.
	IF OBJECT_ID(N'ClientBaseActive', 'P') IS NOT NULL DROP PROCEDURE ClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseActive @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@menBuys NUMERIC(9,2) = NULL OUTPUT,
		@womenBuys NUMERIC(9,2) = NULL OUTPUT,
		@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
		@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
		@buysOnClient NUMERIC(9,2) = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден указанный оператор'';
			RETURN(1)
		END
		DECLARE @clientsQty INT;
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END

		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos = @pos;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime DESC) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime DESC) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime DESC) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.pos = @pos
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos = @pos

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos = @pos
		END

		IF (@clientsQty > 0)
		BEGIN
			SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
		END
		ELSE
		BEGIN
			SET @buysOnClient = 0
		END
		RETURN(0)
	END'

END ELSE IF @version = 369 BEGIN
	SELECT '3.70 20180201 Смирнов'

	IF EXISTS(SELECT name
		FROM sys.key_constraints  
		WHERE type = 'PK' AND OBJECT_NAME(parent_object_id) = N'Users')
	BEGIN
		DECLARE @sql NVARCHAR(1000)
		SET @sql = N'ALTER TABLE Users DROP CONSTRAINT '
		SELECT @sql += name
		FROM sys.key_constraints  
		WHERE type = 'PK' AND OBJECT_NAME(parent_object_id) = N'Users'; 
		EXEC sp_executesql @statement = @sql
	END
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'id' AND id = (SELECT id FROM sysobjects WHERE name = 'Users'))
		ALTER TABLE Users ADD id INT IDENTITY(1,1) PRIMARY KEY

	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'users' AND id = (SELECT id FROM sysobjects WHERE name = 'manager'))
		ALTER TABLE manager ADD users INT

	IF(OBJECT_ID('FK_manager_users', 'F') IS NULL)
		ALTER TABLE manager ADD CONSTRAINT FK_manager_users FOREIGN KEY (users) REFERENCES Users(id)

	IF(OBJECT_ID('FK__manager__client__713DB68B', 'F') IS NOT NULL)
		ALTER TABLE manager DROP CONSTRAINT FK__manager__client__713DB68B

	IF EXISTS(SELECT name FROM syscolumns WHERE name = 'client' AND id = (SELECT id FROM sysobjects WHERE name = 'manager'))
		ALTER TABLE manager DROP COLUMN client

	--Таблица привязки пользователя к роли.
	IF OBJECT_ID(N'usersrole') IS NULL
	BEGIN
		CREATE TABLE usersrole
		(
			users INT,
			role SMALLINT
		)
	END

	IF(OBJECT_ID('FK_usersrole_users', 'F') IS NULL)
		ALTER TABLE usersrole ADD CONSTRAINT FK_usersrole_users FOREIGN KEY (users) REFERENCES Users(id)

	IF(OBJECT_ID('FK_usersrole_role', 'F') IS NULL)
		ALTER TABLE usersrole ADD CONSTRAINT FK_usersrole_role FOREIGN KEY (role) REFERENCES role(id)

	--Изменено. Пользователь ищется в таблице Users.
	IF OBJECT_ID('ManagerLogin') IS NOT NULL DROP PROCEDURE ManagerLogin
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ManagerLogin
			@phone BIGINT = NULL, 
			@password NVARCHAR(20) = NULL,
			@operator SMALLINT = NULL OUTPUT,
			@partner SMALLINT = NULL OUTPUT,
			@pos SMALLINT = NULL OUTPUT,
			@posCode NVARCHAR(10) = NULL OUTPUT,
			@rolename NVARCHAR(50) = NULL OUTPUT,
			@permissioncode NVARCHAR(20) = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		SELECT
			@operator = mr.operator,
			@partner = mr.partner,
			@posCode = (SELECT code FROM pos WHERE id = mr.pos),
			@pos = mr.pos,
			@rolename = re.name,
			@permissioncode = pn.code
		FROM
			Users AS ct
			INNER JOIN manager AS mr ON ct.id = mr.users
			INNER JOIN usersrole AS ce ON ce.users = ct.id
			INNER JOIN role AS re ON ce.role = re.id
			INNER JOIN rolepermission AS rn ON re.id = rn.role
			INNER JOIN permission AS pn ON rn.permission = pn.id
		WHERE
			ct.login = CAST(@phone AS NVARCHAR(10))
			AND ct.password = @password

		IF @@ROWCOUNT <> 1 
		BEGIN
			SET @operator = NULL
			SET	@partner = NULL
			SET	@posCode = NULL
			SET	@rolename = NULL
			SET	@permissioncode = NULL
			SET @errormessage = N''Не найдены данные для учётной записи''
		
			RETURN(2)
		END
		RETURN(0)
	END'

	--Изменено. Если не указан уровень у оператора, то берётся первый попавшийся.
	IF OBJECT_ID('ClientInfo') IS NOT NULL DROP PROCEDURE ClientInfo
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientInfo
	@operator SMALLINT = NULL,
	@card BIGINT = NULL,
	@phone BIGINT = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result INT, @client INT, @id INT = NULL
	-- 1.60 20170226 Медянин. Вызов _ClientGet заменен на вызов Identify. Вся логика, которая есть в Identify, в данной процедуре удалена
	EXECUTE @result = Identify @phone = @phone, @card = @card OUTPUT, @client = @client OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
	IF NOT @result = 0 RETURN (@result)
	-- 1.60 20170226 Медянин. Чтение данных клиента для оператора, если они есть. Если нет - ПОКА из данных клиента для всех операторов.
	SELECT @id = client FROM clientoperator WHERE client = @client AND operator = @operator
	IF @id IS NOT NULL -- берем информацию из данных клиента для определенног оператора
	BEGIN
		SELECT 
			cd.number, 
			coalesce(co.phone, ct.phone) as phone, 
			co.surname, 
			co.name, 
			co.patronymic, 
			coalesce(co.email, ct.email) as email, 
			co.birthdate,
			(SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseDate,
			(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL)) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseAmount,
			co.allowsms, 
			co.allowemail, 
			cd.fullbalance, 
			COALESCE(l.condition, (SELECT TOP(1) CAST(interest AS NVARCHAR(6)) + N'' %'' FROM chequerule WHERE operator = @operator)), 
			ct.id, 
			ct.gender, 
			pe.validated AS phoneValidated, 
			el.validated AS emailValidated, 
			ct.regdate
		FROM 
			card AS cd 
			LEFT JOIN client AS ct ON ct.id = cd.client 
			LEFT JOIN clientoperator AS co ON co.client = ct.id 
			LEFT JOIN level AS l ON l.id = cd.level 
			LEFT JOIN phone AS pe ON pe.client = ct.id AND pe.number = coalesce(co.phone, ct.phone) 
			LEFT JOIN email AS el ON el.client = ct.id AND el.email = coalesce(co.email, ct.email) 
		WHERE 
			cd.number = @card 
			AND co.operator = @operator
	END
	ELSE -- из данных клиента для всех операторов
	BEGIN
		SELECT 
			cd.number, 
			ct.phone, 
			ct.surname, 
			ct.name, 
			ct.patronymic,	
			ct.email, 
			ct.birthdate,
			(SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseDate,
			(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND chequetime = (SELECT MAX(chequetime) FROM cheque WHERE card = cd.number AND (refund = 0 or refund IS NULL)) AND (cancelled IS NULL OR cancelled = 0)) AS lastPurchaseAmount,
			ct.allowsms, 
			ct.allowemail, 
			cd.fullbalance, 
			COALESCE(l.condition, (SELECT TOP(1) CAST(interest AS NVARCHAR(6)) + N'' %'' FROM chequerule WHERE operator = @operator)), 
			ct.id, 
			ct.gender, 
			pe.validated AS phoneValidated, 
			el.validated AS emailValidated, 
			ct.regdate
		FROM 
			card AS cd 
			LEFT JOIN client AS ct ON ct.id = cd.client 
			LEFT JOIN level AS l ON l.id = cd.level 
			LEFT JOIN phone AS pe ON pe.client = ct.id AND pe.number = ct.phone 
			LEFT JOIN email AS el ON el.client = ct.id AND el.email = ct.email 
		WHERE 
			cd.number = @card 
			AND cd.operator = @operator
	END
	RETURN (0)'

END ELSE IF @version = 370 BEGIN
	SELECT '3.71 20180206 Смирнов'

	--Исправлено. Исправлены выборки по партнёру и ТТ.
	IF OBJECT_ID('Cheques') IS NOT NULL DROP PROCEDURE Cheques
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE Cheques
	@client INT = NULL,
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@operator SMALLINT = NULL,
	@cheque INT = NULL,
	@page SMALLINT = NULL,
	@pagesize SMALLINT = NULL,
	@pagecount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	BEGIN
		IF @client = 0 SET @client = NULL 
		IF @card = 0 SET @card = NULL 
		IF @partner = 0 SET @partner = NULL 
		IF @operator = 0 SET @operator = NULL 
		IF @cheque = 0 SET @cheque = NULL
		IF @page = 0 
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pagesize = 0
		BEGIN
			SET @page = NULL
			SET @pagesize = NULL
		END
		IF @pos = 0 SET @pos = NULL
		declare @cheques as table
		(
			cheque INT,
			rownum INT,
			unique clustered (cheque, rownum)
		)
		set @pagecount = 1
		IF @client IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card IN (SELECT number FROM card WHERE client = @client AND operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.proctime DESC
		end
		ELSE IF @card IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.card = @card AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.proctime DESC
		end
		ELSE IF @operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner IN (SELECT id FROM partner WHERE operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0) 
				ORDER BY 
					c.proctime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner IN (SELECT id FROM partner WHERE operator = @operator) AND (cancelled IS NULL OR cancelled = 0)

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner IN (SELECT id FROM partner WHERE operator = @operator) AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE IF @operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.proctime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					partner = @partner AND (cancelled IS NULL OR cancelled = 0)
				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end		
		ELSE IF @cheque IS NOT NULL
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id 
			WHERE 
				c.id = @cheque AND (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.id
		end
		ELSE IF @operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL
		begin
			if @page is null
			begin
				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0) 
				ORDER BY 
					c.proctime DESC
			end
			else if @page is not null and @pagesize is not null
			begin
				insert into @cheques(cheque, rownum)
				select
					id,
					ROW_NUMBER() over(order by chequetime desc)
				from
					cheque
				where
					pos = @pos AND (cancelled IS NULL OR cancelled = 0)

				set @pagecount = (select cast((count(*)/@pagesize) as int) + 1 from @cheques)

				SELECT 
					c.id, 
					c.number, 
					c.chequetime, 
					c.refund, 
					ABS(c.amount) AS amount, 
					c.discount, 
					p.name AS partner, 
					pos.code AS pos, 
					c.card, 
					(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
					-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
					pos.name AS posname,
					(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
				FROM 
					cheque as c 
					inner join @cheques as cs on cs.cheque = c.id
					LEFT JOIN partner as p ON c.partner = p.id 
					LEFT JOIN pos ON c.pos = pos.id 
				WHERE 
					cs.rownum > (@page - 1)*@pagesize
					and cs.rownum <= @page*@pagesize
					and c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0)
				ORDER BY 
					c.id
			end
		end
		ELSE
		begin
			SELECT 
				c.id, 
				c.number, 
				c.chequetime, 
				c.refund, 
				ABS(c.amount) 
				AS amount, 
				c.discount, 
				p.name AS partner, 
				pos.code AS pos, 
				c.card, 
				(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus > 0) AS added, 
				-(SELECT SUM(bonus) FROM bonus WHERE cheque = c.id AND bonus < 0) AS redeemed, 
				pos.name AS posname,
				(SELECT cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator WHERE cd.number = c.card) AS clientPhone
			FROM 
				cheque as c 
				LEFT JOIN partner as p ON c.partner = p.id 
				LEFT JOIN pos ON c.pos = pos.id
			WHERE (c.cancelled IS NULL OR c.cancelled = 0)
			ORDER BY 
				c.proctime DESC
		end
		RETURN (0)
	END'

	--Изменено. Добавлено количество клиентов для диаграммы активности клиентов. Исправлена выборка по партнёру и ТТ.
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@clientActiveQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (@partner = 0)
		BEGIN
			SET @partner = NULL;
		END
		IF (@pos = 0)
		BEGIN
			SET @pos = NULL;
		END
		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL);
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL);
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
			SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator);
			SET @clientActiveQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @clientActiveQty = (SELECT 
										COUNT(cr.client) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON ce.card = cd.number
									WHERE 
										cr.operator = @operator 
										AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND pos = @pos);
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NULL AND pos = @pos);
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos = @pos);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos = @pos);
			SET @clientQty = (SELECT COUNT(client) FROM clientoperator WHERE operator = @operator AND pos = @pos);
			SET @clientActiveQty = (SELECT 
										COUNT(cr.client) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON ce.card = cd.number
									WHERE 
										cr.operator = @operator 
										AND ce.pos = @pos
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@gain = COALESCE(SUM(amount - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT 
				@gain = COALESCE(SUM(amount - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@gain = COALESCE(SUM(amount - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				pos = @pos
				AND (cancelled IS NULL OR cancelled = 0);
		END

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2),  @buyWeekdayQty NUMERIC(9,2), @buyWeekoffQty NUMERIC(9,2), @buyQty NUMERIC(9,2);

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator) 
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner 
				AND (refund IS NULL OR refund = 0) 
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (cancelled IS NULL OR cancelled = 0);
		END

		IF(@buyQty > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus > 0 
				AND (refund = 0 OR refund IS NULL);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND (cheque IS NOT NULL OR source = 1) 
				AND (refund = 0 OR refund IS NULL);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (SELECT COUNT(id) FROM bonus WHERE operator = @operator AND bonus > 0 AND (refund = 0 OR refund IS NULL));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND ce.pos = @pos
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								);
		END

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(id) 
										FROM 
											bonus 
										WHERE 
											operator = @operator 
											AND bonus < 0 
											AND (cheque IS NOT NULL OR source = 1) 
											AND (refund = 0 OR refund IS NULL)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND bs.bonus < 0 
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND bs.bonus < 0 
											AND ce.pos = @pos
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
									)
		END

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos = @pos
								)/@clientQty
			END
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		IF(@addedBonus > 0)
		BEGIN
			SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
		END
		ELSE
		BEGIN
			SET @avgDiscount = 0
		END
	END'

	--Исправлено. В расчёте повторных покупок не учитывается первая покупка (самая ранняя), а не последняя
	IF OBJECT_ID(N'ClientBaseActive', 'P') IS NOT NULL DROP PROCEDURE ClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseActive @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@menBuys NUMERIC(9,2) = NULL OUTPUT,
		@womenBuys NUMERIC(9,2) = NULL OUTPUT,
		@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
		@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
		@buysOnClient NUMERIC(9,2) = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден указанный оператор'';
			RETURN(1)
		END
		DECLARE @clientsQty INT;
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END

		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos = @pos;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.pos = @pos
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos = @pos

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos = @pos
		END

		IF (@clientsQty > 0)
		BEGIN
			SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
		END
		ELSE
		BEGIN
			SET @buysOnClient = 0
		END
		RETURN(0)
	END'

	--Изменено. Добавлены партнёр и ТТ для расчёта выручки за период.
	IF OBJECT_ID(N'GainOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE GainOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE GainOperatorPeriod @operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@from DATE = NULL,
			@to DATE = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
		AS
		BEGIN
			IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
			BEGIN
				SET @errormessage = N''Не найден оператор''
				RETURN(1)
			END
			IF(@partner = 0)
			BEGIN
				SET @partner = NULL
			END

			IF(@pos = 0)
			BEGIN
				SET @pos = NULL
			END
			DECLARE @table AS table
			(
				gain NUMERIC(9,2),
				avgcheque NUMERIC(9,2),
				monthnum INT
			)

			DECLARE @gainTable AS TABLE
			(
				gain NUMERIC(9,2),
				monthnum INT
			)

			IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ce.amount - COALESCE(ce.paidbybonus, 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END
			ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner = @partner 
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ce.amount - COALESCE(ce.paidbybonus, 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner 
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END
			ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner = @partner
					AND ce.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ce.amount - COALESCE(ce.paidbybonus, 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner
					AND ce.pos = @pos
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END

			MERGE @table AS target
				USING @gaintable AS source
				ON (target.monthnum = source.monthnum)
				WHEN MATCHED THEN UPDATE SET gain = source.gain
				WHEN NOT MATCHED THEN INSERT (gain, avgcheque, monthnum) VALUES(source.gain, 0, source.monthnum);

			SELECT
				gain,
				avgcheque,
				monthnum
			FROM
				@table AS te
			RETURN(0)
		END'

END ELSE IF @version = 371 BEGIN
	SELECT '3.72 20180206 Смирнов'

	--Исправлено. Добавлены чеки без бонусов
	IF OBJECT_ID('[Reports].[OperatorSales]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorSales]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorSales @from date = NULL,
				@to date = NULL, 
				@operator smallint = NULL,
				@errormessage nvarchar(100) OUTPUT
		AS
		BEGIN
			IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
			BEGIN
				SET @errormessage = N''Оператор не найден''
				RETURN(1)
			END

			DECLARE @bonuses AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @bonuscheques AS TABLE
			(
				bonusAdded NUMERIC(9,2),
				bonusRedeemed NUMERIC(9,2),
				cheque INT,
				bonussource NVARCHAR(50),
				rownum INT IDENTITY,
				proctime DATETIME,
				card BIGINT,
				partner SMALLINT,
				pos SMALLINT,
				chequeamount NUMERIC(9,2),
				operationtype NVARCHAR(20)
				UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
			)

			DECLARE @beginDate DATE, @endDate DATE

			SET @to = DATEADD(DAY, 1, (@to))
			SET @beginDate = @from
			SET @endDate = @to

			INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
			SELECT
				CASE 
					WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
					WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
					ELSE 0
				END AS bonusAdded,
				CASE 
					WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
					WHEN bs.bonus >= 0 AND bs.refund = 1 THEN (-1)*bs.bonus
					ELSE 0
				END AS bonusRedeemed,
				bs.cheque,
				COALESCE(be.name, N''Не указан тип бонусов'') AS bonussource,
				bs.proctime,
				bs.card,
				bs.partner
			FROM
				bonus AS bs
				LEFT JOIN bonussource AS be ON bs.source = be.code
			WHERE
				bs.operator = @operator
				AND bs.proctime >= @beginDate
				AND bs.proctime < @endDate
			
			INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
			SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
			
			INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
			SELECT
				0, 0, ce.id, N''Не указан тип бонусов'', ce.card, ce.partner
			FROM 
				cheque AS ce
				LEFT JOIN bonus AS bs ON ce.id = bs.cheque
			WHERE 
				bs.id IS NULL 
				AND ce.partner IN (SELECT id FROM partner WHERE operator = @operator)

			UPDATE 
				bs 
			SET 
				bs.partner = ce.partner,
				bs.pos = ce.pos, 
				bs.chequeamount = ce.amount, 
				bs.proctime = ce.chequetime,
				bs.operationtype = (CASE ce.refund
										WHEN 0 THEN N''Покупка''
										WHEN NULL THEN N''Покупка''
										WHEN 1 THEN N''Возврат''
									END) 
			FROM 
				@bonuscheques AS bs 
				INNER JOIN cheque AS ce ON bs.cheque = ce.id

			SELECT
				(SELECT name FROM partner WHERE id = bs.partner) AS brand,
				(SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = bs.partner AND ps.id = bs.pos) AS address,
				COALESCE(cr.name, ct.name, '''') + '' '' + COALESCE(cr.surname, ct.surname, '''') + '' '' + COALESCE(cr.patronymic, ct.patronymic, '''') AS fullName,
				CASE cr.gender
					WHEN 0 THEN N''Женский''
					WHEN 1 THEN N''Мужской''
					ELSE N''Неизвестен''
				END AS gender,
				COALESCE(cr.phone, ct.phone, 0) AS phone,
				COALESCE(cr.email, ct.email, '''') AS email,
				cd.number,
				COALESCE(ce.Name, '''') AS ClientType,
				bs.proctime AS chequetime,
				COALESCE(bs.operationtype, bs.bonussource),
				CASE
					WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
					WHEN bs.chequeamount IS NULL THEN 0
				END AS [Сумма операции],
				bs.bonusAdded AS [Начислено бонусов],
				bs.bonusRedeemed AS [Списано бонусов]
			FROM
				@bonuscheques AS bs
				INNER JOIN card AS cd ON bs.card = cd.number
				INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
				INNER JOIN client AS ct ON ct.id = cd.client
				LEFT JOIN cardtype AS ce ON cd.type = ce.id
			WHERE
				cd.operator = @operator
			ORDER BY
				bs.proctime DESC
			RETURN(0)
		END'

	--Исправлено. Подсчёт повторных покупок, подсчёт покупок на клиента.
	IF OBJECT_ID(N'ClientBaseActive', 'P') IS NOT NULL DROP PROCEDURE ClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseActive @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@menBuys NUMERIC(9,2) = NULL OUTPUT,
		@womenBuys NUMERIC(9,2) = NULL OUTPUT,
		@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
		@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
		@buysOnClient NUMERIC(9,2) = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Не найден указанный оператор'';
			RETURN(1)
		END
		DECLARE @clientsQty INT;
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END

		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
				@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
				@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				AND ce.pos = @pos;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator				
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND ce.id NOT IN (SELECT cheque FROM cheque INNER JOIN pos ON cheque.pos = pos.id where refund = 1 AND pos.partner = @partner)
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
				AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1);

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
				AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH cheques AS
			(
				SELECT 
					ce.id, 
					ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
				FROM
					cheque AS ce
					INNER JOIN card AS cd ON ce.card = cd.number
				WHERE
					cd.operator = @operator
					AND (ce.refund IS NULL OR ce.refund = 0)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.pos = @pos
					AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
			)
			SELECT
				@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
			FROM
				clientoperator AS cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.pos = @pos
				AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)

			SELECT
				@clientsQty = COUNT(DISTINCT cr.client)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON cd.number = ce.card
			WHERE
				cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.pos = @pos
				AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
		END

		IF (@clientsQty > 0)
		BEGIN
			SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
		END
		ELSE
		BEGIN
			SET @buysOnClient = 0
		END
		RETURN(0)
	END'

	--Изменено. Исправлен подсчёт количества клиентов с разделением по возрасту.
	IF OBJECT_ID(N'SegmentationAge', 'P') IS NOT NULL DROP PROCEDURE SegmentationAge
	EXEC sp_executesql @statement = N'CREATE PROCEDURE SegmentationAge @operator SMALLINT,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@less25 INT = NULL OUTPUT,
			@more25less35 INT = NULL OUTPUT,
			@more35less45 INT = NULL OUTPUT,
			@more45 INT = NULL OUTPUT,
			@unknown INT = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END
		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@less25 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more25less35 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more35less45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),
				@unknown = SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END)
			FROM
				clientoperator
			WHERE
				operator = @operator
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@less25 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more25less35 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more35less45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),
				@unknown = SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos IN (SELECT id FROM pos WHERE partner = @partner)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@less25 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more25less35 = SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more35less45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),
				@more45 = SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),
				@unknown = SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos = @pos
		END
		RETURN(0)
	END'

	--Изменено. Исправлен количественный расчёт показателей.
	IF OBJECT_ID(N'ClientBaseStructure', 'P') IS NOT NULL DROP PROCEDURE ClientBaseStructure
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientBaseStructure
			@operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@menQty INT = NULL OUTPUT,
			@womenQty INT = NULL OUTPUT,
			@unknownGender INT = NULL OUTPUT,
			@clientsWithBuys INT = NULL OUTPUT,
			@clientsWithoutBuys INT = NULL OUTPUT,
			@clientsWithTenBuys INT = NULL OUTPUT,
			@clientsWithOneBuys INT = NULL OUTPUT,
			@clientsWithPhone INT = NULL OUTPUT,
			@clientsWithEmail INT = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END
		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@menQty = COALESCE(SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END), 0),
				@womenQty = COALESCE(SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END), 0),
				@unknownGender = COALESCE(SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END), 0)
			FROM
				clientoperator
			WHERE
				operator = @operator;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@menQty = COALESCE(SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END), 0),
				@womenQty = COALESCE(SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END), 0),
				@unknownGender = COALESCE(SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END), 0)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@menQty = COALESCE(SUM(CASE WHEN gender = 1 THEN 1 ELSE 0 END), 0),
				@womenQty = COALESCE(SUM(CASE WHEN gender = 0 THEN 1 ELSE 0 END), 0),
				@unknownGender = COALESCE(SUM(CASE WHEN gender IS NULL THEN 1 ELSE 0 END), 0)
			FROM
				clientoperator
			WHERE
				operator = @operator
				AND pos = @pos;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@clientsWithBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT
				@clientsWithoutBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				(ce.id IS NULL
				OR (
					(ce.refund = 0 OR ce.refund IS NULL) 
					AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
					AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
				))
				AND cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				@clientsWithBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
				AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT
				@clientsWithoutBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				(ce.id IS NULL
				OR (
					(ce.refund = 0 OR ce.refund IS NULL) 
					AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
					AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
				))
				AND cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				@clientsWithBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				INNER JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				cr.operator = @operator
				AND cr.pos = @pos
				AND ce.pos = @pos
				AND (ce.refund IS NULL OR ce.refund = 0)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT
				@clientsWithoutBuys = COUNT(DISTINCT cd.number)
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cheque AS ce ON ce.card = cd.number
			WHERE
				(ce.id IS NULL
				OR (
					(ce.refund = 0 OR ce.refund IS NULL) 
					AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
					AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
				))
				AND cr.operator = @operator
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND cr.pos = @pos;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND ce.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @clientsWithTenBuys = COUNT(number) FROM CTE;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND ce.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @clientsWithOneBuys = COUNT(number) FROM CTE;
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL;
			SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND phone IS NOT NULL;
			SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND email IS NOT NULL;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT @clientsWithPhone = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND phone IS NOT NULL;
			SELECT @clientsWithEmail = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND email IS NOT NULL;
		END

		RETURN(0)
	END'

	--Изменено. Исправлены расчёты данных для диаграмм "структура клиентской базы" и "активность клиентской базы"
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@clientActiveQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (@partner = 0)
		BEGIN
			SET @partner = NULL;
		END
		IF (@pos = 0)
		BEGIN
			SET @pos = NULL;
		END
		DECLARE @gainBuys NUMERIC(9,2),
				@gainRefund NUMERIC(9,2)
		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'');
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01''));
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
			SET @clientQty = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator);
			SET @clientActiveQty = (SELECT 
										COUNT(DISTINCT cr.client) 
									FROM 
										clientoperator AS cr
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON cd.number = ce.card
									WHERE 
										cr.operator = @operator
										AND (ce.refund IS NULL OR ce.refund = 0)
										AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @clientQty = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @clientActiveQty = (SELECT 
										COUNT(DISTINCT cr.client) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON ce.card = cd.number
									WHERE 
										cr.operator = @operator 
										AND (ce.refund IS NULL OR ce.refund = 0)
										AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
										AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos = @pos);
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos = @pos);
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos = @pos);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos = @pos);
			SET @clientQty = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos);
			SET @clientActiveQty = (SELECT 
										COUNT(DISTINCT cr.client) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON ce.card = cd.number
									WHERE 
										cr.operator = @operator 
										AND (ce.refund IS NULL OR ce.refund = 0)
										AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
										AND ce.pos = @pos
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			--@gainBuys NUMERIC(9,2),
			--@gainRefund NUMERIC(9,2)

			SELECT 
				@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT
				@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM
				cheque
			WHERE
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1;

			SET @gain = @gainBuys - @gainRefund
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT 
				@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT
				@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM
				cheque
			WHERE
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1;

			SET @gain = @gainBuys - @gainRefund
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				pos = @pos
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT
				@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM
				cheque
			WHERE
				partner = @partner
				AND pos = @pos
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1;

			SET @gain = @gainBuys - @gainRefund
		END

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2),  @buyWeekdayQty NUMERIC(9,2), @buyWeekoffQty NUMERIC(9,2), @buyQty NUMERIC(9,2);

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator) 
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner 
				AND (refund IS NULL OR refund = 0) 
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (cancelled IS NULL OR cancelled = 0);
		END

		IF(@buyQty > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus > 0 
				AND (refund = 0 OR refund IS NULL)
				AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND (cheque IS NOT NULL OR source = 1) 
				AND (refund = 0 OR refund IS NULL)
				AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);
		END

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (SELECT 
									COUNT(id) 
								FROM 
									bonus 
								WHERE 
									operator = @operator 
									AND bonus > 0 
									AND (refund = 0 OR refund IS NULL)
									AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
										AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND ce.pos = @pos
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
										AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								);
		END

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(id) 
										FROM 
											bonus 
										WHERE 
											operator = @operator 
											AND bonus < 0 
											AND (cheque IS NOT NULL OR source = 1) 
											AND (refund = 0 OR refund IS NULL)
											AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND bs.bonus < 0 
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND bs.bonus < 0 
											AND ce.pos = @pos
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									)
		END

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos = @pos
								)/@clientQty
			END
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		IF(@addedBonus > 0)
		BEGIN
			SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
		END
		ELSE
		BEGIN
			SET @avgDiscount = 0
		END
	END'

	--Изменено. Исправлен расчёт выручки. 
	IF OBJECT_ID(N'GainOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE GainOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE GainOperatorPeriod @operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@from DATE = NULL,
			@to DATE = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
		AS
		BEGIN
			IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
			BEGIN
				SET @errormessage = N''Не найден оператор''
				RETURN(1)
			END
			IF(@partner = 0)
			BEGIN
				SET @partner = NULL
			END

			IF(@pos = 0)
			BEGIN
				SET @pos = NULL
			END
			DECLARE @table AS table
			(
				gain NUMERIC(9,2),
				avgcheque NUMERIC(9,2),
				monthnum INT
			)

			DECLARE @gainTable AS TABLE
			(
				gain NUMERIC(9,2),
				monthnum INT
			)

			DECLARE @gainRefund AS TABLE
			(
				gainRefund NUMERIC(9,2),
				monthNum INT
			)

			IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND (ce.refund = 0 OR ce.refund IS NULL)
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainRefund(gainRefund, monthNum)
				SELECT
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND ce.refund = 1
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END
			ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner = @partner 
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner 
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND (ce.refund = 0 OR ce.refund IS NULL)
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainRefund(gainRefund, monthNum)
				SELECT
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND ce.refund = 1
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END
			ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner = @partner
					AND ce.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner
					AND ce.pos = @pos
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND (ce.refund = 0 OR ce.refund IS NULL)
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainRefund(gainRefund, monthNum)
				SELECT
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND ce.refund = 1
					AND ce.pos = @pos
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END

			MERGE @gainTable AS target
				USING @gainRefund AS source
				ON (target.monthnum = source.monthnum)
				WHEN MATCHED THEN UPDATE SET gain = gain - source.gainRefund
				WHEN NOT MATCHED THEN INSERT (gain, monthnum) VALUES((-1)*source.gainRefund, source.monthnum);

			MERGE @table AS target
				USING @gaintable AS source
				ON (target.monthnum = source.monthnum)
				WHEN MATCHED THEN UPDATE SET gain = source.gain
				WHEN NOT MATCHED THEN INSERT (gain, avgcheque, monthnum) VALUES(source.gain, 0, source.monthnum);

			SELECT
				gain,
				avgcheque,
				monthnum
			FROM
				@table AS te
			RETURN(0)
		END'

	--Изменено. Добавлены партнёр и ТТ.
	IF OBJECT_ID(N'RefundOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE RefundOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE RefundOperatorPeriod @operator SMALLINT = NULL, 
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@from DATE = NULL, 
		@to DATE = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END

		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END

		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS  NULL AND @pos IS NULL)
		BEGIN
			SELECT
				DATEPART(MONTH, ce.chequetime) AS monthNum,
				(-1)*SUM(ce.amount) AS chequesum
			FROM
				cheque AS ce
			WHERE
				ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
				AND ce.refund = 1 
				AND ce.proctime > @from
				AND ce.proctime <= @to
			GROUP BY
				DATEPART(MONTH, ce.chequetime)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				DATEPART(MONTH, ce.chequetime) AS monthNum,
				(-1)*SUM(ce.amount) AS chequesum
			FROM
				cheque AS ce
			WHERE
				ce.partner = @partner 
				AND ce.refund = 1 
				AND ce.proctime > @from
				AND ce.proctime <= @to
			GROUP BY
				DATEPART(MONTH, ce.chequetime)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				DATEPART(MONTH, ce.chequetime) AS monthNum,
				(-1)*SUM(ce.amount) AS chequesum
			FROM
				cheque AS ce
			WHERE
				ce.partner = @partner
				AND ce.pos = @pos 
				AND ce.refund = 1 
				AND ce.proctime > @from
				AND ce.proctime <= @to
			GROUP BY
				DATEPART(MONTH, ce.chequetime)
		END
		RETURN(0)
	END'

	--Изменено. Добавлены партнёр и ТТ входными параметрами.
	IF OBJECT_ID(N'ClientOperatorPeriod', 'P') IS NOT NULL DROP PROCEDURE ClientOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientOperatorPeriod @operator SMALLINT = NULL, 
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@from DATE = NULL, 
		@to DATE = NULL, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден оператор''
			RETURN(1)
		END
		IF(@partner = 0)
		BEGIN
			SET @partner = NULL
		END

		IF(@pos = 0)
		BEGIN
			SET @pos = NULL
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				DATEPART(MONTH, cr.regdate),
				COUNT(client)
			FROM
				clientoperator AS cr
			WHERE
				cr.operator = @operator
				AND cr.regdate > @from
				AND cr.regdate <= @to
			GROUP BY
				DATEPART(MONTH, cr.regdate)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT
				DATEPART(MONTH, cr.regdate),
				COUNT(client)
			FROM
				clientoperator AS cr
				INNER JOIN pos AS ps ON cr.pos = ps.id
			WHERE
				cr.operator = @operator
				AND ps.partner = @partner
				AND cr.regdate > @from
				AND cr.regdate <= @to
			GROUP BY
				DATEPART(MONTH, cr.regdate)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT
				DATEPART(MONTH, cr.regdate),
				COUNT(client)
			FROM
				clientoperator AS cr
			WHERE
				cr.operator = @operator
				AND cr.pos = @pos
				AND cr.regdate > @from
				AND cr.regdate <= @to
			GROUP BY
				DATEPART(MONTH, cr.regdate)
		END
		RETURN(0)
	END'

END ELSE IF @version = 372 BEGIN
	SELECT '3.73 20180212 Смирнов'

	--Изменено. Добавлены партнёр и ТТ.
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos NVARCHAR(10) = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		IF (@partner = 0)
		BEGIN
			SET @partner = NULL;
			SET @pos = NULL;
		END
		IF (@pos = N'''')
		BEGIN
			SET @pos = NULL;
		END
		IF(@operator IS NOT NULL AND @operator > 0 AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
			RETURN(0)
		END
		ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
			RETURN(0)
		END
		ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NOT NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN pos AS ps ON cr.pos = ps.id
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
				AND ps.code = @pos
			RETURN(0)
		END
		ELSE
		BEGIN
			SET @errormessage = N''Не указаны данные для выборки''
			RETURN(2)
		END
	END'

	--Изменено. Исправлен расчёт выручки и бонусов
	IF OBJECT_ID(N'CardBonusesByMonth', 'P') IS NOT NULL DROP PROCEDURE CardBonusesByMonth
	EXEC sp_executesql @statement = N'CREATE PROCEDURE CardBonusesByMonth @card BIGINT = NULL,
		@from DATE = NULL,
		@to DATE = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT number FROM card WHERE number = @card)
		BEGIN
			SET @errormessage = N''Не найден номер карты''
			RETURN(1)
		END
		
		DECLARE @resultTable AS TABLE
		(
			monthnum INT,
			gain NUMERIC(9,2),
			bonusAdded NUMERIC(9,2),
			bonusRedeemed NUMERIC(9,2),
			avgCheque NUMERIC(9,2)
		)

		INSERT INTO @resultTable(gain, monthnum)
		SELECT 
			SUM(ABS(COALESCE(amount, 0)) - ABS(COALESCE(paidbybonus, 0))) AS gain,
			DATEPART(MONTH, proctime)
		FROM 
			cheque AS ce
		WHERE
			(refund = 0 OR refund IS NULL)
			AND (cancelled IS NULL OR cancelled = 0)
			AND proctime IS NOT NULL
			AND proctime >= @from 
			AND proctime < @to	
			AND card = @card
		GROUP BY
			DATEPART(MONTH, proctime);

		WITH cte AS
		(
			SELECT 
				SUM(ABS(COALESCE(amount, 0)) - ABS(COALESCE(paidbybonus, 0))) AS gainRefund,
				DATEPART(MONTH, proctime) AS monthnum
			FROM 
				cheque AS ce
			WHERE
				refund = 1 
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime IS NOT NULL
				AND proctime >= @from 
				AND proctime < @to
				AND card = @card
			GROUP BY
				DATEPART(MONTH, proctime)
		)

		UPDATE rt
			SET rt.gain = rt.gain - ce.gainRefund
		FROM
			@resultTable AS rt
			INNER JOIN cte AS ce ON rt.monthnum = ce.monthnum;

		WITH cte AS
		(
			SELECT
				DATEPART(MONTH, ce.proctime) AS monthNum,
				SUM(CASE
						WHEN bs.bonus > 0 THEN bs.bonus
						ELSE 0
					END) AS bonusAdded,
				SUM(CASE
						WHEN bs.bonus < 0 THEN ABS(bs.bonus)
						ELSE 0
					END) AS bonusRedeemed
			FROM
				cheque AS ce
				INNER JOIN bonus AS bs ON ce.id = bs.cheque
			WHERE
				(ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.proctime IS NOT NULL
				AND ce.proctime >= @from 
				AND ce.proctime < @to
				AND ce.card = @card
				AND (ce.refund = 0 OR ce.refund IS NULL)
				AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1 AND card = @card)
			GROUP BY
				DATEPART(MONTH, ce.proctime)
		)
		UPDATE rt
			SET rt.bonusAdded = ce.bonusAdded,
				rt.bonusRedeemed = ce.bonusRedeemed
		FROM
			@resultTable AS rt
			INNER JOIN cte AS ce ON rt.monthnum = ce.monthnum;

		WITH cteAvgCheque AS
		(
			SELECT
				DATEPART(MONTH, ce.proctime) AS monthNum,
				AVG(ce.amount) AS avgCheque
			FROM
				cheque AS ce
			WHERE
				(ce.cancelled IS NULL OR ce.cancelled = 0)
				AND ce.proctime IS NOT NULL
				AND ce.proctime >= @from 
				AND ce.proctime < @to
				AND ce.card = @card
				AND (ce.refund = 0 OR ce.refund IS NULL)
			GROUP BY
				DATEPART(MONTH, ce.proctime)
		)
		UPDATE rt
			SET rt.avgCheque = ce.avgCheque
		FROM
			@resultTable AS rt
			INNER JOIN cteAvgCheque AS ce ON rt.monthnum = ce.monthnum;

		SELECT 
			COALESCE(bonusAdded, 0) AS bonusAdded,
			COALESCE(bonusRedeemed, 0) AS bonusRedeemed,
			COALESCE(avgCheque, 0) AS avgcheque,
			COALESCE(gain, 0) AS gain,
			COALESCE(monthnum, 0) AS monthnum
		FROM 
			@resultTable 
		ORDER BY 
			monthnum

		RETURN(0)
	END'

END ELSE IF @version = 373 BEGIN
	SELECT '3.74 20180216 Смирнов'

	--Изменено. Добавлена выборка общего текста и исправлена ошибка записи текста отправленной смс при пустом сообщении
	IF OBJECT_ID('ClientSetSendPassword') IS NOT NULL DROP PROCEDURE ClientSetSendPassword
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientSetSendPassword @operator SMALLINT = NULL,
		@client INT = NULL,
		@phone BIGINT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @digit INT = NULL,
				@smsusername NVARCHAR(20) = NULL, 
				@smspassword NVARCHAR(20) = NULL, 
				@smssender NVARCHAR(20) = NULL, 
				@smsprovider NVARCHAR(20) = NULL,
				@text NVARCHAR(200) = NULL,
				@clientpassword NVARCHAR(20) = NULL		

		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF NOT EXISTS(SELECT client FROM clientoperator WHERE client = @client AND operator = @operator AND phone = @phone)
		BEGIN
			SET @errormessage = N''Не найден указанный клиент у указанного оператора''
			RETURN(2)
		END

		SELECT @clientpassword = password FROM clientoperator WHERE phone = @phone AND client = @client AND operator = @operator
		IF @clientpassword IS NOT NULL
		BEGIN
			RETURN(0)
		END

		SELECT @digit = FLOOR(RAND() * POWER(CAST(10 as BIGINT), 8))
		SET @clientpassword = CAST(@digit AS NVARCHAR(20))
		SET @smsprovider = ''greensms''
		SELECT @smsprovider = smsprovider, @smsusername = smsusername, @smspassword = smspassword, @smssender = smssender FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN
			SELECT @smsusername = value FROM parameter WHERE name = ''smsusername''
			SELECT @smspassword = value FROM parameter WHERE name = ''smspassword''
			SELECT @smssender = value FROM parameter WHERE name = ''smssender''
		END		
		UPDATE clientoperator SET password = @clientpassword WHERE client = @client AND operator = @operator
		SELECT @text = REPLACE(value, N''{0}'', @clientpassword) FROM parameter WHERE operator = @operator AND name = N''smspaternpassword''
		IF @smsprovider = ''greensms''
			EXEC SmsSendGreenSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
		ELSE IF @smsprovider = ''terasms''
			EXEC SmsSendTeraSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
		IF @text IS NULL SET @text = ''Текст сообщения в процедуре ClientSetSendPassword не заполнен''
		INSERT INTO message (client, text, rectime, phone, status, provider, operator) VALUES (@client, @text, GETDATE(), @phone, 1, @smsprovider, @operator)
	END'

	--Изменено. Изменён текст сообщения.
	IF OBJECT_ID('MessageAdd') IS NOT NULL DROP PROCEDURE MessageAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE MessageAdd
		@client INT = NULL,
		@text NVARCHAR(1000) = NULL,
		@subject NVARCHAR(100) = NULL,
		@email NVARCHAR(100) = NULL,
		@operator SMALLINT = NULL,
		@errormessage NVARCHAR(100) OUTPUT
		AS SET NOCOUNT ON
		IF @client = 0 SET @client = NULL IF @text = '''' SET @text = NULL IF @subject = '''' SET @subject = NULL IF @email = '''' SET @email = NULL
		IF @text IS NULL 
		BEGIN 
			SET @errormessage = ''Не задан текст сообщения'' 
			RETURN(1) 
		END
		IF @subject IS NULL 
		BEGIN 
			SET @errormessage = ''Не задана заголовок сообщения'' 
			RETURN(2) 
		END
		IF @operator IS NULL 
		BEGIN 
			SET @errormessage = N''Не задан оператор'' 
			RETURN(3) 
		END
		IF @text IS NULL SET @text = ''Текст сообщения в процедуре MessageAdd не заполнен''
		IF @client IS NOT NULL 
		BEGIN 
			INSERT INTO message (client, text, rectime, subject, operator) 
						VALUES (@client, @text, GETDATE(), @subject, @operator) 
		END
		IF @email IS NOT NULL 
		BEGIN 
			INSERT INTO message (email, text, rectime, subject, operator) 
						VALUES (@email, @text, GETDATE(), @subject, @operator) 
		END

		DECLARE @header NVARCHAR(100) = NULL, 
				@emailaddress NVARCHAR(20) = NULL, 
				@emailsender NVARCHAR(20) = NULL, 
				@operatorname NVARCHAR(50) = NULL, 
				@operatorlkuaddress NVARCHAR(200) = NULL,
				@emailto NVARCHAR(50) = NULL,
				@firstSymbol NVARCHAR(2) = SUBSTRING(@text, 1, 2),
				@deviceName NVARCHAR(50) = N''''
		IF(@client IS NOT NULL)
		BEGIN
			IF(@firstSymbol = N''_a'')
			BEGIN
				SET @deviceName = N''android''
				SET @text = SUBSTRING(@text, 3, LEN(@text))
			END
			ELSE IF (@firstSymbol = N''_i'')
			BEGIN
				SET @deviceName = N''iOS''
				SET @text = SUBSTRING(@text, 3, LEN(@text))
			END
			ELSE
			BEGIN
				SET @deviceName = N''Сайт''
			END

			SET @text = N''Источник обращения - '' + @deviceName + N''
Статус пользователя - участник ПЛ
Данные пользователя - '' + (SELECT COALESCE(surname + N'' '', N'''') + COALESCE(name + N'' '', N'''') + COALESCE(patronymic + N'' '', N'''') + CAST(phone AS NVARCHAR) + COALESCE(N'' '' + email, N'''') FROM clientoperator WHERE client = @client AND operator = @operator) + N''
Содержание сообщения - '' + @text
		END

		SELECT @emailsender = emailsender, @emailaddress = emailaddress, @operatorname = ISNULL(name, ''''), @operatorlkuaddress = ISNULL(lkuaddress, ''''), @emailto = email FROM operator WHERE id = @operator
		IF(@emailaddress IS NOT NULL AND @emailsender IS NOT NULL AND @emailTo IS NOT NULL)
		BEGIN
			EXEC EmailSendPulse @emailTo = @emailto, @header = @subject, @body = @text, @fromHeader = @emailsender, @from = @emailaddress
		END
	RETURN (0)'

END ELSE IF @version = 374 BEGIN
	SELECT '3.75 20180220 Смирнов'

	--Изменено. Добавлены дата регистрации и регистратор мобильного устройства
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		IF(@from IS NOT NULL)
		BEGIN
			SET @beginDate = @from
		END
		ELSE
		BEGIN
			SET @beginDate = (SELECT MIN(regdate) FROM clientoperator WHERE operator = @operator)
		END

		IF(@to IS NOT NULL)
		BEGIN
			SET @to = DATEADD(DAY, 1, (@to))		
			SET @endDate = @to
		END
		ELSE
		BEGIN
			SET @endDate = GETDATE()
		END

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			AND (cancelled IS NULL OR cancelled = 0)
			
		SELECT
			(SELECT smssender FROM operator WHERE id = @operator) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''M5TT21'' AND pr.operator = @operator), N''Lcpos'')
				WHEN cr.pos IS NULL AND cr.appdevice IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
				WHEN cr.pos IS NULL AND cr.appdevice IS NOT NULL AND cr.password IS NOT NULL THEN cr.appregistrator
				ELSE N''Нет''
			END AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			COALESCE((SELECT condition FROM level WHERE id = cd.level), (SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator)) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки],
			cr.regdate
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

END ELSE IF @version = 375 BEGIN
	SELECT '3.76 20180227 Смирнов'

	--Добавлено. Возвращает бонусы и их типы по номеру карты
	IF OBJECT_ID('CardBonusesType', 'P') IS NOT NULL DROP PROCEDURE CardBonusesType
	EXEC sp_executesql @statement = N'CREATE PROCEDURE CardBonusesType
		@card BIGINT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF(NOT EXISTS(SELECT number FROM card WHERE number = @card))
		BEGIN
			SET @errormessage = N''Указанный номер карты не существует''
			RETURN(1)
		END
		SELECT
			be.name,
			bs.proctime,
			CASE	
				WHEN bs.bonus > 0 AND be.code <> 7 THEN bs.bonus
				ELSE 0
			END AS bonusAdded,
			CASE	
				WHEN bs.bonus < 0 AND be.code <> 7 THEN bs.bonus
				ELSE 0
			END AS bonusRedeemed,
			CASE
				WHEN be.code = 7 THEN bs.bonus
				ELSE 0
			END AS bonusBurn
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			bs.card = @card
			AND be.code > 1
		RETURN(0)
	END'

	--Исправлено. Расчёт начислений по позициям чека при мягком чеке
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, 
			@operator SMALLINT = NULL, 
			@client INT, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@bonustime DATETIME = NULL, 
			@bonuscheque INT = NULL, 
			@bonusrefund BIT = NULL, 
			@checkredeem BIT = NULL, 
			@freecard BIT = NULL, 
			@status TINYINT = NULL, 
			@notsendsms BIT = NULL, 
			@idoc int = NULL, 
			@code NVARCHAR(10), 
			@price NUMERIC(9,2), 
			@quantity NUMERIC(9,2), 
			@iamount NUMERIC(9,2), 
			@ipaidbybonus NUMERIC(9,2), 
			@minprice NUMERIC(9,2), 
			@scard NVARCHAR(20), 
			@sphone NVARCHAR(10), 
			@schequetime NVARCHAR(20), 
			@spartner NVARCHAR(10), 
			@samount NVARCHAR(10), 
			@sprice NVARCHAR(10), 
			@squantity NVARCHAR(10), 
			@siamount NVARCHAR(10), 
			@sposition NVARCHAR(10), 
			@position TINYINT, 
			@norules BIT = NULL, 
			@now DATETIME = GETDATE(), 
			@itemstring NVARCHAR(100) = NULL, 
			@bonus NUMERIC(9,2) = NULL, 
			@itemscount INT = 0, 
			@operatormaxredeem NUMERIC(9,2) = NULL, 
			@partnermaxredeem NUMERIC(9,2) = NULL, 
			@maxredeempercent NUMERIC(9,2) = NULL, 
			@i INT = 0, 
			@imaxredeem NUMERIC(9,2) = NULL, 
			@redeem NUMERIC(9,2) = NULL, 
			@itemtable ChequeItems, 
			@inoadd BIT = NULL, 
			@inoredeem BIT = NULL, 
			@redeemedbefore NUMERIC(9,2) = NULL, 
			@itemid INT = NULL, 
			@chequeitemid INT = NULL, 
			@itemsum NUMERIC(9,2) = 0, 
			@lastchequetime DATETIME = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL, 
			@purchaseid INT = NULL, 
			@calcbalance NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE IF @maxredeempercent > 0 AND @maxredeempercent < 100 SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @pos = @posid, @cheque = @cheque, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF (@added IS NULL OR @added = 0) SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	RETURN(0)'

END ELSE IF @version = 376 BEGIN
	SELECT '3.77 20180310 Смирнов'

	--Добавлено. Флаг принадлежности faq к lcmanager
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'lcmanager' AND id = (SELECT id FROM sysobjects WHERE name = 'faq'))
		ALTER TABLE faq ADD lcmanager BIT

	--Добавлено. Флаг принадлежности faq к мобильному приложению
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'mobile' AND id = (SELECT id FROM sysobjects WHERE name = 'faq'))
		ALTER TABLE faq ADD mobile BIT

	--Добавлено. Флаг принадлежности faq к сайту
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'site' AND id = (SELECT id FROM sysobjects WHERE name = 'faq'))
		ALTER TABLE faq ADD site BIT

	--Изменено. Faq возвращается для каждого свой
	IF OBJECT_ID('FaqGet') IS NOT NULL DROP PROCEDURE FaqGet
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE FaqGet
			@operator SMALLINT = NULL,
			@lcmanager BIT = NULL,
			@site BIT = NULL,
			@mobile BIT = NULL,
			@errormessage NVARCHAR(100) OUTPUT
		AS 
		BEGIN
			SET NOCOUNT ON
			IF EXISTS (SELECT id FROM faq WHERE operator = @operator)
			BEGIN 
				IF(@lcmanager = 1 AND EXISTS(SELECT id FROM faq WHERE lcmanager = 1 AND operator = @operator))
				BEGIN
					SELECT
						question,
						answer
					FROM
						faq
					WHERE
						lcmanager = 1
						AND operator = @operator
				END
				ELSE IF (@site = 1 AND EXISTS(SELECT id FROM faq WHERE site = 1 AND operator = @operator))
				BEGIN
					SELECT
						question,
						answer
					FROM
						faq
					WHERE
						site = 1
						AND operator = @operator
				END
				ELSE IF (EXISTS(SELECT id FROM faq WHERE mobile = 1 AND operator = @operator))
				BEGIN
					SELECT
						question,
						answer
					FROM
						faq
					WHERE
						mobile = 1
						AND operator = @operator
				END
				ELSE
				BEGIN
					SET @errormessage = N''Faq пуст''
					RETURN (1) 
				END
			END
			ELSE IF EXISTS(SELECT id FROM faq WHERE operator IS NULL)
			BEGIN
				IF(@lcmanager = 1 AND EXISTS(SELECT id FROM faq WHERE lcmanager = 1 AND operator IS NULL))
				BEGIN
					SELECT
						question,
						answer
					FROM
						faq
					WHERE
						lcmanager = 1
						AND operator IS NULL
				END
				ELSE IF (@site = 1 AND EXISTS(SELECT id FROM faq WHERE site = 1 AND operator IS NULL))
				BEGIN
					SELECT
						question,
						answer
					FROM
						faq
					WHERE
						site = 1
						AND operator IS NULL
				END
				ELSE IF (EXISTS(SELECT id FROM faq WHERE mobile = 1 AND operator IS NULL))
				BEGIN
					SELECT
						question,
						answer
					FROM
						faq
					WHERE
						mobile = 1
						AND operator IS NULL
				END
				ELSE
				BEGIN
					SELECT 
						question, 
						answer 
					FROM 
						faq 
					WHERE 
						operator IS NULL
						AND lcmanager IS NULL
						AND site IS NULL
						AND mobile IS NULL
				END			
			END
			ELSE
			BEGIN
				SET @errormessage = N''Faq пуст''
				RETURN (1) 
			END
			RETURN(0)
		END'

	--Добавлено. Таблица хранит сопоставление блока lc-manager и название в БД.
	IF OBJECT_ID(N'roledescription') IS NULL
	BEGIN
		CREATE TABLE roledescription
		(
			id INT,
			name NVARCHAR(50),
			description NVARCHAR(1000)
		)
	END

	--Добавлено. Сопоставление роли и блока lc-manager
	IF OBJECT_ID(N'roleroledescription') IS NULL
	BEGIN
		CREATE TABLE roleroledescription
		(
			role INT,
			roledescription INT
		)
	END

	IF(OBJECT_ID('FK_usersrole_users', 'F') IS NULL)
		ALTER TABLE roleroledescription ADD CONSTRAINT FK_roleroledescription_roledescription FOREIGN KEY (roledescription) REFERENCES roledescription(id)

	IF(OBJECT_ID('FK_usersrole_role', 'F') IS NULL)
		ALTER TABLE roleroledescription ADD CONSTRAINT FK_roleroledescription_role FOREIGN KEY (role) REFERENCES role(id)

	--Идентификатор записи в таблице.
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'id' AND id = (SELECT id FROM sysobjects WHERE name = 'manager'))
		ALTER TABLE manager ADD id INT IDENTITY(1,1) PRIMARY KEY

	--Изменено. Номер телефона заменён на логин и число на строку.
	IF OBJECT_ID('ManagerLogin') IS NOT NULL DROP PROCEDURE ManagerLogin
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ManagerLogin
			@login NVARCHAR(20) = NULL, 
			@password NVARCHAR(20) = NULL,
			@operator SMALLINT = NULL OUTPUT,
			@partner SMALLINT = NULL OUTPUT,
			@pos SMALLINT = NULL OUTPUT,
			@posCode NVARCHAR(10) = NULL OUTPUT,
			@rolename NVARCHAR(50) = NULL OUTPUT,
			@permissioncode NVARCHAR(20) = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		SELECT
			@operator = mr.operator,
			@partner = mr.partner,
			@posCode = (SELECT code FROM pos WHERE id = mr.pos),
			@pos = mr.pos,
			@rolename = re.name,
			@permissioncode = pn.code
		FROM
			Users AS us
			INNER JOIN manager AS mr ON us.id = mr.users
			INNER JOIN usersrole AS ce ON ce.users = us.id
			INNER JOIN role AS re ON ce.role = re.id
			INNER JOIN rolepermission AS rn ON re.id = rn.role
			INNER JOIN permission AS pn ON rn.permission = pn.id
		WHERE
			us.login = @login
			AND us.password = @password

		IF @@ROWCOUNT <> 1 
		BEGIN
			SET @operator = NULL
			SET	@partner = NULL
			SET @pos = NULL
			SET	@posCode = NULL
			SET	@rolename = NULL
			SET	@permissioncode = NULL
			SET @errormessage = N''Не найдены данные для учётной записи''
		
			RETURN(2)
		END
		RETURN(0)
	END'

END ELSE IF @version = 377 BEGIN
	SELECT '3.78 20180313 Смирнов'

	--Изменено. Исправлен расчёт бонусов не за покупки.
	IF OBJECT_ID(N'ClientAnalyticMoney', 'P') IS NOT NULL DROP PROCEDURE ClientAnalyticMoney
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ClientAnalyticMoney @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos SMALLINT = NULL,
		@withBirthDate INT = NULL OUTPUT,
		@withoutBirthDate INT = NULL OUTPUT,
		@withPhone INT = NULL OUTPUT,
		@withEmail INT = NULL OUTPUT,
		@moreTenBuys INT = NULL OUTPUT,
		@withOneBuy INT = NULL OUTPUT,
		@gain NUMERIC(9,2) = NULL OUTPUT,
		@avgCheque NUMERIC(9,2) = NULL OUTPUT,
		@buysWeekdays INT = NULL OUTPUT,
		@buysWeekOff INT = NULL OUTPUT,
		@addedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgCharge NUMERIC(9,2) = NULL OUTPUT,
		@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
		@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
		@avgBalance NUMERIC(9,2) = NULL OUTPUT,
		@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
		@clientQty INT = NULL OUTPUT,
		@clientActiveQty INT = NULL OUTPUT,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF (@partner = 0)
		BEGIN
			SET @partner = NULL;
		END
		IF (@pos = 0)
		BEGIN
			SET @pos = NULL;
		END
		DECLARE @gainBuys NUMERIC(9,2),
				@gainRefund NUMERIC(9,2)
		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'');
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01''));
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL);
			SET @clientQty = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator);
			SET @clientActiveQty = (SELECT 
										COUNT(DISTINCT cr.client) 
									FROM 
										clientoperator AS cr
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON cd.number = ce.card
									WHERE 
										cr.operator = @operator
										AND (ce.refund IS NULL OR ce.refund = 0)
										AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @clientQty = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner));
			SET @clientActiveQty = (SELECT 
										COUNT(DISTINCT cr.client) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON ce.card = cd.number
									WHERE 
										cr.operator = @operator 
										AND (ce.refund IS NULL OR ce.refund = 0)
										AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
										AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos = @pos);
			SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos = @pos);
			SET @withPhone = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND pos = @pos);
			SET @withEmail = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND pos = @pos);
			SET @clientQty = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos);
			SET @clientActiveQty = (SELECT 
										COUNT(DISTINCT cr.client) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
										INNER JOIN cheque AS ce ON ce.card = cd.number
									WHERE 
										cr.operator = @operator 
										AND (ce.refund IS NULL OR ce.refund = 0)
										AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
										AND ce.pos = @pos
									);
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) >= 10
			)
			SELECT @moreTenBuys = COUNT(number) FROM CTE;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH CTE AS
			(
				SELECT
					cd.number
				FROM
					clientoperator AS cr
					INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
					INNER JOIN cheque AS ce ON ce.card = cd.number
				WHERE
					cr.operator = @operator
					AND cr.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				GROUP BY
					cd.number
				HAVING
					COUNT(ce.id) = 1
			)
			SELECT @withOneBuy = COUNT(number) FROM CTE;
		END
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			--@gainBuys NUMERIC(9,2),
			--@gainRefund NUMERIC(9,2)

			SELECT 
				@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT
				@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM
				cheque
			WHERE
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1;

			SET @gain = @gainBuys - @gainRefund
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT 
				@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT
				@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM
				cheque
			WHERE
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1;

			SET @gain = @gainBuys - @gainRefund
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM 
				cheque 
			WHERE 
				pos = @pos
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL);

			SELECT
				@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
			FROM
				cheque
			WHERE
				partner = @partner
				AND pos = @pos
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1;

			SET @gain = @gainBuys - @gainRefund
		END

		DECLARE @buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2),  @buyWeekdayQty NUMERIC(9,2), @buyWeekoffQty NUMERIC(9,2), @buyQty NUMERIC(9,2);

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			WITH cte AS
			(
				SELECT	
					SUM(ce.amount) AS chequeSum,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT	
				@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator) 
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (cancelled IS NULL OR cancelled = 0);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner 
				AND (refund IS NULL OR refund = 0) 
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner;
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0);

			SELECT 
				@chequeSum = COALESCE(SUM(amount), 0) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (cancelled IS NULL OR cancelled = 0);
		END

		IF(@buyQty > 0)
		BEGIN
			SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
			SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
		END
		ELSE
		BEGIN
			SET @buysWeekdays = 0;
			SET @buysWeekOff = 0;
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus > 0 
				AND (refund = 0 OR refund IS NULL)
				AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus 
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND (cheque IS NOT NULL OR source = 1) 
				AND (refund = 0 OR refund IS NULL)
				AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SELECT 
				@addedBonus = COALESCE(SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				bs.operator = @operator 
				AND bs.bonus > 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);

			SELECT 
				@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
			FROM 
				bonus AS bs
				INNER JOIN cheque AS ce ON bs.cheque = ce.id
			WHERE 
				operator = @operator 
				AND bonus < 0 
				AND ce.partner = @partner
				AND ce.pos = @pos
				AND (bs.cheque IS NOT NULL OR bs.source = 1) 
				AND (bs.refund = 0 OR bs.refund IS NULL)
				AND (ce.cancelled IS NULL OR ce.cancelled = 0)
				AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1);
		END

		DECLARE @addedBonusQty INT, @redeemedBonusQty INT;
		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (SELECT 
									COUNT(id) 
								FROM 
									bonus 
								WHERE 
									operator = @operator 
									AND bonus > 0 
									AND (refund = 0 OR refund IS NULL)
									AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
								);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
										AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								);
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @addedBonusQty = (
									SELECT 
										COUNT(DISTINCT ce.id) 
									FROM 
										bonus AS bs
										INNER JOIN cheque AS ce ON bs.cheque = ce.id
									WHERE 
										bs.operator = @operator 
										AND ce.partner = @partner
										AND ce.pos = @pos
										AND bs.bonus > 0 
										AND (bs.refund = 0 OR bs.refund IS NULL)
										AND (ce.cancelled IS NULL OR ce.cancelled = 0)
										AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								);
		END

		IF(@addedBonusQty > 0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
		END
		ELSE
		BEGIN
			SET @avgCharge = 0;
		END

		IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(id) 
										FROM 
											bonus 
										WHERE 
											operator = @operator 
											AND bonus < 0 
											AND (cheque IS NOT NULL OR source = 1) 
											AND (refund = 0 OR refund IS NULL)
											AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND bs.bonus < 0 
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									)
		END
		ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @redeemedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND bs.bonus < 0 
											AND ce.pos = @pos
											AND (bs.cheque IS NOT NULL OR bs.source = 1) 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
									)
		END

		IF(@redeemedBonusQty > 0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
		END
		ELSE
		BEGIN
			SET @avgRedeem = 0;
		END

		IF(@clientQty > 0)
		BEGIN
			IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								)/@clientQty
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				SET @avgBalance = (
									SELECT 
										SUM(cd.fullbalance) 
									FROM 
										clientoperator AS cr 
										INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
									WHERE 
										cr.operator = @operator
										AND cr.pos = @pos
								)/@clientQty
			END
		END
		ELSE
		BEGIN
			SET @avgBalance = 0
		END

		IF(@addedBonus > 0)
		BEGIN
			SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
		END
		ELSE
		BEGIN
			SET @avgDiscount = 0
		END
	END'

	--Изменено. Исправлена выборка последней даты
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Reports.OperatorClient @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@errormessage nvarchar(100) OUTPUT 
	AS
	BEGIN
		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		DECLARE @beginDate DATE, @endDate DATE
		--set @beginDate = cast((cast(@year as varchar(4)) + ''0101'') as date)
		--set @endDate = cast((cast(@year+1 as varchar(4)) + ''0101'') as date)

		IF(@from IS NOT NULL)
		BEGIN
			SET @beginDate = @from
		END
		ELSE
		BEGIN
			SET @beginDate = (SELECT MIN(regdate) FROM clientoperator WHERE operator = @operator)
		END

		IF(@to IS NOT NULL)
		BEGIN
			SET @to = DATEADD(DAY, 1, (@to))		
			SET @endDate = @to
		END
		ELSE
		BEGIN
			SET @endDate = DATEADD(DAY, 1, (GETDATE()))
		END

		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)
		INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			AND (cancelled IS NULL OR cancelled = 0)
			
		SELECT
			(SELECT smssender FROM operator WHERE id = @operator) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''') + '' '' + COALESCE(address, '''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''M5TT21'' AND pr.operator = @operator), N''Lcpos'')
				WHEN cr.pos IS NULL AND cr.appdevice IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
				WHEN cr.pos IS NULL AND cr.appdevice IS NOT NULL AND cr.password IS NOT NULL THEN cr.appregistrator
				ELSE N''Нет''
			END AS address,
			COALESCE(ct.surname, '''') + '' '' + coalesce(ct.name, '''') + '' '' + COALESCE(ct.patronymic, '''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''Женский''
				WHEN 1 THEN N''Мужской''
				ELSE N''Неизвестен''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''') as email,
			cd.number,
			COALESCE(cp.Name, '''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			COALESCE((SELECT condition FROM level WHERE id = cd.level), (SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator)) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки],
			cr.regdate
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
		WHERE
			cd.operator = @operator
			AND cr.operator = @operator
			AND cr.regdate >= @beginDate
			AND cr.regdate < @endDate
		RETURN(0)
	END'

END ELSE IF @version = 378 BEGIN
	SELECT '3.79 20180318 Смирнов'

	--Изменено. Добавлен возврат списка ролей для пользователя
	IF OBJECT_ID('ManagerLogin') IS NOT NULL DROP PROCEDURE ManagerLogin
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ManagerLogin
			@login NVARCHAR(20) = NULL, 
			@password NVARCHAR(20) = NULL,
			@operator SMALLINT = NULL OUTPUT,
			@partner SMALLINT = NULL OUTPUT,
			@pos SMALLINT = NULL OUTPUT,
			@posCode NVARCHAR(10) = NULL OUTPUT,
			@rolename NVARCHAR(50) = NULL OUTPUT,
			@permissioncode NVARCHAR(20) = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @role SMALLINT = NULL
		SELECT
			@operator = mr.operator,
			@partner = mr.partner,
			@posCode = (SELECT code FROM pos WHERE id = mr.pos),
			@pos = mr.pos,
			@rolename = re.name,
			@permissioncode = pn.code,
			@role = re.id
		FROM
			Users AS us
			INNER JOIN manager AS mr ON us.id = mr.users
			INNER JOIN usersrole AS ce ON ce.users = us.id
			INNER JOIN role AS re ON ce.role = re.id
			INNER JOIN rolepermission AS rn ON re.id = rn.role
			INNER JOIN permission AS pn ON rn.permission = pn.id
		WHERE
			us.login = @login
			AND us.password = @password

		IF @@ROWCOUNT <> 1 
		BEGIN
			SET @operator = NULL
			SET	@partner = NULL
			SET @pos = NULL
			SET	@posCode = NULL
			SET	@rolename = NULL
			SET	@permissioncode = NULL
			SET @errormessage = N''Не найдены данные для учётной записи''
		
			RETURN(2)
		END

		SELECT
			rn.name
		FROM
			roleroledescription AS rrn
			INNER JOIN roledescription AS rn ON rrn.roledescription = rn.id
		WHERE
			rrn.role = @role
		RETURN(0)
	END'

	--Добавлено. Колонка идентификатор с типом identity
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'id_new' AND id = (SELECT id FROM sysobjects WHERE name = 'roledescription'))
		ALTER TABLE roledescription ADD id_new INT NOT NULL IDENTITY(1,1)
	
	--Удалено. Колонка идентификатор
	IF EXISTS(SELECT name FROM syscolumns WHERE name = 'id' AND id = (SELECT id FROM sysobjects WHERE name = 'roledescription'))
		ALTER TABLE roledescription DROP COLUMN id 

	--Переименована колонка идентификатор с identity на id
	IF EXISTS(SELECT name FROM syscolumns WHERE name = 'id_new' AND id = (SELECT id FROM sysobjects WHERE name = 'roledescription'))
		Exec sp_rename 'roledescription.id_new', 'id', 'Column'

	--Добавлен первичный ключ
	IF(OBJECT_ID('PK_roledescription', 'F') IS NULL)
		ALTER TABLE roledescription ADD CONSTRAINT PK_roledescription PRIMARY KEY CLUSTERED (id)

END ELSE IF @version = 379 BEGIN
	SELECT '3.80 20180322 Смирнов'

	--Изменено. Добавлен Идентификатор ТТ
	IF OBJECT_ID('OperatorGetPos') IS NOT NULL DROP PROCEDURE OperatorGetPos
	EXEC sp_executesql @statement = N'CREATE PROCEDURE OperatorGetPos @operator SMALLINT = NULL,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			rn.name AS region,
			cy.name AS city,
			ps.address AS posaddress,
			ps.id AS id
		FROM
			pos AS ps
			LEFT JOIN city AS cy ON ps.city = cy.id
			LEFT JOIN region AS rn ON cy.region = rn.id
		WHERE
			partner in (SELECT id FROM partner WHERE operator = @operator)
			AND ps.name <> N''Анкета_офис''
	END'

	--Изменено. Исправлено получение баланса для отправки в смс.
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, 
			@operator SMALLINT = NULL, 
			@client INT, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@bonustime DATETIME = NULL, 
			@bonuscheque INT = NULL, 
			@bonusrefund BIT = NULL, 
			@checkredeem BIT = NULL, 
			@freecard BIT = NULL, 
			@status TINYINT = NULL, 
			@notsendsms BIT = NULL, 
			@idoc int = NULL, 
			@code NVARCHAR(10), 
			@price NUMERIC(9,2), 
			@quantity NUMERIC(9,2), 
			@iamount NUMERIC(9,2), 
			@ipaidbybonus NUMERIC(9,2), 
			@minprice NUMERIC(9,2), 
			@scard NVARCHAR(20), 
			@sphone NVARCHAR(10), 
			@schequetime NVARCHAR(20), 
			@spartner NVARCHAR(10), 
			@samount NVARCHAR(10), 
			@sprice NVARCHAR(10), 
			@squantity NVARCHAR(10), 
			@siamount NVARCHAR(10), 
			@sposition NVARCHAR(10), 
			@position TINYINT, 
			@norules BIT = NULL, 
			@now DATETIME = GETDATE(), 
			@itemstring NVARCHAR(100) = NULL, 
			@bonus NUMERIC(9,2) = NULL, 
			@itemscount INT = 0, 
			@operatormaxredeem NUMERIC(9,2) = NULL, 
			@partnermaxredeem NUMERIC(9,2) = NULL, 
			@maxredeempercent NUMERIC(9,2) = NULL, 
			@i INT = 0, 
			@imaxredeem NUMERIC(9,2) = NULL, 
			@redeem NUMERIC(9,2) = NULL, 
			@itemtable ChequeItems, 
			@inoadd BIT = NULL, 
			@inoredeem BIT = NULL, 
			@redeemedbefore NUMERIC(9,2) = NULL, 
			@itemid INT = NULL, 
			@chequeitemid INT = NULL, 
			@itemsum NUMERIC(9,2) = 0, 
			@lastchequetime DATETIME = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL, 
			@purchaseid INT = NULL, 
			@calcbalance NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount - 1
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE IF @maxredeempercent > 0 AND @maxredeempercent < 100 SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @pos = @posid, @cheque = @cheque, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF (@added IS NULL OR @added = 0) SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
	BEGIN
		SELECT @balance = balance FROM card WHERE number = @card
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	END
	RETURN(0)'

END ELSE IF @version = 380 BEGIN
	SELECT '3.81 20180325 Смирнов'

	--Изменено. Добавлен список ролей доступа в lc-manager
	IF OBJECT_ID('Initiate') IS NOT NULL DROP PROCEDURE Initiate
	EXEC sp_executesql @statement = N'create procedure Initiate
	AS SET NOCOUNT ON
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailpassword'') INSERT INTO parameter (name, value) VALUES (''emailpassword'', ''no-reply0910'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailaddress'') INSERT INTO parameter (name, value) VALUES (''emailaddress'', ''no-reply@loycon.ru'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailprovider'') INSERT INTO parameter (name, value) VALUES (''emailprovider'', ''yandex'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailsender'') INSERT INTO parameter (name, value) VALUES (''emailsender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge1'') INSERT INTO parameter (name, value) VALUES (''smscharge1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge2'') INSERT INTO parameter (name, value) VALUES (''smscharge2'', N''р.Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge3'') INSERT INTO parameter (name, value) VALUES (''smscharge3'', N''б. '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smspassword'') INSERT INTO parameter (name, value) VALUES (''smspassword'', ''Yu2910aTew'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem1'') INSERT INTO parameter (name, value) VALUES (''smsredeem1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem2'') INSERT INTO parameter (name, value) VALUES (''smsredeem2'', N''Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem3'') INSERT INTO parameter (name, value) VALUES (''smsredeem3'', N'' б.
Баланс - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem4'') INSERT INTO parameter (name, value) VALUES (''smsredeem4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund1'') INSERT INTO parameter (name, value) VALUES (''smsrefund1'', N''Возврат - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund2'') INSERT INTO parameter (name, value) VALUES (''smsrefund2'', N'' р.
Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund3'') INSERT INTO parameter (name, value) VALUES (''smsrefund3'', N'' б.
Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund4'') INSERT INTO parameter (name, value) VALUES (''smsrefund4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsregcode'') INSERT INTO parameter (name, value) VALUES (''smsregcode'', ''Для завершения регистрации в программе введите код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssendcode'') INSERT INTO parameter (name, value) VALUES (''smssendcode'', ''Ваш временный код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssender'') INSERT INTO parameter (name, value) VALUES (''smssender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsusername'') INSERT INTO parameter (name, value) VALUES (''smsusername'', ''mredcard'')
	IF EXISTS(SELECT value FROM version) UPDATE version SET value = 200 ELSE INSERT INTO version (value) VALUES (200)
	IF NOT EXISTS(SELECT id FROM clientstatus WHERE id = 0) INSERT INTO clientstatus (id, name) VALUES (0, ''Активен'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 0) INSERT INTO cardstatus (id, name) VALUES (0, ''Активна'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 1) INSERT INTO cardstatus (id, name) VALUES (1, ''Блокирована'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 2) INSERT INTO cardstatus (id, name) VALUES (2, ''Ограничена'')
	DECLARE @operator SMALLINT = NULL, @partner SMALLINT = NULL, @region TINYINT = NULL, @city SMALLINT = NULL
	SELECT @operator = id FROM operator WHERE name = ''Оператор''
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO operator (name) VALUES (''Оператор'')
		SET @operator = SCOPE_IDENTITY()
	END
	SELECT @partner = id FROM partner WHERE operator = @operator AND name = ''Партнер''
	IF @partner IS NULL BEGIN
		INSERT INTO partner (name, operator) VALUES(''Партнер'', @operator)
		SET @partner = SCOPE_IDENTITY()
	END
	SELECT @region = id FROM region WHERE name = ''Москва''
	IF @region IS NULL BEGIN
		INSERT INTO region (name) VALUES(''Москва'')
		SET @region = SCOPE_IDENTITY()
	END
	SELECT @city = id FROM city WHERE region = @region AND name = ''Москва''
	IF @city IS NULL BEGIN
		INSERT INTO city (name, region) VALUES(''Москва'', @region)
		SET @city = SCOPE_IDENTITY()
	END
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 1) INSERT INTO messagestatus (code, name) VALUES (1, ''Отправлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 2) INSERT INTO messagestatus (code, name) VALUES (2, ''Доставлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 3) INSERT INTO messagestatus (code, name) VALUES (3, ''Спам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 4) INSERT INTO messagestatus (code, name) VALUES (4, ''Отписка'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 5) INSERT INTO messagestatus (code, name) VALUES (5, ''Был переход по ссылкам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 6) INSERT INTO messagestatus (code, name) VALUES (6, ''Устройство пользователя'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent1'') INSERT INTO parameter (name, value) VALUES(''smsagent1'', N''С Вашего счета списано '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent2'') INSERT INTO parameter (name, value) VALUES(''smsagent2'', N''На Ваш счет начислено '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent3'') INSERT INTO parameter (name, value) VALUES(''smsagent3'', N'' бонусов! Подробности: '')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadAll'') INSERT INTO permission (code, name) VALUES(''ReadAll'', ''Read all'')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadWriteAll'') INSERT INTO permission (code, name) VALUES(''ReadWriteAll'', ''Read and write all'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Reader'') INSERT INTO role (name) VALUES(''Reader'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Writer'') INSERT INTO role (name) VALUES(''Writer'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Analytics'') INSERT INTO roledescription (name) VALUES (N''Analytics'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsClient'') INSERT INTO roledescription (name) VALUES (N''AnalyticsClient'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsShop'') INSERT INTO roledescription (name) VALUES (N''AnalyticsShop'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsGood'') INSERT INTO roledescription (name) VALUES (N''AnalyticsGood'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Sales'') INSERT INTO roledescription (name) VALUES (N''Sales'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Terminal'') INSERT INTO roledescription (name) VALUES (N''Terminal'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Clients'') INSERT INTO roledescription (name) VALUES (N''Clients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsAllClients'') INSERT INTO roledescription (name) VALUES (N''ClientsAllClients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsCreateClients'') INSERT INTO roledescription (name) VALUES (N''ClientsCreateClients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsCreateClientList'') INSERT INTO roledescription (name) VALUES (N''ClientsCreateClientList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsMyClientList'') INSERT INTO roledescription (name) VALUES (N''ClientsMyClientList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Campaign'') INSERT INTO roledescription (name) VALUES (N''Campaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignMyCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignMyCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignCreateCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignCreateCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignTemplateCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignTemplateCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Mailing'') INSERT INTO roledescription (name) VALUES (N''Mailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingMyMailing'') INSERT INTO roledescription (name) VALUES (N''MailingMyMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingCreateMailing'') INSERT INTO roledescription (name) VALUES (N''MailingCreateMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingTemplateMailing'') INSERT INTO roledescription (name) VALUES (N''MailingTemplateMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Shops'') INSERT INTO roledescription (name) VALUES (N''Shops'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsMyShops'') INSERT INTO roledescription (name) VALUES (N''ShopsMyShops'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsCreateShopList'') INSERT INTO roledescription (name) VALUES (N''ShopsCreateShopList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsМyShopList'') INSERT INTO roledescription (name) VALUES (N''ShopsМyShopList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Goods'') INSERT INTO roledescription (name) VALUES (N''Goods'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsMyGoods'') INSERT INTO roledescription (name) VALUES (N''GoodsMyGoods'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsCreateGoodsList'') INSERT INTO roledescription (name) VALUES (N''GoodsCreateGoodsList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsMyGoodsList'') INSERT INTO roledescription (name) VALUES (N''GoodsMyGoodsList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Total'') INSERT INTO roledescription (name) VALUES (N''Total'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Faq'') INSERT INTO roledescription (name) VALUES (N''Faq'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''FaqManual'') INSERT INTO roledescription (name) VALUES (N''FaqManual'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Profile'') INSERT INTO roledescription (name) VALUES (N''Profile'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''OperatorBonusAdd'') INSERT INTO roledescription (name) VALUES (N''OperatorBonusAdd'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''OperatorBonusRedeem'') INSERT INTO roledescription (name) VALUES (N''OperatorBonusRedeem'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ActivateCard'') INSERT INTO roledescription (name) VALUES (N''ActivateCard'')
	RETURN(0)'

	EXEC Initiate

END ELSE IF @version = 381 BEGIN
	SELECT '3.82 20180327 Смирнов'

	--Исправлено. Возвращается последний бонус для каждой группы бонусов.
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos NVARCHAR(10) = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		IF (@partner = 0)
		BEGIN
			SET @partner = NULL;
			SET @pos = NULL;
		END
		IF (@pos = N'''')
		BEGIN
			SET @pos = NULL;
		END
		IF(@operator IS NOT NULL AND @operator > 0 AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number)) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number)) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number)) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
			RETURN(0)
		END
		ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number)) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number)) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number)) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
			RETURN(0)
		END
		ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NOT NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number)) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number)) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number)) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN pos AS ps ON cr.pos = ps.id
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
				AND ps.code = @pos
			RETURN(0)
		END
		ELSE
		BEGIN
			SET @errormessage = N''Не указаны данные для выборки''
			RETURN(2)
		END
	END'

END ELSE IF @version = 382 BEGIN
	SELECT '3.83 20180403 Юсупов'

	--Изменено. Добавлен столбец refresh_token.
	IF NOT EXISTS(SELECT 1 FROM sys.columns 
          WHERE Name = N'refresh_token'
          AND Object_ID = Object_ID(N'dbo.Users')) 
	BEGIN
		ALTER TABLE dbo.Users ADD refresh_token varchar(MAX) NULL
	END

	--Добавлено. Обновляет поле refresh_token в таблице Users
	IF OBJECT_ID('RefreshTokenUpdate') IS NOT NULL DROP PROCEDURE RefreshTokenUpdate
	EXEC sp_executesql @statement = N'CREATE PROCEDURE RefreshTokenUpdate
			@login NVARCHAR(20) = NULL,
			@refresh_token NVARCHAR(MAX) = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
			DECLARE @result TINYINT = 0
			IF @login IS NULL BEGIN SET @errormessage = N''Идентификатор Пользователя не задан'' SET @result = 1 RETURN(@result) END
			IF NOT EXISTS(SELECT login FROM Users WHERE login = @login) BEGIN SET @errormessage = N''Пользователь с таким идентификатором не существует'' SET @result = 2 RETURN(@result) END
			UPDATE Users SET refresh_token = @refresh_token WHERE login = @login
			RETURN(@result)'

	--Добавлено. Проверяет наличие refresh_token в таблице Users
	IF OBJECT_ID('RefreshTokenCheck') IS NOT NULL DROP PROCEDURE RefreshTokenCheck
	EXEC sp_executesql @statement = N'CREATE PROCEDURE RefreshTokenCheck
			@token NVARCHAR(MAX) = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
			IF @token IS NULL BEGIN SET @errormessage = N''Refresh token не задан''  RETURN(1) END
			SELECT u.refresh_token from Users u where u.refresh_token = @token

			IF @@ROWCOUNT = 0 
			BEGIN
				SET	@token = NULL
				SET @errormessage = N''Не найдены данные по токену''
				RETURN(2)
			END
			RETURN(0)'
			
	--Изменено. добавлен столбец id (PK)
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'id' AND id = (SELECT id FROM sysobjects WHERE name = 'goods'))
	BEGIN
		alter table goods add [id] [smallint] IDENTITY(1,1) NOT NULL;
		alter table goods add constraint PK_goods primary key clustered (id);
	END

	--Добавлено. Выбирает товары оператора
	IF OBJECT_ID('OperatorGetGoods') IS NOT NULL DROP PROCEDURE OperatorGetGoods;
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[OperatorGetGoods] 
			@operator SMALLINT = NULL,
			@errormessage NVARCHAR(100) OUTPUT
		AS
		BEGIN
			IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
			BEGIN
				SET @errormessage = N''Указанный оператор не найден''
				RETURN(1)
			END
			SELECT
				g.code,
				g.name,
				g.id
			FROM
				goods AS g
			WHERE
				partner in (SELECT id FROM partner WHERE operator = @operator)
		END'

	--Добавлено. Хранит списки товаров
	IF OBJECT_ID('goodlist') IS NOT NULL DROP Table goodlist;
	CREATE TABLE [dbo].[goodlist](
		[id] [smallint] IDENTITY(1,1) NOT NULL,
		[caption] [nvarchar](250) NOT NULL,
		[operator] [smallint] NOT NULL,
	 CONSTRAINT [PK_goodlist] PRIMARY KEY CLUSTERED ([id]))	
	
	--Добавлено. Хранит содержимое списка товаров
	IF OBJECT_ID('goodlistitems') IS NOT NULL DROP Table goodlistitems;
	BEGIN
		CREATE TABLE [dbo].[goodlistitems](
			[id] [smallint] IDENTITY(1,1) NOT NULL,
			[good] [smallint] NOT NULL,
			[goodlist] [smallint] NOT NULL,
		 CONSTRAINT [PK_goodlistitems] PRIMARY KEY CLUSTERED ([id]))

		ALTER TABLE [dbo].[goodlistitems]  WITH NOCHECK ADD  CONSTRAINT [FK_goodlistitems_good] FOREIGN KEY([good])
		REFERENCES [dbo].[goods] ([id])

		ALTER TABLE [dbo].[goodlistitems]  WITH NOCHECK ADD  CONSTRAINT [FK_goodlistitems_goodlist] FOREIGN KEY([goodlist])
		REFERENCES [dbo].[goodlist] ([id])

		ALTER TABLE [dbo].[goodlistitems] NOCHECK CONSTRAINT [FK_goodlistitems_goodlist]
	END

END ELSE IF @version = 383 BEGIN
	SELECT '3.84 20180405 Юсупов'

	--Изменено. Добавлен столбец refresh_token
	IF NOT EXISTS(SELECT 1 FROM sys.columns 
          WHERE Name = N'refresh_token'
          AND Object_ID = Object_ID(N'dbo.clientoperator')) 
	BEGIN
		ALTER TABLE dbo.clientoperator ADD refresh_token varchar(MAX) NULL
	END

	--Добавлено. Обновляет поле refresh_token в таблице clientoperator
	IF OBJECT_ID('RefreshTokenUpdateForClient') IS NOT NULL DROP PROCEDURE RefreshTokenUpdateForClient
	EXEC sp_executesql @statement = N'CREATE PROCEDURE RefreshTokenUpdateForClient
			@client INT = NULL,
			@operator SMALLINT = NULL,
			@refresh_token NVARCHAR(MAX) = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
			DECLARE @result TINYINT = 0
			IF @client IS NULL BEGIN SET @errormessage = N''Идентификатор клиента не задан'' SET @result = 1 RETURN(@result) END
			IF @operator IS NULL BEGIN SET @errormessage = N''Идентификатор оператора не задан'' SET @result = 2 RETURN(@result) END
			IF NOT EXISTS(SELECT client FROM clientoperator WHERE client = @client and operator = @operator) BEGIN SET @errormessage = N''Клиент с таким идентификатором не существует'' SET @result = 2 RETURN(@result) END
			UPDATE clientoperator SET refresh_token = @refresh_token WHERE client = @client and operator = @operator
			RETURN(@result)'

	--Добавлено. Проверяет наличие refresh_token в таблице clientoperator
	IF OBJECT_ID('RefreshTokenCheckForClient') IS NOT NULL DROP PROCEDURE RefreshTokenCheckForClient
	EXEC sp_executesql @statement = N'CREATE PROCEDURE RefreshTokenCheckForClient
			@token NVARCHAR(MAX) = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
			IF @token IS NULL BEGIN SET @errormessage = N''Refresh token не задан''  RETURN(1) END
			SELECT c.refresh_token from clientoperator c where c.refresh_token = @token

			IF @@ROWCOUNT = 0 
			BEGIN
				SET	@token = NULL
				SET @errormessage = N''Не найдены данные по токену''
				RETURN(2)
			END
			RETURN(0)'

END ELSE IF @version = 384 BEGIN
	SELECT '3.85 20180408 Юсупов'

	--Изменено. Отключено правило 100% за вычетом рубля. 
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, 
			@operator SMALLINT = NULL, 
			@client INT, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@bonustime DATETIME = NULL, 
			@bonuscheque INT = NULL, 
			@bonusrefund BIT = NULL, 
			@checkredeem BIT = NULL, 
			@freecard BIT = NULL, 
			@status TINYINT = NULL, 
			@notsendsms BIT = NULL, 
			@idoc int = NULL, 
			@code NVARCHAR(10), 
			@price NUMERIC(9,2), 
			@quantity NUMERIC(9,2), 
			@iamount NUMERIC(9,2), 
			@ipaidbybonus NUMERIC(9,2), 
			@minprice NUMERIC(9,2), 
			@scard NVARCHAR(20), 
			@sphone NVARCHAR(10), 
			@schequetime NVARCHAR(20), 
			@spartner NVARCHAR(10), 
			@samount NVARCHAR(10), 
			@sprice NVARCHAR(10), 
			@squantity NVARCHAR(10), 
			@siamount NVARCHAR(10), 
			@sposition NVARCHAR(10), 
			@position TINYINT, 
			@norules BIT = NULL, 
			@now DATETIME = GETDATE(), 
			@itemstring NVARCHAR(100) = NULL, 
			@bonus NUMERIC(9,2) = NULL, 
			@itemscount INT = 0, 
			@operatormaxredeem NUMERIC(9,2) = NULL, 
			@partnermaxredeem NUMERIC(9,2) = NULL, 
			@maxredeempercent NUMERIC(9,2) = NULL, 
			@i INT = 0, 
			@imaxredeem NUMERIC(9,2) = NULL, 
			@redeem NUMERIC(9,2) = NULL, 
			@itemtable ChequeItems, 
			@inoadd BIT = NULL, 
			@inoredeem BIT = NULL, 
			@redeemedbefore NUMERIC(9,2) = NULL, 
			@itemid INT = NULL, 
			@chequeitemid INT = NULL, 
			@itemsum NUMERIC(9,2) = 0, 
			@lastchequetime DATETIME = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL, 
			@purchaseid INT = NULL, 
			@calcbalance NUMERIC(9,2) = NULL
	IF @operatorname = '''' SET @operatorname = NULL IF @partnername = '''' SET @partnername = NULL IF @nowrite = 0 SET @nowrite = NULL IF @added <= 0 SET @added = 0 IF @redeemed <= 0 SET @redeemed = NULL IF @items = '''' SET @items = NULL IF @paidbybonus <= 0 SET @paidbybonus = NULL IF @noadd = 0 SET @noadd = NULL IF @noredeem = 0 SET @noredeem = NULL IF @bonusid <= 0 SET @bonusid = NULL IF @refund = 0 SET @refund = NULL IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY BEGIN CATCH SET @errormessage = ''Номер карты должен быть числом'' RETURN (23) END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Партнера'' RETURN(24) END
	ELSE BEGIN
		SELECT @partner = p.id, @operator = p.operator, @partnermaxredeem = p.maxredeem, @operatormaxredeem = o.maxredeem FROM partner p LEFT JOIN operator o ON p.operator = o.id WHERE p.id = @partner
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL BEGIN
		SELECT @posid = id FROM pos WHERE partner = @partner AND code = @pos
		IF @posid IS NULL BEGIN SET @errormessage = ''Не найден код торговой точки'' RETURN(27) END
	END ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, @partner = @partner, @card = @card OUTPUT, @client = @client OUTPUT, @status = @status OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @chequeitemid = id, @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = paidbybonus, @minprice = minprice, @inoadd = noadd, @inoredeem = noredeem, @maxredeem = maxredeem FROM @chequeitems WHERE id = @i ORDER BY position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE IF @maxredeempercent > 0 AND @maxredeempercent < 100 SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, @partner = @partner, @code = @code, @amount = @iamount, @paidbybonus = @iredeemed, @chequetime = @chequetime, @pos = @posid, @cheque = @cheque, @bonus = @bonus OUTPUT, @nowrite = 1, @errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF (@added IS NULL OR @added = 0) SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
	BEGIN
		SELECT @balance = balance FROM card WHERE number = @card
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	END
	RETURN(0)'

END ELSE IF @version = 385 BEGIN
	SELECT '3.86 20180409 Юсупов'

	IF OBJECT_ID('OperatorCreateGoodList') IS NOT NULL DROP PROCEDURE OperatorCreateGoodList;
	IF OBJECT_ID('OperatorCreatePosList') IS NOT NULL DROP PROCEDURE OperatorCreatePosList;
	IF OBJECT_ID('OperatorImportGoods') IS NOT NULL DROP PROCEDURE OperatorImportGoods;
	IF type_id('IdItem') IS NOT NULL DROP TYPE IdItem;
	IF type_id('GoodItem') IS NOT NULL DROP TYPE GoodItem;

	--Добавлено. Табличный тип для передачи списка id при создании списков ТТ и списков товаров
	CREATE TYPE [IdItem] AS TABLE([id] [int] NOT NULL);

	--Добавлено. Табличный тип для испорта списка товаров из файла
	CREATE TYPE [GoodItem] AS TABLE(
		[code] [nvarchar](20) NOT NULL,
		[brandcode] [nvarchar](20) NULL,
		[goodsgroup] [tinyint] NULL,
		[brand] [tinyint] NULL,
		[noreedeem] [bit] NOT NULL,
		[nocharge] [bit] NOT NULL,
		[price] [numeric](9, 2) NULL,
		[minprice] [numeric](9, 2) NULL,
		[name] [nvarchar](100) NOT NULL,
		[catalog] [smallint] NULL
	)

	--Добавлено. Создает список товаров
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [OperatorCreateGoodList]
		@caption nvarchar(250) = NULL,
		@operator SMALLINT = NULL,
		@items [IdItem] READONLY, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
		DECLARE 
			@result INT,
			@id_list int = 0,
			@id_good int = 0,
			@countgoods INT = 0,
			@TransactionName VARCHAR(50) = N''InsertGoodListWithValues''
			DECLARE goodCursor CURSOR LOCAL FAST_FORWARD
				FOR SELECT [id] FROM @items
		BEGIN
			if @caption IS NULL BEGIN SET @errormessage = N''Не задано название списка товаров'' RETURN(1) END
			if @operator IS NULL BEGIN SET @errormessage = N''Не задан идентификатор оператора списка'' RETURN(2) END
			SET @countgoods = (SELECT COUNT(*) FROM @items)
			IF (@countgoods = 0) BEGIN SET @errormessage = N''Список товаров пустой'' RETURN (3) END
			BEGIN TRY
				BEGIN TRANSACTION @TransactionName
					INSERT INTO goodlist(caption, operator) values(@caption, @operator)
					select @id_list = @@IDENTITY
					OPEN goodCursor;
					-- Initial fetch attempt
					FETCH NEXT FROM goodCursor INTO @id_good;
					WHILE @@FETCH_STATUS = 0
					BEGIN
						INSERT into goodlistitems(goodlist, good) values(@id_list, @id_good)
						FETCH NEXT FROM goodCursor INTO @id_good;
					END;
					CLOSE goodCursor;
					DEALLOCATE goodCursor;
				
					COMMIT TRANSACTION @TransactionName
					RETURN(0)
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION @TransactionName
				SET @errormessage = N''ошибка создания списка, откат транзакции''
				RETURN(4)
			END CATCH
		END'

	--Добавлено. Создает список торговых точек
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [OperatorCreatePosList]
		@caption nvarchar(250) = NULL,
		@operator SMALLINT = NULL,
		@items [IdItem] READONLY, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
		DECLARE 
			@result INT,
			@id_list int = 0,
			@id_pos int = 0,
			@countpos INT = 0,
			@TransactionName VARCHAR(50) = N''InsertPosListWithValues''
			DECLARE posCursor CURSOR LOCAL FAST_FORWARD
				FOR SELECT [id] FROM @items
		BEGIN
			if @caption IS NULL BEGIN SET @errormessage = N''Не задано название списка ТТ'' RETURN(1) END
			if @operator IS NULL BEGIN SET @errormessage = N''Не задан идентификатор оператора списка'' RETURN(2) END
			SET @countpos = (SELECT COUNT(*) FROM @items)
			IF (@countpos = 0) BEGIN SET @errormessage = N''Список ТТ пустой'' RETURN (3) END
			BEGIN TRY
				BEGIN TRANSACTION @TransactionName
					INSERT INTO poslist(caption, operator) values(@caption, @operator)
					select @id_list = @@IDENTITY
					OPEN posCursor;
					-- Initial fetch attempt
					FETCH NEXT FROM posCursor INTO @id_pos;
					WHILE @@FETCH_STATUS = 0
					BEGIN
						INSERT into poslistitems(poslist, pos) values(@id_list, @id_pos)
						FETCH NEXT FROM posCursor INTO @id_pos;
					END;
					CLOSE posCursor;
					DEALLOCATE posCursor;
				
					COMMIT TRANSACTION @TransactionName
					RETURN(0)
			END TRY
			BEGIN CATCH
				ROLLBACK TRANSACTION @TransactionName
				SET @errormessage = N''ошибка создания списка, откат транзакции''
				RETURN(4)
			END CATCH
		END'

	EXEC sp_executesql @statement = N'CREATE PROCEDURE [OperatorImportGoods]
		@partner SMALLINT = NULL,
		@gooditems [GoodItem] READONLY,
		@errormessage NVARCHAR(100) OUTPUT,
		@insertedrows INT OUTPUT
		AS SET NOCOUNT ON
		DECLARE 
			@result INT,
			@i INT = 0,
			@countgoods INT = 0,
			@code NVARCHAR(20),
			@name NVARCHAR(100)
			DECLARE goodCursor CURSOR LOCAL FAST_FORWARD
				FOR
				SELECT [code], [name]
				FROM @gooditems;
		BEGIN
			IF @partner IS NULL BEGIN SET @errormessage = N''Партнер не задан'' RETURN (1) END
			SET @countgoods = (SELECT COUNT(*) FROM @gooditems)
			IF (@countgoods = 0) BEGIN SET @errormessage = N''Список товаров пустой'' RETURN (2) END
			IF(@countgoods > 0) BEGIN
		
			OPEN goodCursor;
			-- Initial fetch attempt
			FETCH NEXT FROM goodCursor INTO @code, @name;

			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT into goods(partner, code, name) values(@partner, @code, @name)
				FETCH NEXT FROM goodCursor INTO @code, @name;
			END;
			CLOSE goodCursor;
			DEALLOCATE goodCursor;
			END
		END
		RETURN(0)'

END ELSE IF @version = 386 BEGIN
	SELECT '3.87 20180409 Смирнов'

	--Изменено. Исправлено. Сумма уплаченных денег вычисляется, как сумма покупки минус количество бонусов по модулю
	IF OBJECT_ID('_BonusCheque') IS NOT NULL DROP PROCEDURE _BonusCheque
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE _BonusCheque
	@card BIGINT = NULL,
	@partner SMALLINT = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@cheque INT = NULL,
	@refund BIT = NULL,
	@bonus NUMERIC(9,2) = NULL OUTPUT,
	@errormessage nvarchar(100) = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@chequetime DATETIME = NULL,
	@item INT = NULL,
	@birthdate DATE = NULL,
	@nowrite BIT = NULL,
	@pos SMALLINT = NULL
	AS SET NOCOUNT ON
	IF @card IS NULL BEGIN SET @errormessage = ''Не задан номер карты'' RETURN (1) END
	IF @partner IS NULL BEGIN SET @errormessage = ''Не задан партнер'' RETURN (2) END
	IF @pos IS NULL BEGIN SET @errormessage = ''Не задана торговая точка'' RETURN (3) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма'' RETURN (4) END
	IF @cheque IS NULL AND @nowrite IS NULL BEGIN SET @errormessage = ''Не задан чек'' RETURN (5) END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN (6) END
	IF @amount IS NULL SET @amount = 0 IF @paidbybonus IS NULL SET @paidbybonus = 0 SET @bonus = 0
	DECLARE @chequerule SMALLINT, @interest NUMERIC(9,2), @fixed NUMERIC(9,2), @begdate DATE, @enddate DATE, @operator SMALLINT = NULL, @cardlevel SMALLINT = NULL, @level SMALLINT = NULL, @nopaidbybonus BIT = NULL, @expdays SMALLINT = NULL, @expirydate DATE = NULL, @active BIT = NULL, @actdays TINYINT = NULL, @cardtype SMALLINT = NULL, @type SMALLINT = NULL, @match BIT = 1, @rulepartner SMALLINT = NULL, @rulepos SMALLINT = NULL, @rulecode NVARCHAR(10) = NULL, @begweekday TINYINT = NULL, @endweekday TINYINT = NULL, @begtime TIME(0) = NULL, @endtime TIME(0) = NULL, @weekday TINYINT = NULL, @time TIME(0) = NULL, @stop BIT = NULL, @minsum NUMERIC(9,2), @maxsum NUMERIC(9,2), @friendcard BIGINT = NULL, @friend BIT = NULL, @birthday BIT = NULL, @chequedate DATE = NULL, @rulebonus NUMERIC(9,2) = NULL, @count INT = 0, @i INT = 0, @itemlist SMALLINT = NULL, @itemexclude BIT = NULL, @birthdaybefore TINYINT = NULL, @birthdayafter TINYINT = NULL, @thisbirthdate DATE = NULL
	SET @chequedate = @chequetime
	SELECT @operator = operator FROM partner WHERE id = @partner
	SELECT @cardlevel = level, @cardtype = type, @friendcard = friendcard FROM card WHERE number = @card
	CREATE TABLE #tBonusCheque (id INT IDENTITY(1,1) PRIMARY KEY, chequerule SMALLINT, interest NUMERIC(9,2), fixed NUMERIC(9,2), begdate DATE, enddate DATE, level SMALLINT, expdays SMALLINT, actdays SMALLINT, nopaidbybonus BIT, cardtype SMALLINT, partner SMALLINT, pos SMALLINT, code NVARCHAR(10), begweekday TINYINT, endweekday TINYINT, begtime TIME(0), endtime TIME(0), stop BIT, minsum NUMERIC(9,2), maxsum NUMERIC(9,2), friend BIT, birthday BIT, itemlist SMALLINT, itemexclude BIT, birthdaybefore TINYINT, birthdayafter TINYINT)
	INSERT INTO #tBonusCheque (chequerule, interest, fixed, begdate, enddate, level, expdays, actdays, nopaidbybonus, cardtype, partner, pos, code, begweekday, endweekday, begtime, endtime, stop, minsum, maxsum, friend, birthday, itemlist, itemexclude, birthdaybefore, birthdayafter) SELECT cr.id, cr.interest, cr.fixed, cr.begdate, cr.enddate, cr.level, cr.expdays, cr.actdays, cr.nopaidbybonus, cr.cardtype, cr.partner, cr.pos, cr.code, cr.begweekday, cr.endweekday, cr.begtime, cr.endtime, cr.stop, cr.minsum, cr.maxsum, cr.friend, cr.birthday, cr.itemlist, il.exclude, cr.birthdaybefore, cr.birthdayafter FROM chequerule cr LEFT JOIN itemlist il ON cr.itemlist = il.id WHERE cr.active = 1 AND (cr.partner = @partner OR cr.operator = @operator) ORDER BY cr.priority
	SET @count = @@ROWCOUNT SET @i = 0
	WHILE @i < @count BEGIN
		SET @i = @i + 1
		SELECT @chequerule = chequerule, @interest = interest, @fixed = fixed, @begdate = begdate, @enddate = enddate, @level = level, @expdays = expdays, @actdays = actdays, @nopaidbybonus = nopaidbybonus, @type = cardtype, @rulepartner = partner, @rulepos = pos, @rulecode = code, @begweekday = begweekday, @endweekday = endweekday, @begtime = begtime, @endtime = endtime, @stop = stop, @minsum = minsum, @maxsum = maxsum, @friend = friend, @birthday = birthday, @itemlist = itemlist, @itemexclude = itemexclude, @birthdaybefore = birthdaybefore, @birthdayafter = birthdayafter FROM #tBonusCheque WHERE id = @i
		SET @rulebonus = 0 SET @match = 1
		IF @nowrite = 0 SET @nowrite = NULL IF @itemexclude = 0 SET @itemexclude = NULL
		IF @expdays IS NULL SET @expdays = 365 SET @expirydate = GETDATE() + @expdays
		SET @active = NULL IF @actdays IS NULL OR @actdays = 0 SET @active = 1
		SET @weekday = DATEPART(DW, @chequetime - 1)
		IF @weekday = 0 SET @weekday = 7
		IF @birthdaybefore IS NULL SET @birthdaybefore = 0 IF @birthdayafter IS NULL SET @birthdayafter = 0
		SET @time = @chequetime
		IF @match = 1 AND @rulepartner IS NOT NULL
			IF NOT @partner = @rulepartner
				SET @match = 0
		IF @match = 1 AND @rulepos IS NOT NULL
			IF NOT @pos = @rulepos
				SET @match = 0
		IF @match = 1 AND @begdate IS NOT NULL
			IF NOT @chequetime >= @begdate
				SET @match = 0
		IF @match = 1 AND @enddate IS NOT NULL
			IF NOT @chequetime < DATEADD(DAY, 1, @enddate)
				SET @match = 0
		IF @match = 1 BEGIN
			IF @rulecode IS NOT NULL BEGIN
				IF @code IS NULL
					SET @match = 0
				ELSE BEGIN
					IF NOT @code = @rulecode
						SET @match = 0
				END
			END
		END
		IF @match = 1 BEGIN
			IF @itemlist IS NOT NULL
				IF @itemexclude IS NULL BEGIN
					IF @code IS NULL
						SET @match = 0
					ELSE
						IF NOT EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
				END ELSE
					IF @code IS NOT NULL
						IF EXISTS (SELECT * FROM listitem WHERE itemlist = @itemlist AND code = @code)
							SET @match = 0
		END
		IF @match = 1 AND @begweekday IS NOT NULL
			IF @weekday < @begweekday
				SET @match = 0
		IF @match = 1 AND @endweekday IS NOT NULL
			IF @weekday > @endweekday
				SET @match = 0
		IF @match = 1 AND @begtime IS NOT NULL
			IF @time < @begtime
				SET @match = 0
		IF @match = 1 AND @endtime IS NOT NULL
			IF @time > @endtime
				SET @match = 0
		IF @match = 1 AND @minsum IS NOT NULL
			IF @amount < @minsum
				SET @match = 0
		IF @match = 1 AND @maxsum IS NOT NULL
			IF @amount > @maxsum
				SET @match = 0
		IF @match = 1 AND @level IS NOT NULL
			IF @cardlevel IS NOT NULL BEGIN
				IF NOT @cardlevel = @level
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @type IS NOT NULL
			IF @cardtype IS NOT NULL BEGIN
				IF NOT @cardtype = @type
					SET @match = 0
			END ELSE SET @match = 0
		IF @match = 1 AND @birthday IS NOT NULL
			IF @birthdate IS NULL
				SET @match = 0
			ELSE IF @chequedate IS NULL
				SET @match = 0
			ELSE BEGIN
				SET @thisbirthdate = CONVERT(DATETIME, 0)
				SET @thisbirthdate = DATEADD(YEAR, YEAR(@chequetime) - 1900, @thisbirthdate)
				SET @thisbirthdate = DATEADD(MONTH, MONTH(@birthdate) - 1, @thisbirthdate)
				SET @thisbirthdate = DATEADD(DAY, DAY(@birthdate) - 1, @thisbirthdate)
				IF DATEDIFF(DAY, @chequetime, @thisbirthdate) > 200 SET @thisbirthdate = DATEADD(YEAR, -1, @thisbirthdate)
				IF DATEDIFF(DAY, @chequetime, @thisbirthdate) < -200 SET @thisbirthdate = DATEADD(YEAR, 1, @thisbirthdate)
				IF @chequedate < DATEADD(DAY, -@birthdaybefore, @thisbirthdate) OR @chequedate > DATEADD(DAY, @birthdayafter, @thisbirthdate)
					SET @match = 0
			END
		IF @match = 1 BEGIN
			IF @interest IS NOT NULL BEGIN
				IF @nopaidbybonus IS NULL OR @nopaidbybonus = 0
					SET @rulebonus = @rulebonus + @amount * @interest / 100
				ELSE
					SET @rulebonus = @rulebonus + (@amount - ABS(@paidbybonus)) * @interest / 100
			END
			IF @fixed IS NOT NULL SET @rulebonus = @rulebonus + @fixed
			IF @friend IS NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@card, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 1, @item)
			ELSE IF @friendcard IS NOT NULL AND @nowrite IS NULL
				INSERT INTO bonus (card, proctime, bonus, cheque, partner, operator, chequerule, refund, expirydate, active, source, item) VALUES (@friendcard, GETDATE(), @rulebonus, @cheque, @partner, @operator, @chequerule, @refund, @expirydate, @active, 8, @item)
			SET @bonus = @bonus + @rulebonus
		END
		IF @match = 1 AND @stop = 1
			BREAK
	END
	DROP TABLE #tBonusCheque
	RETURN (0)'

END ELSE IF @version = 387 BEGIN
	SELECT '3.88 20180415 Смирнов'

	--Добавлено. Размер начисления бонуса по промокоду другу
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'promobonusfriend' AND id = (SELECT id FROM sysobjects WHERE name = 'operator'))
		ALTER TABLE operator ADD promobonusfriend NUMERIC(9,2)

	--Добавлено. Размер начисления бонуса по промокоду регистрируемому клиенту
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'promobonusclient' AND id = (SELECT id FROM sysobjects WHERE name = 'operator'))
		ALTER TABLE operator ADD promobonusclient NUMERIC(9,2)

	--Добавлено. Флаг включения промокода у оператора
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'promocode' AND id = (SELECT id FROM sysobjects WHERE name = 'operator'))
		ALTER TABLE operator ADD promocode BIT

	--Добавлено. Промокод клиента
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'promocode' AND id = (SELECT id FROM sysobjects WHERE name = 'clientoperator'))
		ALTER TABLE clientoperator ADD promocode NVARCHAR(20)

	--Добавлено. Промокод друга, которого привёл клиент
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'promocodefriend' AND id = (SELECT id FROM sysobjects WHERE name = 'clientoperator'))
		ALTER TABLE clientoperator ADD promocodefriend NVARCHAR(20)

	--Добавлено. Флаг, совершал ли клиент покупки
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'madepurchase' AND id = (SELECT id FROM sysobjects WHERE name = 'clientoperator'))
		ALTER TABLE clientoperator ADD madepurchase BIT

	--Изменено. Добавлен входной параметр @promocode и начисление бонусов по нему
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL,
	@reglku BIT = NULL,
	@clientsetpassword BIT = NULL,
	@email NVARCHAR(50) = NULL,
	@promocode NVARCHAR(20) = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@maxlocal BIGINT = NULL, 
			@cardoperator SMALLINT = NULL, 
			@virtual BIT = 0, 
			@welcomebonus NUMERIC(9,2) = NULL, 
			@friendphone BIGINT = NULL, 
			@friendcard BIGINT = NULL, 
			@result INT = NULL, 
			@friendclient INT = NULL, 
			@bonustofriend NUMERIC(9,2) = NULL, 
			@bonusforfriend NUMERIC(9,2) = NULL, 
			@base10 BIGINT = NULL, 
			@welcomebonuslku NUMERIC(9,2) = NULL, 
			@activationlink BIT = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL IF @reglku = 0 SET @reglku = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	IF @promocode IS NOT NULL
	BEGIN
		IF NOT EXISTS(SELECT client FROM clientoperator WHERE promocode = @promocode AND operator = @operator)
		BEGIN
			SET @errormessage = N''Введен неверный промокод. Повторите попытку снова!''
			RETURN(14)
		END
	END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT 
				@prefix = prefix, 
				@numlen = numlen, 
				@welcomebonus = welcomebonus, 
				@bonustofriend = bonustofriend, 
				@bonusforfriend = bonusforfriend, 
				@welcomebonuslku = welcomebonuslku, 
				@activationlink = activationlink 
			FROM 
				operator 
			WHERE 
				id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE 
			BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT 
					@operator = id, 
					@prefix = prefix, 
					@numlen = numlen, 
					@welcomebonus = welcomebonus, 
					@bonustofriend = bonustofriend, 
					@bonusforfriend = bonusforfriend, 
					@welcomebonuslku = welcomebonuslku, 
					@activationlink = activationlink 
				FROM 
					operator 
				WHERE 
					name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END 
	ELSE 
	BEGIN
		SELECT 
			@operator = id, 
			@prefix = prefix, 
			@numlen = numlen, 
			@welcomebonus = welcomebonus, 
			@bonustofriend = bonustofriend, 
			@bonusforfriend = bonusforfriend, 
			@welcomebonuslku = welcomebonuslku, 
			@activationlink = activationlink 
		FROM 
			operator 
		WHERE 
			id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @reglku IS NOT NULL SET @welcomebonus = @welcomebonuslku
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @clientsetpassword = 1
	BEGIN
		EXEC ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
	END
	IF @email IS NOT NULL
	BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	IF @promocode IS NOT NULL
	BEGIN
		DECLARE @promobonusclient NUMERIC(9,2) = NULL
		SELECT @promobonusclient = promobonusclient FROM operator WHERE id = @operator
		EXEC @result = BonusAdd @card = @card, @bonus = @promobonusclient, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 2
		IF @result <> 0 SET @errormessage = @errormessage + '' (промокод)''
		UPDATE clientoperator SET promocodefriend = @promocode WHERE client = @client AND operator = @operator
	END
	RETURN (0)'

	--Изменено. Добавлен входной параметр @promocode и его передача в ClientAdd
	IF OBJECT_ID('ClientCreate') IS NOT NULL DROP PROCEDURE ClientCreate
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientCreate
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@card BIGINT = NULL OUTPUT, 
	@phone BIGINT = NULL OUTPUT, 
	@name NVARCHAR(50) = NULL, 
	@surname NVARCHAR(20) = NULL, 
	@patronymic NVARCHAR(20) = NULL, 
	@email NVARCHAR(50) = NULL, 
	@birthdate DATE = NULL,
	@allowsms BIT = NULL,
	@allowemail BIT = NULL,		
	@gender BIT = NULL,
	@errormessage NVARCHAR(100) OUTPUT,
	@client INT OUTPUT,
	@agreepersonaldata BIT = NULL,
	@poscode NVARCHAR(10) = NULL,
	@friend BIGINT = NULL,
	@clientsetpassword BIT = NULL,
	@promocode NVARCHAR(20) = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT = 0, 
			@emailclient INT = NULL, 
			@friendphone BIGINT = NULL, 
			@friendcard BIGINT = NULL, 
			@friendclient INT = NULL, 
			@bonustofriend NUMERIC(9,2) = NULL, 
			@bonusforfriend NUMERIC(9,2) = NULL, 
			@activationlink BIT = NULL
	IF @operator = 0 SET @operator = NULL IF @email = '''' SET @email = NULL
	IF @operator IS NULL BEGIN SET @errormessage = ''Не задан идентификатор Оператора ПЛ'' RETURN(11) END
	SELECT @emailclient = client FROM email WHERE email = @email
	IF @emailclient IS NOT NULL BEGIN SET @errormessage = ''Данный E-mail уже привязан к клиенту'' RETURN(12) END
	EXEC @result = ClientAdd @phone = @phone OUTPUT, 
							 @card = @card OUTPUT, 
							 @client = @client OUTPUT, 
							 @errormessage = @errormessage OUTPUT, 
							 @novalidated = 1, 
							 @operator = @operator, 
							 @poscode = @poscode, 
							 @agreepersonaldata = @agreepersonaldata, 
							 @friend = @friend, 
							 @partner = @partner, 
							 @clientsetpassword = @clientsetpassword,
							 @promocode = @promocode
	IF @result > 0 RETURN(@result)	
	SELECT @activationlink = activationlink FROM operator WHERE id = @operator
	IF @activationlink = 1
	BEGIN
		EXEC @result = ClientNotificationSystem @client = @client, @phone = @phone, @operator = @operator, @activatecard = 1, @errormessage = @errormessage OUTPUT
	END
	IF @email IS NOT NULL BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
		EXEC @result = ClientSendEmailRegistration @email = @email, @operator = @operator, @errormessage = @errormessage OUTPUT
	END
	EXEC @result = ClientChange @client = @client, 
								@surname = @surname, 
								@name = @name, 
								@patronymic = @patronymic, 
								@birthdate = @birthdate, 
								@allowsms = @allowsms, 
								@allowemail = @allowemail, 
								@gender = @gender, 
								@errormessage = @errormessage OUTPUT, 
								@operator = @operator, 
								@poscode = @poscode, 
								@agreepersonaldata = @agreepersonaldata
	IF @result > 0 RETURN(@result)
	RETURN(0)'	

	--Изменено. Добавлено начисление бонуса после первой покупки при регистрации с использованием промокода
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, 
			@operator SMALLINT = NULL, 
			@client INT, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@bonustime DATETIME = NULL, 
			@bonuscheque INT = NULL, 
			@bonusrefund BIT = NULL, 
			@checkredeem BIT = NULL, 
			@freecard BIT = NULL, 
			@status TINYINT = NULL, 
			@notsendsms BIT = NULL, 
			@idoc int = NULL, 
			@code NVARCHAR(10), 
			@price NUMERIC(9,2), 
			@quantity NUMERIC(9,2), 
			@iamount NUMERIC(9,2), 
			@ipaidbybonus NUMERIC(9,2), 
			@minprice NUMERIC(9,2), 
			@scard NVARCHAR(20), 
			@sphone NVARCHAR(10), 
			@schequetime NVARCHAR(20), 
			@spartner NVARCHAR(10), 
			@samount NVARCHAR(10), 
			@sprice NVARCHAR(10), 
			@squantity NVARCHAR(10), 
			@siamount NVARCHAR(10), 
			@sposition NVARCHAR(10), 
			@position TINYINT, 
			@norules BIT = NULL, 
			@now DATETIME = GETDATE(), 
			@itemstring NVARCHAR(100) = NULL, 
			@bonus NUMERIC(9,2) = NULL, 
			@itemscount INT = 0, 
			@operatormaxredeem NUMERIC(9,2) = NULL, 
			@partnermaxredeem NUMERIC(9,2) = NULL, 
			@maxredeempercent NUMERIC(9,2) = NULL, 
			@i INT = 0, 
			@imaxredeem NUMERIC(9,2) = NULL, 
			@redeem NUMERIC(9,2) = NULL, 
			@itemtable ChequeItems, 
			@inoadd BIT = NULL, 
			@inoredeem BIT = NULL, 
			@redeemedbefore NUMERIC(9,2) = NULL, 
			@itemid INT = NULL, 
			@chequeitemid INT = NULL, 
			@itemsum NUMERIC(9,2) = 0, 
			@lastchequetime DATETIME = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL, 
			@purchaseid INT = NULL, 
			@calcbalance NUMERIC(9,2) = NULL,
			@promocodeenable BIT = NULL,
			@promobonusfriend NUMERIC(9,2) = NULL,
			@promocodefriend NVARCHAR(20) = NULL,
			@madepurchase BIT = NULL
	IF @operatorname = '''' SET @operatorname = NULL 
	IF @partnername = '''' SET @partnername = NULL 
	IF @nowrite = 0 SET @nowrite = NULL 
	IF @added <= 0 SET @added = 0 
	IF @redeemed <= 0 SET @redeemed = NULL 
	IF @items = '''' SET @items = NULL 
	IF @paidbybonus <= 0 SET @paidbybonus = NULL 
	IF @noadd = 0 SET @noadd = NULL 
	IF @noredeem = 0 SET @noredeem = NULL 
	IF @bonusid <= 0 SET @bonusid = NULL 
	IF @refund = 0 SET @refund = NULL 
	IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL 
	BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY 
	BEGIN CATCH 
		SET @errormessage = ''Номер карты должен быть числом'' 
		RETURN (23) 
	END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL 
	BEGIN 
		SET @errormessage = ''Не задан идентификатор Партнера'' 
		RETURN(24) 
	END
	ELSE 
	BEGIN
		SELECT 
			@partner = p.id, 
			@operator = p.operator, 
			@partnermaxredeem = p.maxredeem, 
			@operatormaxredeem = o.maxredeem,
			@promocodeenable = o.promocode,
			@promobonusfriend = promobonusfriend
		FROM 
			partner AS p 
			LEFT JOIN operator AS o ON p.operator = o.id 
		WHERE 
			p.id = @partner
		IF @partner IS NULL 
		BEGIN 
			SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL 
	BEGIN
		SELECT 
			@posid = id 
		FROM 
			pos 
		WHERE 
			partner = @partner 
			AND code = @pos
		IF @posid IS NULL 
		BEGIN 
			SET @errormessage = ''Не найден код торговой точки'' 
			RETURN(27) 
		END
	END 
	ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, 
							@partner = @partner, 
							@card = @card OUTPUT, 
							@client = @client OUTPUT, 
							@status = @status OUTPUT, 
							@balance = @balance OUTPUT, 
							@errormessage = @errormessage OUTPUT, 
							@operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT 
					@chequeitemid = id, 
					@position = position, 
					@code = code, 
					@price = price, 
					@quantity = quantity, 
					@iamount = amount, 
					@ipaidbybonus = paidbybonus, 
					@minprice = minprice, 
					@inoadd = noadd, 
					@inoredeem = noredeem, 
					@maxredeem = maxredeem 
				FROM 
					@chequeitems 
				WHERE 
					id = @i 
				ORDER BY 
					position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE IF @maxredeempercent > 0 AND @maxredeempercent < 100 SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, 
													@partner = @partner, 
													@code = @code, 
													@amount = @iamount, 
													@paidbybonus = @iredeemed, 
													@chequetime = @chequetime, 
													@pos = @posid, 
													@cheque = @cheque, 
													@bonus = @bonus OUTPUT, 
													@nowrite = 1, 
													@errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END	
	IF @promocodeenable = 1
	BEGIN
		SELECT
			@promocodefriend = promocodefriend,
			@madepurchase = madepurchase
		FROM
			clientoperator
		WHERE
			client = @client
			AND operator = @operator

		IF @madepurchase = 0 OR @madepurchase IS NULL
		BEGIN
			DECLARE @friendcard BIGINT = NULL, 
					@friendphone BIGINT = NULL
			UPDATE clientoperator SET madepurchase = 1 WHERE client = @client AND operator = @operator
			SELECT
				@friendcard = cd.number,
				@friendphone = cr.phone
			FROM
				card AS cd
				INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
			WHERE
				cr.promocode = @promocodefriend
				AND cr.operator = @operator

			EXEC @result = BonusAdd @card = @friendcard, @phone = @friendphone, @bonus = @promobonusfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 2
			IF NOT @result = 0 RETURN (@result)
		END
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF (@added IS NULL OR @added = 0) SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
	BEGIN
		SELECT @balance = balance FROM card WHERE number = @card
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	END
	RETURN(0)'

END ELSE IF @version = 388 BEGIN
	SELECT '3.89 20180422 Смирнов'

	--Изменено. Добавлена сортировка по убыванию даты
	IF OBJECT_ID('CardBonusesType', 'P') IS NOT NULL DROP PROCEDURE CardBonusesType
	EXEC sp_executesql @statement = N'CREATE PROCEDURE CardBonusesType
		@card BIGINT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF(NOT EXISTS(SELECT number FROM card WHERE number = @card))
		BEGIN
			SET @errormessage = N''Указанный номер карты не существует''
			RETURN(1)
		END
		SELECT
			be.name,
			bs.proctime,
			CASE	
				WHEN bs.bonus > 0 AND be.code <> 7 THEN bs.bonus
				ELSE 0
			END AS bonusAdded,
			CASE	
				WHEN bs.bonus < 0 AND be.code <> 7 THEN bs.bonus
				ELSE 0
			END AS bonusRedeemed,
			CASE
				WHEN be.code = 7 THEN bs.bonus
				ELSE 0
			END AS bonusBurn
		FROM
			bonus AS bs
			LEFT JOIN bonussource AS be ON bs.source = be.code
		WHERE
			bs.card = @card
			AND be.code > 1
		ORDER BY
			bs.proctime DESC
		RETURN(0)
	END'

	--Изменено. Исправлена выборка для бонуса на день рождения.
	IF OBJECT_ID(N'Clients', 'P') IS NOT NULL DROP PROCEDURE Clients
	EXEC sp_executesql @statement = N'CREATE PROCEDURE Clients @operator SMALLINT = NULL,
		@partner SMALLINT = NULL,
		@pos NVARCHAR(10) = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		IF (@partner = 0)
		BEGIN
			SET @partner = NULL;
			SET @pos = NULL;
		END
		IF (@pos = N'''')
		BEGIN
			SET @pos = NULL;
		END
		IF(@operator IS NOT NULL AND @operator > 0 AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number)) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number)) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number)) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number)) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
			RETURN(0)
		END
		ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number)) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number)) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number)) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number)) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
			RETURN(0)
		END
		ELSE IF (@operator IS NOT NULL AND @operator > 0 AND @partner IS NOT NULL AND @partner > 0 AND @pos IS NOT NULL)
		BEGIN
			SELECT
				cr.client,
				COALESCE(cr.surname + '' '', '''') + COALESCE(cr.name + '' '', '''') + COALESCE(cr.patronymic + '' '', '''') AS fullname,
				cr.phone,
				COALESCE(cr.email, N''Отсутствует'') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''Мужской''
					WHEN cr.gender = 0 THEN N''Женский''
					ELSE N''Не указан''
				END AS gender,
				COALESCE(ce.name, N''Клиент''),
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'' %'' FROM chequerule WHERE operator = @operator), N''Отсутствует'') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number)) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number)) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number)) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number)) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''Мобилка''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL AND cr.password IS NOT NULL THEN N''Сайт''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund
			FROM
				clientoperator AS cr
				INNER JOIN pos AS ps ON cr.pos = ps.id
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id
			WHERE
				cr.operator = @operator
				AND ps.code = @pos
			RETURN(0)
		END
		ELSE
		BEGIN
			SET @errormessage = N''Не указаны данные для выборки''
			RETURN(2)
		END
	END'

END ELSE IF @version = 389 BEGIN
	SELECT '3.90 20180423 Смирнов'

	--Добавлено. Размер начисления бонуса по промокоду другу
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'phone' AND id = (SELECT id FROM sysobjects WHERE name = 'Users'))
		ALTER TABLE Users ADD phone BIGINT

	--Добавлено. Для указанного номера телефона проверяется, есть ли он в списке пользователей оператора. Если есть, то отправляется проверочный код.
	IF OBJECT_ID('ManagerSendCode') IS NOT NULL DROP PROCEDURE ManagerSendCode
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ManagerSendCode @login NVARCHAR(20) = NULL,
		@phone BIGINT = NULL OUTPUT, 
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @operator SMALLINT = NULL
		IF EXISTS(SELECT
					ct.id
				FROM
					Users AS ct
					INNER JOIN manager AS mr ON ct.id = mr.Users
					INNER JOIN usersrole AS ce ON ce.users = ct.id
					INNER JOIN role AS re ON ce.role = re.id
					INNER JOIN rolepermission AS rn ON re.id = rn.role
					INNER JOIN permission AS pn ON rn.permission = pn.id
				WHERE
					ct.login = @login)
		BEGIN
			SELECT
				@phone = ct.phone,
				@operator = mr.operator
			FROM
				Users AS ct
				INNER JOIN manager AS mr ON ct.id = mr.Users
				INNER JOIN usersrole AS ce ON ce.users = ct.id
				INNER JOIN role AS re ON ce.role = re.id
				INNER JOIN rolepermission AS rn ON re.id = rn.role
				INNER JOIN permission AS pn ON rn.permission = pn.id
			WHERE
				ct.login = @login 
			IF @@ROWCOUNT = 1
			BEGIN
				EXEC ClientSendCode @phone = @phone, @operator = @operator, @errormessage = @errormessage OUTPUT
			END
			ELSE
			BEGIN
				SET @errormessage = N''Найдено больше одной учётной записи по данному номер телефона''
				RETURN(1)
			END
			RETURN(0)
		END
		ELSE
		BEGIN
			SET @errormessage = N''Указанный номер телефона не зарегистрирован в программе''
			RETURN(2)
		END
	END'

	--Добавлено. Изменение пароля у учётной записи менеджера
	IF OBJECT_ID('ManagerSetPassword') IS NOT NULL DROP PROCEDURE ManagerSetPassword
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ManagerSetPassword
	@phone BIGINT = NULL OUTPUT,
	@code NVARCHAR(10) = NULL,
	@password NVARCHAR(20) = NULL,
	@errormessage NVARCHAR(100) OUTPUT
	AS SET NOCOUNT ON
	DECLARE @result TINYINT = NULL
	DECLARE @phone_code NVARCHAR(10) = NULL
	IF @code IS NULL BEGIN SET @errormessage = ''Не введен временный код'' RETURN(1) END
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(2) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(3) END
	SELECT @phone_code = code FROM phone WHERE number = @phone		
	IF NOT @phone_code = @code 
	BEGIN 
		SET @errormessage = ''Задан ошибочный временный код'' 
		RETURN(5) 
	END
	IF (@password IS NOT NULL)
	BEGIN
		UPDATE Users SET password = @password WHERE phone = @phone
	END
	ELSE
	BEGIN
		SET @errormessage = N''Не заполнен пароль''
		RETURN(2)
	END
	RETURN (0)'

END ELSE IF @version = 390 BEGIN
	SELECT '3.91 20180424 Юсупов'

	--Добавлено. Добавлена таблица-регистр содержащая расчитанные по дням данные для аналитики
	IF OBJECT_ID('reganalytics', 'U') IS NULL 
	BEGIN
		CREATE TABLE [dbo].[reganalytics](
			[date] [date] NOT NULL,
			[operator] [smallint] NOT NULL,
			[partner] [smallint] NULL,
			[pos] [smallint] NULL,
			[men] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_men]  DEFAULT ((0)),
			[women] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_women]  DEFAULT ((0)),
			[unknown] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_unknown]  DEFAULT ((0)),
			[with_buys] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_with_buys]  DEFAULT ((0)),
			[without_buys] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_without_buys]  DEFAULT ((0)),
			[with_ten_buys] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_with_ten_buys]  DEFAULT ((0)),
			[with_one_buy] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_with_one_buy]  DEFAULT ((0)),
			[with_phone] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_with_phone]  DEFAULT ((0)),
			[with_email] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_with_email]  DEFAULT ((0)),
			[men_buys] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_men_buys]  DEFAULT ((0)),
			[women_buys] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_women_buys]  DEFAULT ((0)),
			[unknown_buys] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_unknown_buys]  DEFAULT ((0)),
			[repeated_buys] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_repeated_buys]  DEFAULT ((0)),
			[buys_on_client] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_buys_on_client]  DEFAULT ((0)),
			[client_active_count] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_client_active_count]  DEFAULT ((0)),
			[gain] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_gain]  DEFAULT ((0)),
			[avg_cheque] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_avg_cheque]  DEFAULT ((0)),
			[buys_weekday] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_buys_weekday]  DEFAULT ((0)),
			[buys_weekoff] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_buys_weekoff]  DEFAULT ((0)),
			[age_less_25] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_age_less_25]  DEFAULT ((0)),
			[age_more_25_less_35] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_age_more_25_less_35]  DEFAULT ((0)),
			[age_more_35_less_45] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_age_more_35_less_45]  DEFAULT ((0)),
			[age_more_45] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_age_more_45]  DEFAULT ((0)),
			[age_unknown] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_age_unknown]  DEFAULT ((0)),
			[client_count] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_client_count]  DEFAULT ((0)),
			[with_birthdate] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_with_birthdate]  DEFAULT ((0)),
			[without_birthdate] [int] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_without_birthdate]  DEFAULT ((0)),
			[added_bonus] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_added_bonus]  DEFAULT ((0)),
			[added_bonus_count] [int] NOT NULL CONSTRAINT [DF_reganalytics_added_bonus_count]  DEFAULT ((0)),
			[avg_charge] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_avg_charge]  DEFAULT ((0)),
			[redeemed_bonus] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_redeemed_bonus]  DEFAULT ((0)),
			[redeemed_bonus_count] [int] NOT NULL CONSTRAINT [DF_reganalytics_redeemed_bonus_count]  DEFAULT ((0)),
			[avg_redeem] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_avg_redeem]  DEFAULT ((0)),
			[avg_balance] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_avg_balance]  DEFAULT ((0)),
			[avg_discount] [numeric](10, 2) NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_avg_dicount]  DEFAULT ((0)),
			[updated_at] [datetime] NOT NULL CONSTRAINT [DF_reganalyticclientbasestructure_updated_at]  DEFAULT (getdate())
		) ON [PRIMARY]
	END

	

	--Добавлено. Добавлена процедура для расчета регистра по аналитике
	IF OBJECT_ID('CalcAnalytics', 'P') IS NOT NULL DROP PROCEDURE CalcAnalytics
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[CalcAnalytics]
		@calcDay DATE = NULL,
		@beginDate DATE = NULL,
		@endDate DATE = NULL,
	
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
		DECLARE 
			@day DATE = NULL,
			@operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,

			/*Структура клиентской базы*/
			@menCnt INT = 0,
			@womenCnt INT = 0,
			@unknownGenderCnt INT = 0,
			@clientsWithBuysCnt INT = 0,
			@clientsWithoutBuysCnt INT = 0,
			@clientsWithTenBuysCnt INT = 0,
			@clientsWithOneBuysCnt INT = 0,
			@clientsWithPhoneCnt INT = 0,
			@clientsWithEmailCnt INT = 0,
			/*END Структура клиентской базы*/

			/*Активность клиентской базы*/
			@womenBuys NUMERIC(9,2) = 0,
			@menBuys NUMERIC(9,2) = 0,
			@unknownGenderBuys NUMERIC(9,2) = 0,
			@repeatedBuys NUMERIC(9,2) = 0,
			@buysOnClient NUMERIC(9,2) = 0,
			@clientsQty INT = 0,
			@clientActiveQty INT = 0,
			@gain NUMERIC(9,2) = 0,
			@gainBuys NUMERIC(9,2),
			@gainRefund NUMERIC(9,2),
			@avgCheque NUMERIC(9,2) = 0,
			@buysWeekdays INT = 0,
			@buysWeekOff INT = 0,
			@buyWeekdaySum NUMERIC(9,2), @buyWeekOffAmount NUMERIC(9,2), @chequeSum NUMERIC(9,2),  @buyWeekdayQty NUMERIC(9,2), @buyWeekoffQty NUMERIC(9,2), @buyQty NUMERIC(9,2),
			/*END Активность клиентской базы*/

			/*Сегментация по возрасту*/
			@clients INT = 0,
			@less25 INT = 0,
			@more25less35 INT = 0,
			@more35less45 INT = 0,
			@more45 INT = 0,
			@unknown INT = 0,
			@withBirthDate INT = 0,
			@withoutBirthDate INT = 0,
			/*END Сегментация по возрасту*/

			/*БОНУСЫ*/
			@addedBonus NUMERIC(9,2) = 0,
			@avgCharge NUMERIC(9,2) = 0,
			@redeemedBonus NUMERIC(9,2) = 0,
			@avgRedeem NUMERIC(9,2) = 0,
			@avgBalance NUMERIC(9,2) = 0,
			@avgDiscount NUMERIC(9,2) = 0,
			@addedBonusQty INT = 0, 
			@redeemedBonusQty INT = 0
			/*END БОНУСЫ*/
		BEGIN
			set @day = CONVERT (date, GETDATE());
			IF (@calcDay IS NOT NULL) set @day=CONVERT(date, @calcDay);
			if (@beginDate IS NULL) set @beginDate = @day
			if (@endDate IS NULL) set @endDate = DATEADD(dd,1,@day)

			--DELETE FROM reganalytics where [date] = @day
		
			BEGIN TRY /*Расчет итогов по оператору*/
				DECLARE Operator_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id FROM operator

				OPEN Operator_Cursor
				FETCH NEXT FROM Operator_Cursor INTO @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator WHERE gender = 1 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator and regdate>=@beginDate and regdate<@endDate) t3

						-- клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate

						-- клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							(ce.id IS NULL
							OR (
								(ce.refund = 0 OR ce.refund IS NULL) 
								AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1

						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						SELECT @clientsWithEmailCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
					END /*Окончание блока "Структура клиентской базы*/
				
					BEGIN /* Начало блока "Активность клиентской базы" */

						--Покупок на женщин,мужчин и без пола
						SELECT
							@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
							@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
							@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN card AS cd ON ce.card = cd.number
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SELECT
							@clientsQty = COUNT(DISTINCT cr.client)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON cd.number = ce.card
						WHERE
							cr.operator = @operator				
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END
						---

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON cd.number = ce.card
							WHERE 
								cr.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							partner IN (SELECT id FROM partner WHERE operator = @operator)
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner IN (SELECT id FROM partner WHERE operator = @operator)
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (cancelled IS NULL OR cancelled = 0) 
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator) 
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
					END /*Окончание блока "Активность клиентской базы"*/	
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND regdate>=@beginDate AND regdate<@endDate);
					
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND regdate>=@beginDate AND regdate<@endDate);

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/		

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus 
						WHERE 
							operator = @operator 
							AND bonus > 0 
							AND (refund = 0 OR refund IS NULL)
							AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
							AND proctime>=@beginDate and proctime<@endDate;


						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus 
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND (cheque IS NOT NULL OR source = 1) 
							AND (refund = 0 OR refund IS NULL)
							AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
							AND proctime>=@beginDate and proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (SELECT 
													COUNT(id) 
												FROM 
													bonus 
												WHERE 
													operator = @operator 
													AND bonus > 0 
													AND (refund = 0 OR refund IS NULL)
													AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
													AND proctime>=@beginDate AND proctime<@endDate
												);
					
						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(id) 
											FROM 
												bonus 
											WHERE 
												operator = @operator 
												AND bonus < 0 
												AND (cheque IS NOT NULL OR source = 1) 
												AND (refund = 0 OR refund IS NULL)
												AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND proctime>=@beginDate AND proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator AND cr.regdate>=@beginDate AND cr.regdate<@endDate)/@clients
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END


					END /*Окончание блока "БОНУСЫ*/


					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men, women,unknown, with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)      
						VALUES(
							@calcDay, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt, @clientsWithoutBuysCnt, @clientsWithTenBuysCnt, @clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt,
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Operator_Cursor INTO @operator
				END
				CLOSE Operator_Cursor
				DEALLOCATE Operator_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору''
				RETURN (1)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/

			BEGIN TRY /*Расчет итогов по оператору и партнеру*/
				DECLARE Partner_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id, operator FROM partner

				OPEN Partner_Cursor
				FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t3
			
						--клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							(ce.id IS NULL
							OR (
								(ce.refund = 0 OR ce.refund IS NULL) 
								AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1
				
						--клиенты с 1 покупкой	
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						SELECT @clientsWithEmailCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND email IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
				
					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						SELECT
							@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
							@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
							@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN card AS cd ON ce.card = cd.number
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND ce.id NOT IN (SELECT cheque FROM cheque INNER JOIN pos ON cheque.pos = pos.id where refund = 1 AND pos.partner = @partner)
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SELECT
							@clientsQty = COUNT(DISTINCT cr.client)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON cd.number = ce.card
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr 
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE 
								cr.operator = @operator 
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупка в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner 
						--	AND (refund IS NULL OR refund = 0) 
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END

					END /*Окончание блока "Активность клиентской базы"*/
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							AND bs.bonus > 0 
							AND ce.partner = @partner
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND bs.bonus > 0 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
											WHERE 
												bs.operator = @operator 
												AND ce.partner = @partner
												AND bs.bonus < 0 
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--					SELECT 
						--						SUM(cd.fullbalance) 
						--					FROM 
						--						clientoperator AS cr 
						--						INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--					WHERE 
						--						cr.operator = @operator 
						--						AND cr.regdate>=@beginDate AND cr.regdate<@beginDate
						--				)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/
					
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)        
						VALUES(
							@day, @operator, @partner,
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)       
						VALUES(
							@calcDay, @operator, @partner, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				END
				CLOSE Partner_Cursor
				DEALLOCATE Partner_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору и партнеру''
				RETURN (2)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/


			BEGIN TRY /*Расчет итогов по оператору, партнеру и торговой точке*/
				DECLARE Pos_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT  pos.id, pos.partner, p.operator from pos pos join partner p on p.id=pos.partner
				
				OPEN Pos_Cursor
				FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/
					
						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t3

						--клиенты с покупками
						SELECT
							@clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND cr.pos = @pos
							AND ce.pos = @pos
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--клиенты без покупок
						SELECT
							@clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							(ce.id IS NULL
							OR (
								(ce.refund = 0 OR ce.refund IS NULL) 
								AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.pos = @pos
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND ce.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1

						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND ce.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						SELECT @clientsWithEmailCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND email IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						SELECT
							@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
							@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
							@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND ce.pos = @pos
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN card AS cd ON ce.card = cd.number
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.pos = @pos
								AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.pos = @pos
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SELECT
							@clientsQty = COUNT(DISTINCT cr.client)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON cd.number = ce.card
						WHERE
							cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.pos = @pos
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr 
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE 
								cr.operator = @operator 
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND ce.pos = @pos
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner = @partner
							AND pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в выходные и будни
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
						----


					END /*Окончание блока "Активность клиентской базы"*/

					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);			

						-- С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						-- БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos = @pos
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/
					
					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							AND bs.bonus > 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND ce.pos = @pos
											AND bs.bonus > 0 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
											WHERE 
												bs.operator = @operator 
												AND bs.bonus < 0 
												AND ce.pos = @pos
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--						SELECT 
						--							SUM(cd.fullbalance) 
						--						FROM 
						--							clientoperator AS cr 
						--							INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--						WHERE 
						--							cr.operator = @operator
						--							AND cr.pos = @pos
						--							AND cr.regdate>=@beginDate AND cr.regdate<@endDate
						--					)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/	
								
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos, 
							men, women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)         
						VALUES(
							@calcDay, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator 
				END
				CLOSE Pos_Cursor
				DEALLOCATE Pos_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору, партнеру и торговой точке''
				RETURN (3)
			END CATCH
		END'

	--Добавлено. Добавлена процедура для получения данных для блока сегментация по возрасту из регистра
	IF OBJECT_ID('GetAnalyticClientSegmentationAge', 'P') IS NOT NULL DROP PROCEDURE GetAnalyticClientSegmentationAge
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAnalyticClientSegmentationAge]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,

	@less25 INT = NULL OUTPUT,
	@more25less35 INT = NULL OUTPUT,
	@more35less45 INT = NULL OUTPUT,
	@more45 INT = NULL OUTPUT,
	@unknown INT = NULL OUTPUT,
	@clientQty INT = NULL OUTPUT,
	@withBirthDate INT = NULL OUTPUT,
	@withoutBirthDate INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	--AS SET NOCOUNT ON
	AS
	BEGIN
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT
				@less25 = COALESCE(SUM(r.age_less_25),0),
				@more25less35 = COALESCE(SUM(r.age_more_25_less_35),0),
				@more35less45 = COALESCE(SUM(r.age_more_35_less_45),0),
				@more45 = COALESCE(SUM(r.age_more_45),0),
				@unknown = COALESCE(SUM(r.age_unknown),0),
				@clientQty = COALESCE(SUM(r.client_count),0),
				@withBirthDate = COALESCE(SUM(r.with_birthdate),0),
				@withoutBirthDate = COALESCE(SUM(r.without_birthdate),0)
			FROM
				reganalytics r
			WHERE
				r.operator = @operator AND r.partner IS NULL AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT
				@less25 = COALESCE(SUM(r.age_less_25),0),
				@more25less35 = COALESCE(SUM(r.age_more_25_less_35),0),
				@more35less45 = COALESCE(SUM(r.age_more_35_less_45),0),
				@more45 = COALESCE(SUM(r.age_more_45),0),
				@unknown = COALESCE(SUM(r.age_unknown),0),
				@clientQty = COALESCE(SUM(r.client_count),0),
				@withBirthDate = COALESCE(SUM(r.with_birthdate),0),
				@withoutBirthDate = COALESCE(SUM(r.without_birthdate),0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT
				@less25 = COALESCE(SUM(r.age_less_25),0),
				@more25less35 = COALESCE(SUM(r.age_more_25_less_35),0),
				@more35less45 = COALESCE(SUM(r.age_more_35_less_45),0),
				@more45 = COALESCE(SUM(r.age_more_45),0),
				@unknown = COALESCE(SUM(r.age_unknown),0),
				@clientQty = COALESCE(SUM(r.client_count),0),
				@withBirthDate = COALESCE(SUM(r.with_birthdate),0),
				@withoutBirthDate = COALESCE(SUM(r.without_birthdate),0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;
		END
		RETURN(0)
	END'

	--Добавлено. Добавлена процедура для получения данных для блока структура клиентской базы из регистра
	IF OBJECT_ID('GetAnalyticClientBaseStructure', 'P') IS NOT NULL DROP PROCEDURE GetAnalyticClientBaseStructure
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAnalyticClientBaseStructure]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,
	@menQty INT = 0 OUTPUT,
	@womenQty INT = 0 OUTPUT,
	@unknownGender INT = 0 OUTPUT,
	@clientsWithBuys INT = 0 OUTPUT,
	@clientsWithoutBuys INT = 0 OUTPUT,
	@clientsWithTenBuys INT = 0 OUTPUT,
	@clientsWithOneBuys INT = 0 OUTPUT,
	@clientsWithPhone INT = 0 OUTPUT,
	@clientsWithEmail INT = 0 OUTPUT,

	@menBuys NUMERIC(9,2) = NULL OUTPUT,
	@womenBuys NUMERIC(9,2) = NULL OUTPUT,
	@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
	@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
	@buysOnClient NUMERIC(9,2) = NULL OUTPUT,

	@errormessage NVARCHAR(100) = NULL OUTPUT
	--AS SET NOCOUNT ON
	AS
	BEGIN
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT 
				@menQty = COALESCE(SUM(r.men),0),
				@womenQty = COALESCE(SUM(r.women),0),
				@unknownGender = COALESCE(SUM(r.unknown),0),
				@clientsWithBuys = COALESCE(SUM(r.with_buys),0),
				@clientsWithoutBuys = COALESCE(SUM(r.without_buys),0),
				@clientsWithTenBuys = COALESCE(SUM(r.with_ten_buys),0),
				@clientsWithOneBuys = COALESCE(SUM(r.with_one_buy),0),
				@clientsWithPhone = COALESCE(SUM(r.with_phone),0),
				@clientsWithEmail = COALESCE(SUM(r.with_email),0),
				@menBuys = COALESCE(SUM(r.men_buys),0),
				@womenBuys = COALESCE(SUM(r.women_buys),0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys),0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys),0),
				@buysOnClient = COALESCE(SUM(r.buys_on_client),0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner IS NULL AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT 
				@menQty = COALESCE(SUM(r.men),0),
				@womenQty = COALESCE(SUM(r.women),0),
				@unknownGender = COALESCE(SUM(r.unknown),0),
				@clientsWithBuys = COALESCE(SUM(r.with_buys),0),
				@clientsWithoutBuys = COALESCE(SUM(r.without_buys),0),
				@clientsWithTenBuys = COALESCE(SUM(r.with_ten_buys),0),
				@clientsWithOneBuys = COALESCE(SUM(r.with_one_buy),0),
				@clientsWithPhone = COALESCE(SUM(r.with_phone),0),
				@clientsWithEmail = COALESCE(SUM(r.with_email), 0),
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				@buysOnClient = COALESCE(SUM(r.buys_on_client), 0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT 
				@menQty = COALESCE(SUM(r.men),0),
				@womenQty = COALESCE(SUM(r.women),0),
				@unknownGender = COALESCE(SUM(r.unknown),0),
				@clientsWithBuys = COALESCE(SUM(r.with_buys),0),
				@clientsWithoutBuys = COALESCE(SUM(r.without_buys),0),
				@clientsWithTenBuys = COALESCE(SUM(r.with_ten_buys),0),
				@clientsWithOneBuys = COALESCE(SUM(r.with_one_buy),0),
				@clientsWithPhone = COALESCE(SUM(r.with_phone),0),
				@clientsWithEmail = COALESCE(SUM(r.with_email), 0),
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				@buysOnClient = COALESCE(SUM(r.buys_on_client), 0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;
		END
		RETURN(0)
	END'

	--Добавлено. Добавлена процедура для получения данных для блока активность клиентской базы из регистра
	IF OBJECT_ID('GetAnalyticClientBaseActive', 'P') IS NOT NULL DROP PROCEDURE GetAnalyticClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAnalyticClientBaseActive]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,

	@menBuys NUMERIC(9,2) = NULL OUTPUT,
	@womenBuys NUMERIC(9,2) = NULL OUTPUT,
	@unknownGenderBuys NUMERIC(9,2) = NULL OUTPUT,
	@repeatedBuys NUMERIC(9,2) = NULL OUTPUT,
	@buysOnClient NUMERIC(9,2) = NULL OUTPUT,
	@clientActiveQty INT = NULL OUTPUT,
	@gain NUMERIC(9,2) = NULL OUTPUT,
	@avgCheque NUMERIC(9,2) = NULL OUTPUT,
	@buysWeekdays INT = NULL OUTPUT,
	@buysWeekOff INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	BEGIN
		DECLARE @buyWeekdayQty NUMERIC(9,2), @buyWeekoffQty  NUMERIC(9,2), @buyQty  NUMERIC(9,2);
		
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT 
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				--@buysOnClient = COALESCE(SUM(r.buys_on_client), 0),
				@clientActiveQty = COALESCE(SUM(r.client_active_count), 0),
				@gain = COALESCE(SUM(r.gain), 0)
				--@avgCheque = COALESCE(SUM(r.avg_cheque), 0),
				--@buysWeekdays = COALESCE(AVG(r.buys_weekday), 0),
				--@buysWeekOff = COALESCE(AVG(r.buys_weekoff), 0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner IS NULL AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;

			/*Средний чек*/
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;		
				
			/*Покупки в будни и выходные*/
			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
					AND ce.proctime>=@beginDate AND ce.proctime<@endDate
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator) 
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			IF (@buyQty > 0)
			BEGIN
				SET @buysWeekdays = ROUND(((@buyWeekdayQty/@buyQty)*100), 0);
				SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
			END
			ELSE
			BEGIN
				SET @buysWeekdays = 0;
				SET @buysWeekOff = 0;
			END	
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT 				
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				--@buysOnClient = COALESCE(SUM(r.buys_on_client), 0),
				@clientActiveQty = COALESCE(SUM(r.client_active_count), 0),
				@gain = COALESCE(SUM(r.gain), 0)
				--@avgCheque = COALESCE(SUM(r.avg_cheque), 0),
				--@buysWeekdays = COALESCE(AVG(r.buys_weekday), 0),
				--@buysWeekOff = COALESCE(AVG(r.buys_weekoff), 0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;

			/*Средний чек*/
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL)
				AND proctime>=@beginDate AND proctime<@endDate;

			/*Покупки в будни и выходные*/			
			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
					AND ce.proctime>=@beginDate AND ce.proctime<@endDate
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner 
				AND (refund IS NULL OR refund = 0) 
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			IF(@buyQty > 0)
			BEGIN
				SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
				SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
			END
			ELSE
			BEGIN
				SET @buysWeekdays = 0;
				SET @buysWeekOff = 0;
			END
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				--@buysOnClient = COALESCE(SUM(r.buys_on_client), 0),
				@clientActiveQty = COALESCE(SUM(r.client_active_count), 0),
				@gain = COALESCE(SUM(r.gain), 0)
				--@avgCheque = COALESCE(SUM(r.avg_cheque), 0),
				--@buysWeekdays = COALESCE(AVG(r.buys_weekday), 0),
				--@buysWeekOff = COALESCE(AVG(r.buys_weekoff), 0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;

			/*Средний чек*/
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			/*Покупки в будни и выходные*/			
			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
					AND proctime>=@beginDate AND proctime<@endDate
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque 
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			IF(@buyQty > 0)
			BEGIN
				SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
				SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
			END
			ELSE
			BEGIN
				SET @buysWeekdays = 0;
				SET @buysWeekOff = 0;
			END
		END

		BEGIN /*Покупок на клиента*/
			IF (@clientActiveQty > 0)
			BEGIN
				SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientActiveQty
			END
			ELSE
			BEGIN
				SET @buysOnClient = 0
			END
		END
		

		RETURN(0)
	END'

	--Добавлено. Добавлена процедура для получения данных для блока бонусы из регистра
	IF OBJECT_ID('GetAnalyticClientBonuses', 'P') IS NOT NULL DROP PROCEDURE GetAnalyticClientBonuses
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAnalyticClientBonuses]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,

	@addedBonus NUMERIC(9,2) = NULL OUTPUT,
	@addedBonusCount INT = NULL OUTPUT,
	@avgCharge NUMERIC(9,2) = NULL OUTPUT,
	@redeemedBonus NUMERIC(9,2) = NULL OUTPUT,
	@redeemedBonusCount INT = NULL OUTPUT,
	@avgRedeem NUMERIC(9,2) = NULL OUTPUT,
	@avgBalance NUMERIC(9,2) = NULL OUTPUT,
	@avgDiscount NUMERIC(9,2) = NULL OUTPUT,
	@clientCount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM
				reganalytics r
			WHERE
				r.operator = @operator AND r.partner IS NULL AND r.pos IS NULL AND r.[date]>=@beginDate and r.[date]<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator AND cr.regdate>=@beginDate AND cr.regdate<@endDate)/@clientCount
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (
						SELECT 
							SUM(cd.fullbalance) 
						FROM 
							clientoperator AS cr 
							INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						WHERE 
							cr.operator = @operator 
							AND cr.regdate>=@beginDate AND cr.regdate<@beginDate
					)/@clientCount;	
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM reganalytics r
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (
						SELECT 
							SUM(cd.fullbalance) 
						FROM 
							clientoperator AS cr 
							INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						WHERE 
							cr.operator = @operator
							AND cr.pos = @pos
							AND cr.regdate>=@beginDate AND cr.regdate<@endDate
					)/@clientCount	
				
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END

		/*Среднее начисление*/
		IF (@addedBonusCount>0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusCount, 0);
		END 
		ELSE 
		BEGIN
			SET @avgCharge = 0;
		END

		/*Среднее списание*/
		IF (@redeemedBonusCount>0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusCount, 0);
		END 
		ELSE 
		BEGIN
			SET @avgRedeem = 0;
		END

		/*Фактическая скидка*/
		IF (@addedBonus>0)
		BEGIN
			SET @avgDiscount = ROUND(@redeemedBonus/@addedBonus, 2);
		END 
		ELSE 
		BEGIN
			SET @avgDiscount = 0;
		END

		RETURN(0)
	END'



END ELSE IF @version = 391 BEGIN
	SELECT '3.92 20180429 Юсупов'

	--Изменено. Процедура Reports.OperatorClient для выгрузки списка клиентов в файл согласно фильров
	IF OBJECT_ID('[Reports].[OperatorClient]', 'P') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [Reports].[OperatorClient] @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@partner smallint = NULL,
		@pos smallint = NULL,

		@f_fio NVARCHAR(250) = NULL,
		@f_phone NVARCHAR(11) = NULL,
		@f_email NVARCHAR(250) = NULL,
		@f_birthdate DATE = NULL,
		@f_sex int = NULL,
		@f_type NVARCHAR(250) = NULL,
		@f_card NVARCHAR(250) = NULL,
		@f_level NVARCHAR(250) = NULL,
		@f_balance_more int = NULL,
		@f_balance_less int = NULL,

		@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		DECLARE @SQLStr NVARCHAR(MAX) = '''', @whereStr NVARCHAR(MAX) = '''', @ParamDefinition NVARCHAR(500), @joinStr NVARCHAR(MAX) = '''';

		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		SET @ParamDefinition = N''@operator smallint, @partner smallint, @pos smallint, @from date=NULL, @to date = NULL'';  

		SET @SQLStr = N''
		DECLARE @beginDate DATE, @endDate DATE;

		IF(@from IS NOT NULL)
		BEGIN
			SET @beginDate = @from
		END
		ELSE
		BEGIN
			SET @beginDate = (SELECT MIN(regdate) FROM clientoperator WHERE operator = @operator)
		END

		IF(@to IS NOT NULL)
		BEGIN
			SET @to = DATEADD(DAY, 1, (@to))		
			SET @endDate = @to
		END
		ELSE
		BEGIN
			SET @endDate = DATEADD(DAY, 1, (GETDATE()))
		END
			
		DECLARE @cheques AS TABLE
		(
			id INT,
			amount DECIMAL(9,2),
			refund BIT,
			card BIGINT,
			UNIQUE CLUSTERED (id, amount, refund)
		)INSERT INTO @cheques (id, amount, refund, card)
		SELECT
			id,
			amount,
			refund,
			card
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			AND (cancelled IS NULL OR cancelled = 0)

		SELECT
			(SELECT smssender FROM operator WHERE id = @operator) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''''''') + '''' '''' + COALESCE(address, '''''''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''''''') + '''' '''' + COALESCE(address, '''''''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''''M5TT21'''' AND pr.operator = @operator), N''''Lcpos'''')
				WHEN cr.pos IS NULL AND cr.appdevice IS NULL AND cr.password IS NOT NULL THEN N''''Сайт''''
				WHEN cr.pos IS NULL AND cr.appdevice IS NOT NULL AND cr.password IS NOT NULL THEN cr.appregistrator
				ELSE N''''Нет''''
			END AS address,
			COALESCE(ct.surname, '''''''') + '''' '''' + coalesce(ct.name, '''''''') + '''' '''' + COALESCE(ct.patronymic, '''''''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''''Женский''''
				WHEN 1 THEN N''''Мужской''''
				ELSE N''''Неизвестен''''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''''''') as email,
			cd.number,
			COALESCE(cp.name, N''''Клиент'''') AS ClientType, 
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND (refund is null or refund = 0)) AS [Количество покупок],			
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND (refund IS NULL OR refund = 0)), 0) AS [Сумма покупок],
			COALESCE((SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Начислено бонусов],
			COALESCE((SELECT (-1)*SUM(bonus) FROM bonus WHERE bonus < 0 AND (refund = 0 OR refund IS NULL) AND cheque IN (SELECT id FROM @cheques WHERE card = cd.number)), 0) AS [Списано бонусов],
			(SELECT COUNT(*) FROM @cheques WHERE card = cd.number AND refund = 1) AS [Количество возвратов],
			COALESCE((SELECT SUM(amount) FROM @cheques WHERE card = cd.number AND refund = 1), 0) AS [Сумма возвратов],
			cd.fullbalance,
			COALESCE((SELECT condition FROM level WHERE id = cd.level), (SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'''' %'''' FROM chequerule WHERE operator = @operator)) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			(SELECT SUM(bonus) FROM bonus WHERE bonus > 0 AND source > 1 AND card = cd.number) AS [Бонусы не за покупки],
			cr.regdate
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id 

		''

		SET @whereStr=N''
		WHERE
			cr.regdate >= @beginDate
			AND cr.regdate < @endDate '';

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN 
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator '';
		END
		
		IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN 
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator 
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner) "'';
		END		

		IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN 
			SET @joinStr = @joinStr + N'' INNER JOIN pos p on p.id = cr.pos''
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator 
				AND cr.pos = @pos'';
		END	

		IF (@f_fio IS NOT NULL) /*Фильтр по ФИО*/
		BEGIN
			SET @whereStr = @whereStr + N'' 
			AND (
					COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''%'' + @f_fio + '''''' ''+
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''%''+ @f_fio + N''%'''''' +
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''''+@f_fio+N''%''''''+ 
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') = ''''''+@f_fio+''''''
				) ''
		END

		IF (@f_phone IS NOT NULL) /*Фильтр по телефону*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (ct.phone LIKE ''''%'' + @f_phone + ''%'''' OR ct.phone LIKE ''''%'' + @f_phone + '''''' OR ct.phone LIKE '''''' + @f_phone + ''%'''' OR ct.phone =''''''+ @f_phone + '''''') ''
		END

		IF (@f_email IS NOT NULL) /*Фильтр по email*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (ct.email LIKE ''''%'' + @f_email + ''%'''' OR ct.email LIKE ''''%'' + @f_email  + '''''' OR ct.email LIKE '''''' + @f_email + ''%'''' OR ct.email ='''''' + @f_email + '''''') '';
		END

		IF (@f_birthdate IS NOT NULL) /*Фильтр по дате рождения*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, COALESCE(cr.birthdate, ct.birthdate))='''''' + CONVERT(NVARCHAR(20), @f_birthdate) + '''''' '';
		END

		IF (@f_sex IS NOT NULL) /*Фильтр по полу*/
		BEGIN
			IF (@f_sex=0) SET @whereStr = @whereStr + N'' AND ct.gender=0 '';
			ELSE IF (@f_sex=1) SET @whereStr = @whereStr + N'' AND ct.gender=1 '';
			ELSE IF (@f_sex=2) SET @whereStr = @whereStr + N'' AND ct.gender IS NULL '';
		END

		IF (@f_type IS NOT NULL) /*Фильтр по типу*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND COALESCE(cp.name, N''''Клиент'''') = ''''''+ @f_type +'''''''';
		END

		IF (@f_card IS NOT NULL) /*Фильтр по номеру карты*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (cd.number LIKE ''''%'' + @f_card + ''%''''OR cd.number LIKE ''''%'' + @f_card + '''''' OR cd.number LIKE '''''' + @f_card + ''%'''' OR cd.number ='''''' + @f_card + '''''') '';
		END

		IF (@f_balance_more IS NOT NULL) /*Фильтр по балансу нижняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance>=''+CONVERT(NVARCHAR(10), @f_balance_more);
		END

		IF (@f_balance_less IS NOT NULL) /*Фильтр по балансу верхняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance<''+CONVERT(NVARCHAR(10), @f_balance_less);
		END

		IF (@f_balance_more IS NOT NULL) /*Фильтр по начислению нижняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance>=''+CONVERT(NVARCHAR(10), @f_balance_more);
		END

		IF (@f_balance_less IS NOT NULL) /*Фильтр по начислению верхняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance<''+CONVERT(NVARCHAR(10), @f_balance_less);
		END

		 
            

		SET @SQLStr = @SQLStr + @whereStr;

		--SET @errormessage = @SQLStr;

		--print @errormessage;

		EXECUTE sp_executesql @SQLStr, @ParamDefinition, @operator, @partner, @pos;
		
		RETURN(0)
	END
	'

	--Изменено. Процедура Reports.OperatorSales для выгрузки списка продаж в файл согласно фильров
	IF OBJECT_ID('[Reports].[OperatorSales]', 'P') IS NOT NULL DROP PROCEDURE [Reports].[OperatorSales]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [Reports].[OperatorSales] @from date = NULL,
				@to date = NULL, 
				@operator smallint = NULL,
				@partner smallint = NULL,
				@pos smallint = NULL,

				@f_date DATE = NULL,
				@f_pos NVARCHAR(250) = NULL,
				@f_phone NVARCHAR(250) = NULL,
				@f_operation NVARCHAR(250) = NULL,
				@f_cheque NVARCHAR(250) = NULL,
				@f_sum_more INT = NULL,
				@f_sum_less INT = NULL,
				@f_charge_more INT = NULL,
				@f_charge_less INT = NULL,
				@f_redeem_more INT = NULL,
				@f_redeem_less INT = NULL,

				@errormessage nvarchar(100) OUTPUT
		AS
		BEGIN
			DECLARE 
				@SQLStr NVARCHAR(MAX) = '''', 
				@whereStr NVARCHAR(MAX) = '''', 
				@joinStr NVARCHAR(MAX) = '''',
				@ParamDefinition NVARCHAR(500); 

				--@SQLStrInner1 NVARCHAR(MAX) = '''',
				--@joinStrInner1 NVARCHAR(MAX) = '''',
				--@whereStrInner1 NVARCHAR(MAX) = '''';

			IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
			BEGIN
				SET @errormessage = N''Оператор не найден''
				RETURN(1)
			END

			SET @ParamDefinition = N''@operator smallint, @partner smallint, @pos smallint, @from date=NULL, @to date = NULL'';  

			SET @SQLStr = N''
				DECLARE @bonuses AS TABLE
				(
					bonusAdded NUMERIC(9,2),
					bonusRedeemed NUMERIC(9,2),
					cheque INT,
					bonussource NVARCHAR(50),
					rownum INT IDENTITY,
					proctime DATETIME,
					card BIGINT,
					partner SMALLINT,
					pos SMALLINT
					UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
				)

				DECLARE @bonuscheques AS TABLE
				(
					bonusAdded NUMERIC(9,2),
					bonusRedeemed NUMERIC(9,2),
					cheque INT,
					bonussource NVARCHAR(50),
					rownum INT IDENTITY,
					proctime DATETIME,
					card BIGINT,
					partner SMALLINT,
					pos SMALLINT,
					chequeamount NUMERIC(9,2),
					operationtype NVARCHAR(20),
					number NVARCHAR(10)
					UNIQUE CLUSTERED (cheque, bonusAdded, bonusRedeemed, proctime, rownum)
				)

				DECLARE @beginDate DATE, @endDate DATE

				SET @beginDate = @from;
				SET @endDate = @to;

				INSERT INTO @bonuses(bonusAdded, bonusRedeemed, cheque, bonussource, proctime, card, partner)
				SELECT
					CASE 
						WHEN bs.bonus > 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN bs.bonus
						WHEN bs.bonus <= 0 AND bs.refund = 1 THEN bs.bonus
						ELSE 0
					END AS bonusAdded,
					CASE 
						WHEN bs.bonus <= 0 AND (bs.refund = 0 OR bs.refund IS NULL) THEN (-1)*bs.bonus
						WHEN bs.bonus >= 0 AND bs.refund = 1 THEN (-1)*bs.bonus
						ELSE 0
					END AS bonusRedeemed,
					bs.cheque,
					COALESCE(be.name, N''''Не указан тип бонусов'''') AS bonussource,
					bs.proctime,
					bs.card,
					bs.partner
				FROM
					bonus AS bs
					LEFT JOIN bonussource AS be ON bs.source = be.code 
				WHERE
				bs.operator = @operator
				AND bs.proctime >= @beginDate
				AND bs.proctime < @endDate;

				INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
				SELECT DISTINCT SUM(bonusAdded) OVER(PARTITION BY cheque) AS bonusAdded, SUM(bonusredeemed) OVER(PARTITION BY cheque) AS bonusRedeemed, cheque, bonussource, card, partner FROM @bonuses WHERE cheque IS NOT NULL
			
				INSERT INTO @bonuscheques(bonusAdded, bonusRedeemed, cheque, bonussource, card, partner)
				SELECT
					0, 0, ce.id, N''''Не указан тип бонусов'''', ce.card, ce.partner
				FROM 
					cheque AS ce
					LEFT JOIN bonus AS bs ON ce.id = bs.cheque
				WHERE 
					bs.id IS NULL 
					AND ce.partner IN (SELECT id FROM partner WHERE operator = @operator)

				UPDATE 
					bs 
				SET 
					bs.partner = ce.partner,
					bs.pos = ce.pos, 
					bs.chequeamount = ce.amount, 
					bs.proctime = ce.chequetime,
					bs.number = ce.number,
					bs.operationtype = (CASE ce.refund
											WHEN 0 THEN N''''Покупка''''
											WHEN NULL THEN N''''Покупка''''
											WHEN 1 THEN N''''Возврат''''
										END) 
				FROM 
					@bonuscheques AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id


				SELECT
					(SELECT name FROM partner WHERE id = bs.partner) AS brand,
					(SELECT COALESCE(cy.Name, '''''''') + '''' '''' + COALESCE(address, '''''''') FROM pos AS ps LEFT JOIN city AS cy ON ps.city = cy.id  WHERE partner = bs.partner AND ps.id = bs.pos) AS address,
					COALESCE(cr.name, ct.name, '''''''') + '''' '''' + COALESCE(cr.surname, ct.surname, '''''''') + '''' '''' + COALESCE(cr.patronymic, ct.patronymic, '''''''') AS fullName,
					CASE cr.gender
						WHEN 0 THEN N''''Женский''''
						WHEN 1 THEN N''''Мужской''''
						ELSE N''''Неизвестен''''
					END AS gender,
					COALESCE(cr.phone, ct.phone, 0) AS phone,
					COALESCE(cr.email, ct.email, '''''''') AS email,
					cd.number,
					COALESCE(ce.Name, '''''''') AS ClientType,
					bs.proctime AS chequetime,
					COALESCE(bs.operationtype, bs.bonussource),
					CASE
						WHEN bs.chequeamount IS NOT NULL THEN bs.chequeamount
						WHEN bs.chequeamount IS NULL THEN 0
					END AS [Сумма операции],
					bs.bonusAdded AS [Начислено бонусов],
					bs.bonusRedeemed AS [Списано бонусов],
					ps.name AS posname					
				FROM
					@bonuscheques AS bs
					INNER JOIN card AS cd ON bs.card = cd.number
					INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
					INNER JOIN client AS ct ON ct.id = cd.client
					LEFT JOIN cardtype AS ce ON cd.type = ce.id 
					LEFT JOIN pos ps ON ps.id = bs.pos 
					'';


			IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				SET @whereStr = N'' WHERE cd.operator = @operator AND bs.proctime>=@beginDate AND bs.proctime<@endDate '';
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				SET @whereStr = N'' WHERE cd.operator = @operator  AND bs.partner = @partner AND bs.proctime>=@beginDate AND bs.proctime<@endDate '';
			END
			ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				SET @whereStr = N'' WHERE cd.operator = @operator AND bs.partner = @partner AND bs.pos = @pos  AND bs.proctime>=@beginDate AND bs.proctime<@endDate '';
			END

			IF (@f_date IS NOT NULL) /*Фильтр по дате покупки*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND CONVERT(date, bs.proctime) ='''''' + CONVERT(NVARCHAR(20), @f_date) + '''''' '';
			END

			IF (@f_pos IS NOT NULL) /*Фильтр по ТТ*/
			BEGIN
				SET @whereStr = @whereStr + N'' 
					AND (
						ps.name LIKE ''''%'' + @f_pos + ''%'''' 
						OR ps.name LIKE ''''%'' + @f_pos + '''''' 
						OR ps.name LIKE ''''''+ @f_pos + ''%'''' 
						OR ps.name = '''''' + @f_pos +'''''') '';
			END

			IF (@f_phone IS NOT NULL) /*Фильтр по телефону*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND (COALESCE(cr.phone, ct.phone, 0) LIKE ''''%'' + @f_phone + ''%'''' OR COALESCE(cr.phone, ct.phone, 0) LIKE ''''%'' + @f_phone + '''''' OR COALESCE(cr.phone, ct.phone, 0) LIKE '''''' + @f_phone + ''%'''' OR COALESCE(cr.phone, ct.phone, 0) =''''''+ @f_phone + '''''') ''
			END

			IF (@f_operation IS NOT NULL) /*Фильтр по типу*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND COALESCE(bs.operationtype, bs.bonussource) = ''''''+ @f_operation +'''''''';
			END

			IF (@f_cheque IS NOT NULL) /*Фильтр по номеру чека*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND (bs.number LIKE ''''%'' + @f_cheque + ''%''''OR bs.number LIKE ''''%'' + @f_cheque + '''''' OR bs.number LIKE '''''' + @f_cheque + ''%'''' OR bs.number ='''''' + @f_cheque + '''''') '';
				set @errormessage = @whereStr;
			END

			IF (@f_sum_more IS NOT NULL) /*Фильтр по сумме нижняя граница*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND bs.chequeamount>=''+CONVERT(NVARCHAR(10), @f_sum_more);
			END

			IF (@f_sum_less IS NOT NULL) /*Фильтр по сумме верхняя граница*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND bs.chequeamount<''+CONVERT(NVARCHAR(10), @f_sum_less);
			END

			IF (@f_charge_more IS NOT NULL) /*Фильтр по начислению нижняя граница*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND bs.bonusAdded>=''+CONVERT(NVARCHAR(10), @f_charge_more);
			END

			IF (@f_charge_less IS NOT NULL) /*Фильтр по начислению верхняя граница*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND bs.bonusAdded<''+CONVERT(NVARCHAR(10), @f_charge_less);
			END

			IF (@f_redeem_more IS NOT NULL) /*Фильтр по списанию нижняя граница*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND bs.bonusRedeemed>=''+CONVERT(NVARCHAR(10), @f_redeem_more);
			END

			IF (@f_redeem_less IS NOT NULL) /*Фильтр по списанию верхняя граница*/
			BEGIN
				SET @whereStr = @whereStr + N'' AND bs.bonusRedeemed<''+CONVERT(NVARCHAR(10), @f_redeem_less);
			END


			SET @SQLStr = @SQLStr + @whereStr + N'' ORDER BY bs.proctime DESC'';

			EXECUTE sp_executesql @SQLStr, @ParamDefinition, @operator, @partner, @pos, @from, @to;

			RETURN(0)
		END
	'

END ELSE IF @version = 392 BEGIN
	SELECT '3.93 20180429 Смирнов'

	--Добавлено. Добавлен флаг установки пароля пользователю
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'setclientpassword' AND id = (SELECT id FROM sysobjects WHERE name = 'operator'))
		ALTER TABLE operator ADD setclientpassword BIT

	--Изменено. Добавлены проверки на включение установки пароля пользователю и на существование текста смс для оператора, если его нет, то выбирается общий текст смс
	IF OBJECT_ID('ClientSetSendPassword') IS NOT NULL DROP PROCEDURE ClientSetSendPassword
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientSetSendPassword @operator SMALLINT = NULL,
		@client INT = NULL,
		@phone BIGINT = NULL,
		@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @digit INT = NULL,
				@smsusername NVARCHAR(20) = NULL, 
				@smspassword NVARCHAR(20) = NULL, 
				@smssender NVARCHAR(20) = NULL, 
				@smsprovider NVARCHAR(20) = NULL,
				@text NVARCHAR(200) = NULL,
				@setclientpassword BIT = NULL,
				@clientpassword NVARCHAR(20) = NULL		

		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Не найден указанный оператор''
			RETURN(1)
		END
		IF NOT EXISTS(SELECT client FROM clientoperator WHERE client = @client AND operator = @operator AND phone = @phone)
		BEGIN
			SET @errormessage = N''Не найден указанный клиент у указанного оператора''
			RETURN(2)
		END

		SELECT @clientpassword = password FROM clientoperator WHERE phone = @phone AND client = @client AND operator = @operator
		IF @clientpassword IS NOT NULL
		BEGIN
			RETURN(0)
		END

		SELECT @digit = FLOOR(RAND() * POWER(CAST(10 as BIGINT), 8))
		SET @clientpassword = CAST(@digit AS NVARCHAR(20))
		SET @smsprovider = ''greensms''
		SELECT @smsprovider = smsprovider, @smsusername = smsusername, @smspassword = smspassword, @smssender = smssender, @setclientpassword = setclientpassword FROM operator WHERE id = @operator
		IF @@ROWCOUNT = 0 BEGIN
			SELECT @smsusername = value FROM parameter WHERE name = ''smsusername''
			SELECT @smspassword = value FROM parameter WHERE name = ''smspassword''
			SELECT @smssender = value FROM parameter WHERE name = ''smssender''
		END		
		
		IF @setclientpassword = 1
		BEGIN
			UPDATE clientoperator SET password = @clientpassword WHERE client = @client AND operator = @operator
			IF EXISTS(SELECT operator FROM parameter WHERE operator = @operator AND name = N''smspatternpassword'')
			BEGIN
				SELECT @text = REPLACE(value, N''{0}'', @clientpassword) FROM parameter WHERE operator = @operator AND name = N''smspatternpassword''
			END
			ELSE
			BEGIN
				SELECT @text = REPLACE(value, N''{0}'', @clientpassword) FROM parameter WHERE operator IS NULL AND name = N''smspatternpassword''
			END
			IF @smsprovider = ''greensms''
				EXEC SmsSendGreenSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
			ELSE IF @smsprovider = ''terasms''
				EXEC SmsSendTeraSms @phonenumber = @phone, @text = @text, @username = @smsusername, @password = @smspassword, @from = @smssender
			IF @text IS NULL SET @text = ''Текст сообщения в процедуре ClientSetSendPassword не заполнен''
			INSERT INTO message (client, text, rectime, phone, status, provider, operator) VALUES (@client, @text, GETDATE(), @phone, 1, @smsprovider, @operator)
		END
	END'

	--Изменено. Добавлен общий шаблон текста смс без оператора при отправке пароля
	IF OBJECT_ID('Initiate') IS NOT NULL DROP PROCEDURE Initiate
	EXEC sp_executesql @statement = N'create procedure Initiate
	AS SET NOCOUNT ON
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailpassword'') INSERT INTO parameter (name, value) VALUES (''emailpassword'', ''no-reply0910'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailaddress'') INSERT INTO parameter (name, value) VALUES (''emailaddress'', ''no-reply@loycon.ru'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailprovider'') INSERT INTO parameter (name, value) VALUES (''emailprovider'', ''yandex'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailsender'') INSERT INTO parameter (name, value) VALUES (''emailsender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge1'') INSERT INTO parameter (name, value) VALUES (''smscharge1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge2'') INSERT INTO parameter (name, value) VALUES (''smscharge2'', N''р.Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge3'') INSERT INTO parameter (name, value) VALUES (''smscharge3'', N''б. '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smspassword'') INSERT INTO parameter (name, value) VALUES (''smspassword'', ''Yu2910aTew'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem1'') INSERT INTO parameter (name, value) VALUES (''smsredeem1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem2'') INSERT INTO parameter (name, value) VALUES (''smsredeem2'', N''Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem3'') INSERT INTO parameter (name, value) VALUES (''smsredeem3'', N'' б.
Баланс - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem4'') INSERT INTO parameter (name, value) VALUES (''smsredeem4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund1'') INSERT INTO parameter (name, value) VALUES (''smsrefund1'', N''Возврат - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund2'') INSERT INTO parameter (name, value) VALUES (''smsrefund2'', N'' р.
Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund3'') INSERT INTO parameter (name, value) VALUES (''smsrefund3'', N'' б.
Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund4'') INSERT INTO parameter (name, value) VALUES (''smsrefund4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsregcode'') INSERT INTO parameter (name, value) VALUES (''smsregcode'', ''Для завершения регистрации в программе введите код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssendcode'') INSERT INTO parameter (name, value) VALUES (''smssendcode'', ''Ваш временный код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssender'') INSERT INTO parameter (name, value) VALUES (''smssender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsusername'') INSERT INTO parameter (name, value) VALUES (''smsusername'', ''mredcard'')
	IF EXISTS(SELECT value FROM version) UPDATE version SET value = 393 ELSE INSERT INTO version (value) VALUES (393)
	IF NOT EXISTS(SELECT id FROM clientstatus WHERE id = 0) INSERT INTO clientstatus (id, name) VALUES (0, ''Активен'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 0) INSERT INTO cardstatus (id, name) VALUES (0, ''Активна'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 1) INSERT INTO cardstatus (id, name) VALUES (1, ''Блокирована'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 2) INSERT INTO cardstatus (id, name) VALUES (2, ''Ограничена'')
	DECLARE @operator SMALLINT = NULL, @partner SMALLINT = NULL, @region TINYINT = NULL, @city SMALLINT = NULL
	SELECT @operator = id FROM operator WHERE name = ''Оператор''
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO operator (name) VALUES (''Оператор'')
		SET @operator = SCOPE_IDENTITY()
	END
	SELECT @partner = id FROM partner WHERE operator = @operator AND name = ''Партнер''
	IF @partner IS NULL BEGIN
		INSERT INTO partner (name, operator) VALUES(''Партнер'', @operator)
		SET @partner = SCOPE_IDENTITY()
	END
	SELECT @region = id FROM region WHERE name = ''Москва''
	IF @region IS NULL BEGIN
		INSERT INTO region (name) VALUES(''Москва'')
		SET @region = SCOPE_IDENTITY()
	END
	SELECT @city = id FROM city WHERE region = @region AND name = ''Москва''
	IF @city IS NULL BEGIN
		INSERT INTO city (name, region) VALUES(''Москва'', @region)
		SET @city = SCOPE_IDENTITY()
	END
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 1) INSERT INTO messagestatus (code, name) VALUES (1, ''Отправлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 2) INSERT INTO messagestatus (code, name) VALUES (2, ''Доставлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 3) INSERT INTO messagestatus (code, name) VALUES (3, ''Спам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 4) INSERT INTO messagestatus (code, name) VALUES (4, ''Отписка'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 5) INSERT INTO messagestatus (code, name) VALUES (5, ''Был переход по ссылкам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 6) INSERT INTO messagestatus (code, name) VALUES (6, ''Устройство пользователя'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent1'') INSERT INTO parameter (name, value) VALUES(''smsagent1'', N''С Вашего счета списано '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent2'') INSERT INTO parameter (name, value) VALUES(''smsagent2'', N''На Ваш счет начислено '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent3'') INSERT INTO parameter (name, value) VALUES(''smsagent3'', N'' бонусов! Подробности: '')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadAll'') INSERT INTO permission (code, name) VALUES(''ReadAll'', ''Read all'')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadWriteAll'') INSERT INTO permission (code, name) VALUES(''ReadWriteAll'', ''Read and write all'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Reader'') INSERT INTO role (name) VALUES(''Reader'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Writer'') INSERT INTO role (name) VALUES(''Writer'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Analytics'') INSERT INTO roledescription (name) VALUES (N''Analytics'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsClient'') INSERT INTO roledescription (name) VALUES (N''AnalyticsClient'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsShop'') INSERT INTO roledescription (name) VALUES (N''AnalyticsShop'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsGood'') INSERT INTO roledescription (name) VALUES (N''AnalyticsGood'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Sales'') INSERT INTO roledescription (name) VALUES (N''Sales'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Terminal'') INSERT INTO roledescription (name) VALUES (N''Terminal'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Clients'') INSERT INTO roledescription (name) VALUES (N''Clients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsAllClients'') INSERT INTO roledescription (name) VALUES (N''ClientsAllClients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsCreateClients'') INSERT INTO roledescription (name) VALUES (N''ClientsCreateClients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsCreateClientList'') INSERT INTO roledescription (name) VALUES (N''ClientsCreateClientList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsMyClientList'') INSERT INTO roledescription (name) VALUES (N''ClientsMyClientList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Campaign'') INSERT INTO roledescription (name) VALUES (N''Campaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignMyCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignMyCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignCreateCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignCreateCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignTemplateCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignTemplateCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Mailing'') INSERT INTO roledescription (name) VALUES (N''Mailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingMyMailing'') INSERT INTO roledescription (name) VALUES (N''MailingMyMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingCreateMailing'') INSERT INTO roledescription (name) VALUES (N''MailingCreateMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingTemplateMailing'') INSERT INTO roledescription (name) VALUES (N''MailingTemplateMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Shops'') INSERT INTO roledescription (name) VALUES (N''Shops'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsMyShops'') INSERT INTO roledescription (name) VALUES (N''ShopsMyShops'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsCreateShopList'') INSERT INTO roledescription (name) VALUES (N''ShopsCreateShopList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsМyShopList'') INSERT INTO roledescription (name) VALUES (N''ShopsМyShopList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Goods'') INSERT INTO roledescription (name) VALUES (N''Goods'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsMyGoods'') INSERT INTO roledescription (name) VALUES (N''GoodsMyGoods'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsCreateGoodsList'') INSERT INTO roledescription (name) VALUES (N''GoodsCreateGoodsList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsMyGoodsList'') INSERT INTO roledescription (name) VALUES (N''GoodsMyGoodsList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Total'') INSERT INTO roledescription (name) VALUES (N''Total'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Faq'') INSERT INTO roledescription (name) VALUES (N''Faq'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''FaqManual'') INSERT INTO roledescription (name) VALUES (N''FaqManual'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Profile'') INSERT INTO roledescription (name) VALUES (N''Profile'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''OperatorBonusAdd'') INSERT INTO roledescription (name) VALUES (N''OperatorBonusAdd'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''OperatorBonusRedeem'') INSERT INTO roledescription (name) VALUES (N''OperatorBonusRedeem'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ActivateCard'') INSERT INTO roledescription (name) VALUES (N''ActivateCard'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smspatternpassword'') INSERT INTO parameter (name, value, operator) VALUES(''smspatternpassword'', N''Вы успешно зарегистрированы. Пароль в личный кабинет {0}'', NULL)
	RETURN(0)'

	EXEC Initiate

	--Изменено. При наличии промокода проставляется источник бонусов friend bonus
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL,
	@reglku BIT = NULL,
	@clientsetpassword BIT = NULL,
	@email NVARCHAR(50) = NULL,
	@promocode NVARCHAR(20) = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@maxlocal BIGINT = NULL, 
			@cardoperator SMALLINT = NULL, 
			@virtual BIT = 0, 
			@welcomebonus NUMERIC(9,2) = NULL, 
			@friendphone BIGINT = NULL, 
			@friendcard BIGINT = NULL, 
			@result INT = NULL, 
			@friendclient INT = NULL, 
			@bonustofriend NUMERIC(9,2) = NULL, 
			@bonusforfriend NUMERIC(9,2) = NULL, 
			@base10 BIGINT = NULL, 
			@welcomebonuslku NUMERIC(9,2) = NULL, 
			@activationlink BIT = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL IF @phone = 0 SET @phone = NULL IF @card = 0 SET @card = NULL IF @client = 0 SET @client = NULL IF @novalidated = 0 SET @novalidated = NULL IF @operator = 0 SET @operator = NULL IF @reglku = 0 SET @reglku = NULL
	IF @phone IS NULL BEGIN SET @errormessage = ''Не задан номер телефона'' RETURN(1) END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	IF @promocode IS NOT NULL
	BEGIN
		IF NOT EXISTS(SELECT client FROM clientoperator WHERE promocode = @promocode AND operator = @operator)
		BEGIN
			SET @errormessage = N''Введен неверный промокод. Повторите попытку снова!''
			RETURN(14)
		END
	END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT 
				@prefix = prefix, 
				@numlen = numlen, 
				@welcomebonus = welcomebonus, 
				@bonustofriend = bonustofriend, 
				@bonusforfriend = bonusforfriend, 
				@welcomebonuslku = welcomebonuslku, 
				@activationlink = activationlink 
			FROM 
				operator 
			WHERE 
				id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE 
			BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT 
					@operator = id, 
					@prefix = prefix, 
					@numlen = numlen, 
					@welcomebonus = welcomebonus, 
					@bonustofriend = bonustofriend, 
					@bonusforfriend = bonusforfriend, 
					@welcomebonuslku = welcomebonuslku, 
					@activationlink = activationlink 
				FROM 
					operator 
				WHERE 
					name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END 
	ELSE 
	BEGIN
		SELECT 
			@operator = id, 
			@prefix = prefix, 
			@numlen = numlen, 
			@welcomebonus = welcomebonus, 
			@bonustofriend = bonustofriend, 
			@bonusforfriend = bonusforfriend, 
			@welcomebonuslku = welcomebonuslku, 
			@activationlink = activationlink 
		FROM 
			operator 
		WHERE 
			id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @reglku IS NOT NULL SET @welcomebonus = @welcomebonuslku
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	IF @clientsetpassword = 1
	BEGIN
		EXEC ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
	END
	IF @email IS NOT NULL
	BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	IF @promocode IS NOT NULL
	BEGIN
		DECLARE @promobonusclient NUMERIC(9,2) = NULL
		SELECT @promobonusclient = promobonusclient FROM operator WHERE id = @operator
		EXEC @result = BonusAdd @card = @card, @bonus = @promobonusclient, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
		IF @result <> 0 SET @errormessage = @errormessage + '' (промокод)''
		UPDATE clientoperator SET promocodefriend = @promocode WHERE client = @client AND operator = @operator
	END
	RETURN (0)'

	--Изменено. При наличии промокода проставляется источник бонусов friend bonus
	IF OBJECT_ID('ChequeAdd') IS NOT NULL DROP PROCEDURE ChequeAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ChequeAdd
	@card BIGINT = NULL,
	@cardnumber NVARCHAR(18) = NULL,
	@chequetime DATETIME = NULL,
	@phone BIGINT = NULL,
	@operatorname NVARCHAR(20) = NULL,
	@partner SMALLINT = NULL,
	@partnername NVARCHAR(30) = NULL,
	@pos NVARCHAR(10) = NULL,
	@terminal NVARCHAR(10) = NULL,
	@amount NUMERIC(9,2) = NULL,
	@paidbybonus NUMERIC(9,2) = NULL,
	@number NVARCHAR(10) = NULL,
	@added NUMERIC(9,2) = NULL OUTPUT,
	@redeemed NUMERIC(9,2) = 0 OUTPUT,
	@maxredeem NUMERIC(9,2) = 0 OUTPUT,
	@fullbalance NUMERIC(9,2) = 0 OUTPUT,
	@balance NUMERIC(9,2) = 0 OUTPUT,
	@purchasesum NUMERIC(9,2) = 0 OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@chequeitems ChequeItems READONLY,
	@items NVARCHAR(1000) = NULL,
	@nowrite BIT = NULL,
	@cheque INT = NULL OUTPUT,
	@bonusid INT = NULL OUTPUT,
	@noadd BIT = NULL,
	@noredeem BIT = NULL,
	@refund BIT = NULL,
	@purchasenumber NVARCHAR(10) = NULL,
	@purchasetime DATETIME = NULL
	AS SET NOCOUNT ON
	DECLARE @result INT, 
			@operator SMALLINT = NULL, 
			@client INT, 
			@id INT = NULL, 
			@oldbalance NUMERIC(9,2) = NULL, 
			@text NVARCHAR(200) = NULL, 
			@posid INT = NULL, 
			@bonustime DATETIME = NULL, 
			@bonuscheque INT = NULL, 
			@bonusrefund BIT = NULL, 
			@checkredeem BIT = NULL, 
			@freecard BIT = NULL, 
			@status TINYINT = NULL, 
			@notsendsms BIT = NULL, 
			@idoc int = NULL, 
			@code NVARCHAR(10), 
			@price NUMERIC(9,2), 
			@quantity NUMERIC(9,2), 
			@iamount NUMERIC(9,2), 
			@ipaidbybonus NUMERIC(9,2), 
			@minprice NUMERIC(9,2), 
			@scard NVARCHAR(20), 
			@sphone NVARCHAR(10), 
			@schequetime NVARCHAR(20), 
			@spartner NVARCHAR(10), 
			@samount NVARCHAR(10), 
			@sprice NVARCHAR(10), 
			@squantity NVARCHAR(10), 
			@siamount NVARCHAR(10), 
			@sposition NVARCHAR(10), 
			@position TINYINT, 
			@norules BIT = NULL, 
			@now DATETIME = GETDATE(), 
			@itemstring NVARCHAR(100) = NULL, 
			@bonus NUMERIC(9,2) = NULL, 
			@itemscount INT = 0, 
			@operatormaxredeem NUMERIC(9,2) = NULL, 
			@partnermaxredeem NUMERIC(9,2) = NULL, 
			@maxredeempercent NUMERIC(9,2) = NULL, 
			@i INT = 0, 
			@imaxredeem NUMERIC(9,2) = NULL, 
			@redeem NUMERIC(9,2) = NULL, 
			@itemtable ChequeItems, 
			@inoadd BIT = NULL, 
			@inoredeem BIT = NULL, 
			@redeemedbefore NUMERIC(9,2) = NULL, 
			@itemid INT = NULL, 
			@chequeitemid INT = NULL, 
			@itemsum NUMERIC(9,2) = 0, 
			@lastchequetime DATETIME = NULL, 
			@purchasetimebegin DATETIME = NULL, 
			@purchasetimeend DATETIME = NULL, 
			@purchaseid INT = NULL, 
			@calcbalance NUMERIC(9,2) = NULL,
			@promocodeenable BIT = NULL,
			@promobonusfriend NUMERIC(9,2) = NULL,
			@promocodefriend NVARCHAR(20) = NULL,
			@madepurchase BIT = NULL
	IF @operatorname = '''' SET @operatorname = NULL 
	IF @partnername = '''' SET @partnername = NULL 
	IF @nowrite = 0 SET @nowrite = NULL 
	IF @added <= 0 SET @added = 0 
	IF @redeemed <= 0 SET @redeemed = NULL 
	IF @items = '''' SET @items = NULL 
	IF @paidbybonus <= 0 SET @paidbybonus = NULL 
	IF @noadd = 0 SET @noadd = NULL 
	IF @noredeem = 0 SET @noredeem = NULL 
	IF @bonusid <= 0 SET @bonusid = NULL 
	IF @refund = 0 SET @refund = NULL 
	IF @purchasenumber = '''' SET @purchasenumber = NULL
	IF @operatorname IS NOT NULL BEGIN
		SELECT @operator = id, @operatormaxredeem = maxredeem FROM operator WHERE name = @operatorname
		IF @operator IS NULL BEGIN SET @errormessage = ''Оператор не найден'' RETURN (21) END
	END
	IF @partnername IS NOT NULL BEGIN
		SELECT @partner = id, @operator = operator, @partnermaxredeem = maxredeem FROM partner WHERE name = @partnername
		IF @partner IS NULL BEGIN SET @errormessage = ''Партнер не найден'' RETURN (22) END
	END
	IF @cardnumber IS NOT NULL 
	BEGIN TRY
		SET @card = CONVERT(BIGINT, @cardnumber)
	END TRY 
	BEGIN CATCH 
		SET @errormessage = ''Номер карты должен быть числом'' 
		RETURN (23) 
	END CATCH
	IF @partner = 0 SET @partner = NULL IF @pos = '''' SET @pos = NULL IF @terminal = '''' SET @terminal = NULL IF @amount <= 0 SET @amount = NULL IF @card <= 0 SET @card = NULL IF @phone <= 0 SET @phone = NULL
	IF @partner IS NULL 
	BEGIN 
		SET @errormessage = ''Не задан идентификатор Партнера'' 
		RETURN(24) 
	END
	ELSE 
	BEGIN
		SELECT 
			@partner = p.id, 
			@operator = p.operator, 
			@partnermaxredeem = p.maxredeem, 
			@operatormaxredeem = o.maxredeem,
			@promocodeenable = o.promocode,
			@promobonusfriend = promobonusfriend
		FROM 
			partner AS p 
			LEFT JOIN operator AS o ON p.operator = o.id 
		WHERE 
			p.id = @partner
		IF @partner IS NULL 
		BEGIN 
			SET @errormessage = ''Партнер не найден'' RETURN (25) END
	END
	IF @chequetime IS NULL BEGIN SET @errormessage = ''Не заданы дата/время чека'' RETURN(26) END
	IF @pos IS NOT NULL 
	BEGIN
		SELECT 
			@posid = id 
		FROM 
			pos 
		WHERE 
			partner = @partner 
			AND code = @pos
		IF @posid IS NULL 
		BEGIN 
			SET @errormessage = ''Не найден код торговой точки'' 
			RETURN(27) 
		END
	END 
	ELSE IF @terminal IS NOT NULL BEGIN SET @errormessage = ''Для терминала должна быть задана торговая точка'' RETURN(28) END
	IF @amount IS NULL BEGIN SET @errormessage = ''Не задана сумма чека'' RETURN(29) END
	EXEC @result = Identify @phone = @phone, 
							@partner = @partner, 
							@card = @card OUTPUT, 
							@client = @client OUTPUT, 
							@status = @status OUTPUT, 
							@balance = @balance OUTPUT, 
							@errormessage = @errormessage OUTPUT, 
							@operator = @operator OUTPUT
	IF NOT @result = 0 RETURN (@result)
	IF @status = 1 BEGIN SET @errormessage = ''Начисление и списание бонусов невозможно по деактивированной карте'' RETURN (30) END
	IF @number IS NOT NULL BEGIN
		SET @id = NULL SET @lastchequetime = NULL
		IF @terminal IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND terminal = @terminal AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(HOUR, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE IF @pos IS NOT NULL BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND pos = @posid AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(MINUTE, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END ELSE BEGIN
			SELECT TOP 1 @id = id, @lastchequetime = chequetime FROM cheque WHERE partner = @partner AND number = @number AND card = @card ORDER BY chequetime DESC
			IF @id IS NOT NULL IF DATEDIFF(SECOND, @lastchequetime, @chequetime) > 5 SET @id = NULL
		END
		IF @id IS NOT NULL BEGIN
			SELECT @balance = balance FROM card WHERE number = @card
			IF @refund IS NOT NULL BEGIN
				SET @errormessage = ''Чек возврата уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND refund = 1
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND refund = 1
			END ELSE BEGIN
				SET @errormessage = ''Чек уже зарегистрирован''
				SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus > 0 AND (refund IS NULL OR refund = 0)
				SELECT @redeemed = SUM(bonus) FROM bonus WHERE cheque = @id AND bonus < 0 AND (refund IS NULL OR refund = 0)
			END
			RETURN(0)
		END
	END
	IF @nowrite IS NOT NULL OR @noredeem IS NULL SET @bonusid = NULL
	IF @bonusid IS NOT NULL SELECT @bonusid = id, @redeemedbefore = -bonus FROM bonus WHERE id = @bonusid
	IF @bonusid IS NOT NULL SET @redeemed = @redeemedbefore
	IF @items IS NOT NULL BEGIN
		SET @norules = 1
		DECLARE @itemlen TINYINT = 56, @itemleft NVARCHAR(1000) = NULL
		SET @itemleft = @items
		WHILE LEN(@itemleft) > 0 BEGIN
			SET @itemstring = LEFT(@itemleft, @itemlen)
			SET @itemleft = SUBSTRING(@itemleft, @itemlen + 1, LEN(@itemleft) - LEN(@itemstring))
			BEGIN TRY
				SET @position = CONVERT(TINYINT, SUBSTRING(@itemstring, 1, 2))
				SET @code = LTRIM(RTRIM(SUBSTRING(@itemstring, 3, 10)))
				SET @price = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 13, 9))
				SET @quantity = CONVERT(NUMERIC(6,2), SUBSTRING(@itemstring, 22, 6))
				SET @iamount = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 28, 9))
				SET @ipaidbybonus = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 37, 9))
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				SET @minprice = CONVERT(NUMERIC(9,2), SUBSTRING(@itemstring, 46, 9))
				SET @inoadd = CONVERT(BIT, SUBSTRING(@itemstring, 55, 1))
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				SET @inoredeem = CONVERT(BIT, SUBSTRING(@itemstring, 56, 1))
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				SET @itemsum = @itemsum + @iamount
			END TRY BEGIN CATCH SET @errormessage = ''Неверный формат данных в строке позиций чека'' RETURN (31) END CATCH
			SET @itemscount = @itemscount + 1
			INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@itemscount, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @noadd, @noredeem)
		END
	END ELSE BEGIN
		SET @itemscount = (SELECT COUNT(*) FROM @chequeitems)
		IF(@itemscount > 0) BEGIN
			SET @norules = 1
			SET @i = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT 
					@chequeitemid = id, 
					@position = position, 
					@code = code, 
					@price = price, 
					@quantity = quantity, 
					@iamount = amount, 
					@ipaidbybonus = paidbybonus, 
					@minprice = minprice, 
					@inoadd = noadd, 
					@inoredeem = noredeem, 
					@maxredeem = maxredeem 
				FROM 
					@chequeitems 
				WHERE 
					id = @i 
				ORDER BY 
					position
				IF @inoadd = 0 SET @inoadd = NULL IF @noadd IS NOT NULL SET @inoadd = 1
				IF @inoredeem = 0 SET @inoredeem = NULL IF @noredeem IS NOT NULL SET @inoredeem = 1
				IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = 0
				INSERT INTO @itemtable (id, position, code, price, quantity, amount, paidbybonus, minprice, noadd, noredeem) VALUES (@i, @position, @code, @price, @quantity, @iamount, @ipaidbybonus, @minprice, @inoadd, @inoredeem)
				SET @itemsum = @itemsum + @iamount
			END
		END
	END
	IF @norules IS NOT NULL	IF @amount != @itemsum BEGIN SET @errormessage = N''Сумма чека не совпадает с суммой позиций чека'' RETURN(32) END
	IF @operatorname IS NOT NULL SELECT @fullbalance = fullbalance, @purchasesum = purchasesum FROM card WHERE number = @card
	IF @refund IS NOT NULL AND @purchasenumber IS NOT NULL BEGIN
		IF @purchasetime IS NULL BEGIN SET @errormessage = ''Не задана дата покупки'' RETURN(33) END
		SET @purchasetimebegin = CONVERT(DATETIME, CONVERT(DATE, @purchasetime))
		SET @purchasetimeend = DATEADD(DAY, 1, @purchasetimebegin)
		IF @posid IS NOT NULL
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE pos = @posid AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		ELSE
			SELECT @purchaseid = id, @amount = -amount, @paidbybonus = -paidbybonus FROM cheque WHERE partner = @partner AND number = @purchasenumber AND chequetime > @purchasetimebegin AND chequetime < @purchasetimeend AND card = @card AND (cancelled IS NULL OR cancelled = 0) AND (refund = 0 OR refund IS NULL)
		IF @purchaseid IS NULL BEGIN SET @errormessage = ''Чек покупки не найден'' RETURN(21) END
		IF EXISTS (SELECT id FROM cheque WHERE cheque = @purchaseid and refund = 1) BEGIN SET @errormessage = N''Чек возврата уже зарегистрирован'' RETURN(0) END
		IF @itemscount = 0 BEGIN
			SELECT @added = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus > 0
			SELECT @redeemed = -SUM(bonus) FROM bonus WHERE cheque = @purchaseid AND bonus < 0
			INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, cheque, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, @purchaseid, 1)
			SET @cheque = SCOPE_IDENTITY()
			IF @added < 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @added, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			IF @redeemed > 0
				EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @redeemed, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
			RETURN(0)
		END
	END
	IF @noredeem IS NULL AND @refund IS NULL AND @status = 0 BEGIN
		SET @maxredeempercent = 100
		IF @operatormaxredeem IS NOT NULL SET @maxredeempercent = @operatormaxredeem
		IF @partnermaxredeem IS NOT NULL SET @maxredeempercent = @partnermaxredeem
		IF @maxredeempercent < 0 OR @maxredeempercent > 100 SET @maxredeempercent = 100
		IF @maxredeempercent = 100 SET @maxredeem = @amount
		IF @maxredeem < 0 SET @maxredeem = 0
		ELSE IF @maxredeempercent > 0 AND @maxredeempercent < 100 SET @maxredeem = ROUND(@amount * @maxredeempercent / 100, 2)
		IF @itemscount > 0 BEGIN
			SET @i = 0 SET @maxredeem = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1
				SELECT @price = price, @minprice = minprice, @quantity = quantity, @iamount = amount, @inoredeem = noredeem, @code = code FROM @itemtable WHERE id = @i
				IF @inoredeem = 0 SET @inoredeem = NULL
				IF @inoredeem IS NULL
					IF EXISTS (SELECT * FROM listitem i LEFT JOIN itemlist l ON i.itemlist = l.id WHERE l.partner = @partner AND l.pos = @posid AND l.noredeem = 1 AND i.code = @code) BEGIN
						SET @inoredeem = 1
						UPDATE @itemtable SET noredeem = 1 WHERE id = @i
					END
				IF @inoredeem IS NULL BEGIN
					SET @imaxredeem = 0
					IF @iamount * @maxredeempercent / 100 < @iamount - @minprice * @quantity SET @imaxredeem = ROUND(@iamount * @maxredeempercent / 100, 2)
					ELSE SET @imaxredeem = ROUND(@iamount - @minprice * @quantity, 2)
					IF @imaxredeem = @iamount SET @imaxredeem = @iamount - 0.01
					UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
					SET @maxredeem = @maxredeem + @imaxredeem
				END
			END
			DECLARE @relation REAL, @ilast INT = 0, @imaxredeemlast NUMERIC(9,2) = NULL, @iredeemed NUMERIC(9,2) = NULL, @iredeemedlast NUMERIC(9,2) = NULL
			SET @calcbalance = @balance
			IF @calcbalance > @amount - 1 SET @calcbalance = @amount - 1
			IF @calcbalance < @maxredeem BEGIN
				SET @relation = @calcbalance / @maxredeem SET @i = 0 SET @maxredeem = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @imaxredeem = maxredeem, @inoredeem = noredeem FROM @itemtable WHERE id = @i
					IF @inoredeem = 0 SET @inoredeem = NULL
					IF @inoredeem IS NULL BEGIN
						SET @imaxredeem = ROUND(@imaxredeem * @relation, 2)
						UPDATE @itemtable SET maxredeem = @imaxredeem WHERE id = @i
						SET @maxredeem = @maxredeem + @imaxredeem
						SET @ilast = @i SET @imaxredeemlast = @imaxredeem
					END
				END
				IF NOT @maxredeem = @calcbalance BEGIN
					UPDATE @itemtable SET maxredeem = @imaxredeemlast + @calcbalance - @maxredeem WHERE id = @ilast
					SET @maxredeem = @calcbalance
				END
			END
			IF @redeemed IS NOT NULL BEGIN
				IF @redeemed = @maxredeem BEGIN
					SET @i = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						UPDATE @itemtable SET redeemed = maxredeem WHERE id = @i
					END
				END ELSE IF @redeemed < @maxredeem BEGIN
					SET @relation = @redeemed / @maxredeem SET @i = 0 SET @redeem = 0
					WHILE @i < @itemscount BEGIN
						SET @i = @i + 1
						SELECT @imaxredeem = maxredeem, @inoredeem = noredeem, @ipaidbybonus = paidbybonus FROM @itemtable WHERE id = @i
						IF @inoredeem = 0 SET @inoredeem = NULL
						IF @inoredeem IS NULL BEGIN
							SET @iredeemed = ROUND(@imaxredeem * @relation, 2)
							IF @redeemedbefore IS NOT NULL SET @ipaidbybonus = @iredeemed
							UPDATE @itemtable SET redeemed = @iredeemed, paidbybonus = @ipaidbybonus WHERE id = @i
							SET @redeem = @redeem + @iredeemed
							SET @ilast = @i SET @iredeemedlast = @iredeemed
						END
					END
					IF NOT @redeem = @redeemed BEGIN
						UPDATE @itemtable SET redeemed = @iredeemedlast + @redeemed - @redeem WHERE id = @ilast
						IF @redeemedbefore IS NOT NULL UPDATE @itemtable SET paidbybonus = redeemed WHERE id = @ilast
						SET @redeem = @redeemed
					END
				END ELSE SET @redeemed = 0
			END
			IF @nowrite IS NOT NULL BEGIN
				SET @i = 0 SET @added = 0
				WHILE @i < @itemscount BEGIN
					SET @i = @i + 1
					SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @ipaidbybonus = @iredeemed, @inoadd = noadd FROM @itemtable WHERE id = @i
					IF @inoadd = 0 SET @inoadd = NULL
					IF @inoadd IS NULL BEGIN
						SET @bonus = 0
						EXEC @result = _BonusCheque @card = @card, 
													@partner = @partner, 
													@code = @code, 
													@amount = @iamount, 
													@paidbybonus = @iredeemed, 
													@chequetime = @chequetime, 
													@pos = @posid, 
													@cheque = @cheque, 
													@bonus = @bonus OUTPUT, 
													@nowrite = 1, 
													@errormessage = @errormessage OUTPUT
						UPDATE @itemtable SET added = @bonus WHERE id = @i
						SET @added = @added + @bonus
						SET @balance = @balance + @bonus
					END
				END
			END
		END ELSE
			IF @balance < @maxredeem SET @maxredeem = @balance
		IF @nowrite IS NOT NULL BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			RETURN (0)
		END
	END
	IF @redeemed IS NOT NULL AND @noredeem IS NULL AND @status = 0 BEGIN
		IF @redeemed > @maxredeem BEGIN
			SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
			SET @errormessage = ''Превышена возможная сумма списания бонусов'' RETURN(34)
		END
		EXEC @result = Redeem @partner = @partner, @card = @card, @bonus = @paidbybonus, @redeemed = @redeemed OUTPUT, @balance = @balance OUTPUT, @errormessage = @errormessage OUTPUT, @bonusid = @bonusid OUTPUT
		IF NOT @result = 0 RETURN (@result)
		SET @redeemed = - @redeemed
	END
	IF @noadd IS NULL OR @refund IS NOT NULL AND NOT @status = 1 BEGIN
		IF @refund IS NOT NULL INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, refund, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, GETDATE(), @paidbybonus, 1, @number, @terminal, 1)
		ELSE INSERT INTO cheque (card, chequetime, partner, pos, amount, proctime, paidbybonus, number, terminal, norules) VALUES (@card, @chequetime, @partner, @posid, @amount, @now, @redeemed, @number, @terminal, @norules)
		SET @cheque = SCOPE_IDENTITY()
		IF @norules IS NULL	SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE cheque = @cheque
		IF(@itemscount > 0) BEGIN
			SET @i = 0 SET @added = 0
			WHILE @i < @itemscount BEGIN
				SET @i = @i + 1					
				SELECT @position = position, @code = code, @price = price, @quantity = quantity, @iamount = amount, @iredeemed = redeemed, @ipaidbybonus = paidbybonus, @inoadd = noadd FROM @itemtable WHERE id = @i
				IF @inoadd = 0 SET @inoadd = NULL
				IF @refund IS NOT NULL BEGIN
					IF @ipaidbybonus = 0 SELECT @ipaidbybonus = paidbybonus/quantity*@quantity FROM item WHERE cheque = @purchaseid AND code = @code AND price = @price
					EXECUTE BonusAdd @card = @card, @phone = @phone, @bonus = @ipaidbybonus, @operator = @operator, @cheque = @cheque, @refund = 1, @errormessage = @errormessage OUTPUT, @source = 1
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, -@price, @quantity, -@iamount, -@ipaidbybonus, @inoadd)
				END	ELSE
					INSERT INTO item(cheque, position, code, price, quantity, amount, paidbybonus, norules)	VALUES(@cheque, @position, @code, @price, @quantity, @iamount, @iredeemed, @inoadd)
				SET @itemid = SCOPE_IDENTITY()
				SELECT @bonus = COALESCE(SUM(bonus), 0) FROM bonus WHERE item = @itemid
				UPDATE @itemtable SET added = @bonus WHERE id = @i
				SET @added = @added + @bonus
			END
		END
		IF @bonusid IS NOT NULL BEGIN
			SELECT TOP 1 @bonusid = id, @bonustime = proctime, @bonuscheque = cheque, @redeemed = bonus, @bonusrefund = refund FROM bonus WHERE card = @card AND partner = @partner AND bonus < 0 AND (refund IS NULL OR refund = 0) AND cheque IS NULL ORDER BY proctime DESC
			IF @bonusid IS NOT NULL IF NOT (@bonuscheque IS NULL AND @redeemed < 0 AND (@bonusrefund = 0 OR @bonusrefund IS NULL) AND DATEDIFF(minute, @bonustime, @now) <= 10) SET @bonusid = NULL
		END
		IF @bonusid IS NOT NULL UPDATE bonus SET cheque = @cheque WHERE id = @bonusid
	END	
	IF @promocodeenable = 1
	BEGIN
		SELECT
			@promocodefriend = promocodefriend,
			@madepurchase = madepurchase
		FROM
			clientoperator
		WHERE
			client = @client
			AND operator = @operator

		IF @madepurchase = 0 OR @madepurchase IS NULL
		BEGIN
			DECLARE @friendcard BIGINT = NULL, 
					@friendphone BIGINT = NULL
			UPDATE clientoperator SET madepurchase = 1 WHERE client = @client AND operator = @operator
			SELECT
				@friendcard = cd.number,
				@friendphone = cr.phone
			FROM
				card AS cd
				INNER JOIN clientoperator AS cr ON cd.client = cr.client AND cd.operator = cr.operator
			WHERE
				cr.promocode = @promocodefriend
				AND cr.operator = @operator

			EXEC @result = BonusAdd @card = @friendcard, @phone = @friendphone, @bonus = @promobonusfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
			IF NOT @result = 0 RETURN (@result)
			EXEC @result = ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @promobonusfriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 RETURN (@result)
		END
	END
	SELECT position, code, price, quantity, amount, maxredeem, redeemed, added FROM @itemtable
	SELECT @partnername = name FROM partner WHERE id = @partner
	SET @phone = NULL
	SELECT @phone = phone FROM client WHERE id = @client
	SELECT @notsendsms = nochequesms FROM operator WHERE id = @operator
	IF (@added IS NULL OR @added = 0) SELECT @added = SUM(bonus) FROM bonus WHERE cheque = @cheque AND bonus > 0
	IF @phone IS NOT NULL AND (@notsendsms = 0 OR @notsendsms IS NULL)
	BEGIN
		SELECT @balance = balance FROM card WHERE number = @card
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @balance = @balance, @added = @added, @redeemed = @redeemed, @amount = @amount, @errormessage = @errormessage OUTPUT
	END
	RETURN(0)'

	--Добавлено. Идентификатор партнёра по умолчанию
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'defaultpartner' AND id = (SELECT id FROM sysobjects WHERE name = 'manager'))
		ALTER TABLE manager ADD defaultpartner SMALLINT

	--Добавлено. Идентификатор ТТ по умолчанию
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'defaultpos' AND id = (SELECT id FROM sysobjects WHERE name = 'manager'))
		ALTER TABLE manager ADD defaultpos SMALLINT

	--Добавлено. Код ТТ по умолчанию
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'defaultposcode' AND id = (SELECT id FROM sysobjects WHERE name = 'manager'))
		ALTER TABLE manager ADD defaultposcode NVARCHAR(10)

	--Изменено. Добавлены идентификаторы партнёра и ТТ по умолчанию. Код ТТ по умолчанию.
	IF OBJECT_ID('ManagerLogin') IS NOT NULL DROP PROCEDURE ManagerLogin
	EXEC sp_executesql @statement = N'CREATE PROCEDURE ManagerLogin
			@login NVARCHAR(20) = NULL, 
			@password NVARCHAR(20) = NULL,
			@operator SMALLINT = NULL OUTPUT,
			@partner SMALLINT = NULL OUTPUT,
			@pos SMALLINT = NULL OUTPUT,
			@posCode NVARCHAR(10) = NULL OUTPUT,
			@rolename NVARCHAR(50) = NULL OUTPUT,
			@permissioncode NVARCHAR(20) = NULL OUTPUT,
			@defaultpartner SMALLINT = NULL OUTPUT,
			@defaultpos SMALLINT = NULL OUTPUT,
			@defaultposcode NVARCHAR(10) = NULL OUTPUT,
			@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		DECLARE @role SMALLINT = NULL
		SELECT
			@operator = mr.operator,
			@partner = mr.partner,
			@posCode = (SELECT code FROM pos WHERE id = mr.pos),
			@pos = mr.pos,
			@rolename = re.name,
			@permissioncode = pn.code,
			@role = re.id,
			@defaultpartner = mr.defaultpartner,
			@defaultpos = mr.defaultpos,
			@defaultposcode = (SELECT code FROM pos WHERE id = mr.defaultpos)
		FROM
			Users AS us
			INNER JOIN manager AS mr ON us.id = mr.users
			INNER JOIN usersrole AS ce ON ce.users = us.id
			INNER JOIN role AS re ON ce.role = re.id
			INNER JOIN rolepermission AS rn ON re.id = rn.role
			INNER JOIN permission AS pn ON rn.permission = pn.id
		WHERE
			us.login = @login
			AND us.password = @password

		IF @@ROWCOUNT <> 1 
		BEGIN
			SET @operator = NULL
			SET	@partner = NULL
			SET @pos = NULL
			SET	@posCode = NULL
			SET	@rolename = NULL
			SET	@permissioncode = NULL
			SET	@defaultpartner = NULL
			SET	@defaultpos = NULL
			SET	@posCode = NULL
			SET @errormessage = N''Не найдены данные для учётной записи''
		
			RETURN(2)
		END

		SELECT
			rn.name
		FROM
			roleroledescription AS rrn
			INNER JOIN roledescription AS rn ON rrn.roledescription = rn.id
		WHERE
			rrn.role = @role
		RETURN(0)
	END'

END ELSE IF @version = 393 BEGIN
	SELECT '3.94 20180429 Смирнов'

	--Изменено. Добавлена роль TerminalSmsRedeem для проведения чека покупки с смс
	IF OBJECT_ID('Initiate') IS NOT NULL DROP PROCEDURE Initiate
	EXEC sp_executesql @statement = N'create procedure Initiate
	AS SET NOCOUNT ON
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailpassword'') INSERT INTO parameter (name, value) VALUES (''emailpassword'', ''no-reply0910'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailaddress'') INSERT INTO parameter (name, value) VALUES (''emailaddress'', ''no-reply@loycon.ru'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailprovider'') INSERT INTO parameter (name, value) VALUES (''emailprovider'', ''yandex'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''emailsender'') INSERT INTO parameter (name, value) VALUES (''emailsender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge1'') INSERT INTO parameter (name, value) VALUES (''smscharge1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge2'') INSERT INTO parameter (name, value) VALUES (''smscharge2'', N''р.Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smscharge3'') INSERT INTO parameter (name, value) VALUES (''smscharge3'', N''б. '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smspassword'') INSERT INTO parameter (name, value) VALUES (''smspassword'', ''Yu2910aTew'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem1'') INSERT INTO parameter (name, value) VALUES (''smsredeem1'', N''Покупка - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem2'') INSERT INTO parameter (name, value) VALUES (''smsredeem2'', N''Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem3'') INSERT INTO parameter (name, value) VALUES (''smsredeem3'', N'' б.
Баланс - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsredeem4'') INSERT INTO parameter (name, value) VALUES (''smsredeem4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund1'') INSERT INTO parameter (name, value) VALUES (''smsrefund1'', N''Возврат - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund2'') INSERT INTO parameter (name, value) VALUES (''smsrefund2'', N'' р.
Начислено - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund3'') INSERT INTO parameter (name, value) VALUES (''smsrefund3'', N'' б.
Списано - '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsrefund4'') INSERT INTO parameter (name, value) VALUES (''smsrefund4'', N'' б.
'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsregcode'') INSERT INTO parameter (name, value) VALUES (''smsregcode'', ''Для завершения регистрации в программе введите код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssendcode'') INSERT INTO parameter (name, value) VALUES (''smssendcode'', ''Ваш временный код '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smssender'') INSERT INTO parameter (name, value) VALUES (''smssender'', ''LOYCON'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsusername'') INSERT INTO parameter (name, value) VALUES (''smsusername'', ''mredcard'')
	IF EXISTS(SELECT value FROM version) UPDATE version SET value = 394 ELSE INSERT INTO version (value) VALUES (394)
	IF NOT EXISTS(SELECT id FROM clientstatus WHERE id = 0) INSERT INTO clientstatus (id, name) VALUES (0, ''Активен'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 0) INSERT INTO cardstatus (id, name) VALUES (0, ''Активна'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 1) INSERT INTO cardstatus (id, name) VALUES (1, ''Блокирована'')
	IF NOT EXISTS(SELECT id FROM cardstatus WHERE id = 2) INSERT INTO cardstatus (id, name) VALUES (2, ''Ограничена'')
	DECLARE @operator SMALLINT = NULL, @partner SMALLINT = NULL, @region TINYINT = NULL, @city SMALLINT = NULL
	SELECT @operator = id FROM operator WHERE name = ''Оператор''
	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO operator (name) VALUES (''Оператор'')
		SET @operator = SCOPE_IDENTITY()
	END
	SELECT @partner = id FROM partner WHERE operator = @operator AND name = ''Партнер''
	IF @partner IS NULL BEGIN
		INSERT INTO partner (name, operator) VALUES(''Партнер'', @operator)
		SET @partner = SCOPE_IDENTITY()
	END
	SELECT @region = id FROM region WHERE name = ''Москва''
	IF @region IS NULL BEGIN
		INSERT INTO region (name) VALUES(''Москва'')
		SET @region = SCOPE_IDENTITY()
	END
	SELECT @city = id FROM city WHERE region = @region AND name = ''Москва''
	IF @city IS NULL BEGIN
		INSERT INTO city (name, region) VALUES(''Москва'', @region)
		SET @city = SCOPE_IDENTITY()
	END
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 1) INSERT INTO messagestatus (code, name) VALUES (1, ''Отправлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 2) INSERT INTO messagestatus (code, name) VALUES (2, ''Доставлено'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 3) INSERT INTO messagestatus (code, name) VALUES (3, ''Спам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 4) INSERT INTO messagestatus (code, name) VALUES (4, ''Отписка'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 5) INSERT INTO messagestatus (code, name) VALUES (5, ''Был переход по ссылкам'')
	IF NOT EXISTS(SELECT code FROM messagestatus WHERE code = 6) INSERT INTO messagestatus (code, name) VALUES (6, ''Устройство пользователя'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent1'') INSERT INTO parameter (name, value) VALUES(''smsagent1'', N''С Вашего счета списано '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent2'') INSERT INTO parameter (name, value) VALUES(''smsagent2'', N''На Ваш счет начислено '')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smsagent3'') INSERT INTO parameter (name, value) VALUES(''smsagent3'', N'' бонусов! Подробности: '')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadAll'') INSERT INTO permission (code, name) VALUES(''ReadAll'', ''Read all'')
	IF NOT EXISTS(SELECT id FROM permission WHERE code = N''ReadWriteAll'') INSERT INTO permission (code, name) VALUES(''ReadWriteAll'', ''Read and write all'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Reader'') INSERT INTO role (name) VALUES(''Reader'')
	IF NOT EXISTS(SELECT id FROM role WHERE name = N''Writer'') INSERT INTO role (name) VALUES(''Writer'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Analytics'') INSERT INTO roledescription (name) VALUES (N''Analytics'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsClient'') INSERT INTO roledescription (name) VALUES (N''AnalyticsClient'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsShop'') INSERT INTO roledescription (name) VALUES (N''AnalyticsShop'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''AnalyticsGood'') INSERT INTO roledescription (name) VALUES (N''AnalyticsGood'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Sales'') INSERT INTO roledescription (name) VALUES (N''Sales'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Terminal'') INSERT INTO roledescription (name) VALUES (N''Terminal'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Clients'') INSERT INTO roledescription (name) VALUES (N''Clients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsAllClients'') INSERT INTO roledescription (name) VALUES (N''ClientsAllClients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsCreateClients'') INSERT INTO roledescription (name) VALUES (N''ClientsCreateClients'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsCreateClientList'') INSERT INTO roledescription (name) VALUES (N''ClientsCreateClientList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ClientsMyClientList'') INSERT INTO roledescription (name) VALUES (N''ClientsMyClientList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Campaign'') INSERT INTO roledescription (name) VALUES (N''Campaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignMyCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignMyCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignCreateCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignCreateCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''CampaignTemplateCampaign'') INSERT INTO roledescription (name) VALUES (N''CampaignTemplateCampaign'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Mailing'') INSERT INTO roledescription (name) VALUES (N''Mailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingMyMailing'') INSERT INTO roledescription (name) VALUES (N''MailingMyMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingCreateMailing'') INSERT INTO roledescription (name) VALUES (N''MailingCreateMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''MailingTemplateMailing'') INSERT INTO roledescription (name) VALUES (N''MailingTemplateMailing'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Shops'') INSERT INTO roledescription (name) VALUES (N''Shops'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsMyShops'') INSERT INTO roledescription (name) VALUES (N''ShopsMyShops'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsCreateShopList'') INSERT INTO roledescription (name) VALUES (N''ShopsCreateShopList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ShopsМyShopList'') INSERT INTO roledescription (name) VALUES (N''ShopsМyShopList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Goods'') INSERT INTO roledescription (name) VALUES (N''Goods'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsMyGoods'') INSERT INTO roledescription (name) VALUES (N''GoodsMyGoods'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsCreateGoodsList'') INSERT INTO roledescription (name) VALUES (N''GoodsCreateGoodsList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''GoodsMyGoodsList'') INSERT INTO roledescription (name) VALUES (N''GoodsMyGoodsList'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Total'') INSERT INTO roledescription (name) VALUES (N''Total'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Faq'') INSERT INTO roledescription (name) VALUES (N''Faq'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''FaqManual'') INSERT INTO roledescription (name) VALUES (N''FaqManual'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''Profile'') INSERT INTO roledescription (name) VALUES (N''Profile'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''OperatorBonusAdd'') INSERT INTO roledescription (name) VALUES (N''OperatorBonusAdd'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''OperatorBonusRedeem'') INSERT INTO roledescription (name) VALUES (N''OperatorBonusRedeem'')
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''ActivateCard'') INSERT INTO roledescription (name) VALUES (N''ActivateCard'')
	IF NOT EXISTS(SELECT name FROM parameter WHERE name = ''smspatternpassword'') INSERT INTO parameter (name, value, operator) VALUES(''smspatternpassword'', N''Вы успешно зарегистрированы. Пароль в личный кабинет {0}'', NULL)
	IF NOT EXISTS(SELECT id FROM roledescription WHERE name = N''TerminalSmsRedeem'') INSERT INTO roledescription (name) VALUES (N''TerminalSmsRedeem'')
	RETURN(0)'

	EXEC Initiate

END ELSE IF @version = 394 BEGIN
	SELECT '3.95 20180503 Юсупов'

	--Изменено. В процедуре CalcAnalytics расширены поля с типом NUMERIC(9,2) до NUMERIC(19,2)
	IF OBJECT_ID('CalcAnalytics') IS NOT NULL DROP PROCEDURE CalcAnalytics
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[CalcAnalytics]
		@calcDay DATE = NULL,
		@beginDate DATE = NULL,
		@endDate DATE = NULL,
	
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
		DECLARE 
			@day DATE = NULL,
			@operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,

			/*Структура клиентской базы*/
			@menCnt INT = 0,
			@womenCnt INT = 0,
			@unknownGenderCnt INT = 0,
			@clientsWithBuysCnt INT = 0,
			@clientsWithoutBuysCnt INT = 0,
			@clientsWithTenBuysCnt INT = 0,
			@clientsWithOneBuysCnt INT = 0,
			@clientsWithPhoneCnt INT = 0,
			@clientsWithEmailCnt INT = 0,
			/*END Структура клиентской базы*/

			/*Активность клиентской базы*/
			@womenBuys NUMERIC(19,2) = 0,
			@menBuys NUMERIC(19,2) = 0,
			@unknownGenderBuys NUMERIC(19,2) = 0,
			@repeatedBuys NUMERIC(19,2) = 0,
			@buysOnClient NUMERIC(19,2) = 0,
			@clientsQty INT = 0,
			@clientActiveQty INT = 0,
			@gain NUMERIC(19,2) = 0,
			@gainBuys NUMERIC(19,2),
			@gainRefund NUMERIC(19,2),
			@avgCheque NUMERIC(19,2) = 0,
			@buysWeekdays INT = 0,
			@buysWeekOff INT = 0,
			@buyWeekdaySum NUMERIC(19,2), @buyWeekOffAmount NUMERIC(19,2), @chequeSum NUMERIC(19,2),  @buyWeekdayQty NUMERIC(19,2), @buyWeekoffQty NUMERIC(19,2), @buyQty NUMERIC(19,2),
			/*END Активность клиентской базы*/

			/*Сегментация по возрасту*/
			@clients INT = 0,
			@less25 INT = 0,
			@more25less35 INT = 0,
			@more35less45 INT = 0,
			@more45 INT = 0,
			@unknown INT = 0,
			@withBirthDate INT = 0,
			@withoutBirthDate INT = 0,
			/*END Сегментация по возрасту*/

			/*БОНУСЫ*/
			@addedBonus NUMERIC(19,2) = 0,
			@avgCharge NUMERIC(19,2) = 0,
			@redeemedBonus NUMERIC(19,2) = 0,
			@avgRedeem NUMERIC(19,2) = 0,
			@avgBalance NUMERIC(19,2) = 0,
			@avgDiscount NUMERIC(19,2) = 0,
			@addedBonusQty INT = 0, 
			@redeemedBonusQty INT = 0
			/*END БОНУСЫ*/
		BEGIN
			set @day = CONVERT (date, GETDATE());
			IF (@calcDay IS NOT NULL) set @day=CONVERT(date, @calcDay);
			if (@beginDate IS NULL) set @beginDate = @day
			if (@endDate IS NULL) set @endDate = DATEADD(dd,1,@day)

			--DELETE FROM reganalytics where [date] = @day
		
			BEGIN TRY /*Расчет итогов по оператору*/
				DECLARE Operator_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id FROM operator

				OPEN Operator_Cursor
				FETCH NEXT FROM Operator_Cursor INTO @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator WHERE gender = 1 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator and regdate>=@beginDate and regdate<@endDate) t3

						-- клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate

						-- клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							(ce.id IS NULL
							OR (
								(ce.refund = 0 OR ce.refund IS NULL) 
								AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1

						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						SELECT @clientsWithEmailCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND email IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
					END /*Окончание блока "Структура клиентской базы*/
				
					BEGIN /* Начало блока "Активность клиентской базы" */

						--Покупок на женщин,мужчин и без пола
						SELECT
							@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
							@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
							@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN card AS cd ON ce.card = cd.number
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SELECT
							@clientsQty = COUNT(DISTINCT cr.client)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON cd.number = ce.card
						WHERE
							cr.operator = @operator				
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END
						---

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON cd.number = ce.card
							WHERE 
								cr.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							partner IN (SELECT id FROM partner WHERE operator = @operator)
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner IN (SELECT id FROM partner WHERE operator = @operator)
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (cancelled IS NULL OR cancelled = 0) 
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator) 
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
					END /*Окончание блока "Активность клиентской базы"*/	
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND regdate>=@beginDate AND regdate<@endDate);
					
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND regdate>=@beginDate AND regdate<@endDate);

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/		

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus 
						WHERE 
							operator = @operator 
							AND bonus > 0 
							AND (refund = 0 OR refund IS NULL)
							AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
							AND proctime>=@beginDate and proctime<@endDate;


						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus 
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND (cheque IS NOT NULL OR source = 1) 
							AND (refund = 0 OR refund IS NULL)
							AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
							AND proctime>=@beginDate and proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (SELECT 
													COUNT(id) 
												FROM 
													bonus 
												WHERE 
													operator = @operator 
													AND bonus > 0 
													AND (refund = 0 OR refund IS NULL)
													AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
													AND proctime>=@beginDate AND proctime<@endDate
												);
					
						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(id) 
											FROM 
												bonus 
											WHERE 
												operator = @operator 
												AND bonus < 0 
												AND (cheque IS NOT NULL OR source = 1) 
												AND (refund = 0 OR refund IS NULL)
												AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND proctime>=@beginDate AND proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator AND cr.regdate>=@beginDate AND cr.regdate<@endDate)/@clients
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END


					END /*Окончание блока "БОНУСЫ*/


					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men, women,unknown, with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)      
						VALUES(
							@calcDay, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt, @clientsWithoutBuysCnt, @clientsWithTenBuysCnt, @clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt,
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Operator_Cursor INTO @operator
				END
				CLOSE Operator_Cursor
				DEALLOCATE Operator_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору''
				RETURN (1)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/

			BEGIN TRY /*Расчет итогов по оператору и партнеру*/
				DECLARE Partner_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id, operator FROM partner

				OPEN Partner_Cursor
				FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t3
			
						--клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							(ce.id IS NULL
							OR (
								(ce.refund = 0 OR ce.refund IS NULL) 
								AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1
				
						--клиенты с 1 покупкой	
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						SELECT @clientsWithEmailCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND email IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
				
					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						SELECT
							@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
							@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
							@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN card AS cd ON ce.card = cd.number
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND ce.id NOT IN (SELECT cheque FROM cheque INNER JOIN pos ON cheque.pos = pos.id where refund = 1 AND pos.partner = @partner)
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SELECT
							@clientsQty = COUNT(DISTINCT cr.client)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON cd.number = ce.card
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr 
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE 
								cr.operator = @operator 
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупка в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner 
						--	AND (refund IS NULL OR refund = 0) 
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END

					END /*Окончание блока "Активность клиентской базы"*/
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							AND bs.bonus > 0 
							AND ce.partner = @partner
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND bs.bonus > 0 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
											WHERE 
												bs.operator = @operator 
												AND ce.partner = @partner
												AND bs.bonus < 0 
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--					SELECT 
						--						SUM(cd.fullbalance) 
						--					FROM 
						--						clientoperator AS cr 
						--						INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--					WHERE 
						--						cr.operator = @operator 
						--						AND cr.regdate>=@beginDate AND cr.regdate<@beginDate
						--				)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/
					
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)        
						VALUES(
							@day, @operator, @partner,
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)       
						VALUES(
							@calcDay, @operator, @partner, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				END
				CLOSE Partner_Cursor
				DEALLOCATE Partner_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору и партнеру''
				RETURN (2)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/


			BEGIN TRY /*Расчет итогов по оператору, партнеру и торговой точке*/
				DECLARE Pos_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT  pos.id, pos.partner, p.operator from pos pos join partner p on p.id=pos.partner
				
				OPEN Pos_Cursor
				FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/
					
						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t3

						--клиенты с покупками
						SELECT
							@clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND cr.pos = @pos
							AND ce.pos = @pos
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--клиенты без покупок
						SELECT
							@clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							(ce.id IS NULL
							OR (
								(ce.refund = 0 OR ce.refund IS NULL) 
								AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.pos = @pos
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND ce.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1

						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND ce.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						SELECT @clientsWithEmailCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND email IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						SELECT
							@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
							@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
							@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND ce.pos = @pos
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN card AS cd ON ce.card = cd.number
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce.pos = @pos
								AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.id NOT IN (SELECT id FROM cheques WHERE rownum = 1)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce.pos = @pos
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SELECT
							@clientsQty = COUNT(DISTINCT cr.client)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON cd.number = ce.card
						WHERE
							cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND ce.pos = @pos
							AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr 
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
							WHERE 
								cr.operator = @operator 
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								AND ce.pos = @pos
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner = @partner
							AND pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в выходные и будни
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
						----


					END /*Окончание блока "Активность клиентской базы"*/

					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);			

						-- С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						-- БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos = @pos
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/
					
					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							AND bs.bonus > 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND ce.pos = @pos
											AND bs.bonus > 0 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
											WHERE 
												bs.operator = @operator 
												AND bs.bonus < 0 
												AND ce.pos = @pos
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--						SELECT 
						--							SUM(cd.fullbalance) 
						--						FROM 
						--							clientoperator AS cr 
						--							INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--						WHERE 
						--							cr.operator = @operator
						--							AND cr.pos = @pos
						--							AND cr.regdate>=@beginDate AND cr.regdate<@endDate
						--					)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/	
								
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos, 
							men, women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)         
						VALUES(
							@calcDay, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator 
				END
				CLOSE Pos_Cursor
				DEALLOCATE Pos_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору, партнеру и торговой точке''
				RETURN (3)
			END CATCH
		END'

	--Изменено. В процедуре GetAnalyticClientBonuses расширены поля с типом NUMERIC(9,2) до NUMERIC(19,2)
	IF OBJECT_ID('GetAnalyticClientBonuses') IS NOT NULL DROP PROCEDURE GetAnalyticClientBonuses
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAnalyticClientBonuses]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,

	@addedBonus NUMERIC(19,2) = NULL OUTPUT,
	@addedBonusCount INT = NULL OUTPUT,
	@avgCharge NUMERIC(19,2) = NULL OUTPUT,
	@redeemedBonus NUMERIC(19,2) = NULL OUTPUT,
	@redeemedBonusCount INT = NULL OUTPUT,
	@avgRedeem NUMERIC(19,2) = NULL OUTPUT,
	@avgBalance NUMERIC(19,2) = NULL OUTPUT,
	@avgDiscount NUMERIC(19,2) = NULL OUTPUT,
	@clientCount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM
				reganalytics r WITH (NOLOCK)
			WHERE
				r.operator = @operator AND r.partner IS NULL AND r.pos IS NULL AND r.[date]>=@beginDate and r.[date]<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr WITH (NOLOCK) INNER JOIN card AS cd WITH (NOLOCK) ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator AND cr.regdate>=@beginDate AND cr.regdate<@endDate)/@clientCount
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (
						SELECT 
							SUM(cd.fullbalance) 
						FROM 
							clientoperator AS cr WITH (NOLOCK)
							INNER JOIN card AS cd WITH (NOLOCK) ON cd.client = cr.client AND cd.operator = cr.operator 
						WHERE 
							cr.operator = @operator 
							AND cr.regdate>=@beginDate AND cr.regdate<@beginDate
					)/@clientCount;	
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (
						SELECT 
							SUM(cd.fullbalance) 
						FROM 
							clientoperator AS cr WITH (NOLOCK)
							INNER JOIN card AS cd WITH (NOLOCK) ON cd.client = cr.client AND cd.operator = cr.operator 
						WHERE 
							cr.operator = @operator
							AND cr.pos = @pos
							AND cr.regdate>=@beginDate AND cr.regdate<@endDate
					)/@clientCount	
				
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END

		/*Среднее начисление*/
		IF (@addedBonusCount>0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusCount, 0);
		END 
		ELSE 
		BEGIN
			SET @avgCharge = 0;
		END

		/*Среднее списание*/
		IF (@redeemedBonusCount>0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusCount, 0);
		END 
		ELSE 
		BEGIN
			SET @avgRedeem = 0;
		END

		/*Фактическая скидка*/
		IF (@addedBonus>0)
		BEGIN
			SET @avgDiscount = ROUND(@redeemedBonus/@addedBonus, 2);
		END 
		ELSE 
		BEGIN
			SET @avgDiscount = 0;
		END

		RETURN(0)
	END'

	--Изменено. В процедуре GetAnalyticClientBaseStructure расширены поля с типом NUMERIC(9,2) до NUMERIC(19,2)
	IF OBJECT_ID('GetAnalyticClientBaseStructure') IS NOT NULL DROP PROCEDURE GetAnalyticClientBaseStructure
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAnalyticClientBaseStructure]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,
	@menQty INT = 0 OUTPUT,
	@womenQty INT = 0 OUTPUT,
	@unknownGender INT = 0 OUTPUT,
	@clientsWithBuys INT = 0 OUTPUT,
	@clientsWithoutBuys INT = 0 OUTPUT,
	@clientsWithTenBuys INT = 0 OUTPUT,
	@clientsWithOneBuys INT = 0 OUTPUT,
	@clientsWithPhone INT = 0 OUTPUT,
	@clientsWithEmail INT = 0 OUTPUT,

	@menBuys NUMERIC(19,2) = NULL OUTPUT,
	@womenBuys NUMERIC(19,2) = NULL OUTPUT,
	@unknownGenderBuys NUMERIC(19,2) = NULL OUTPUT,
	@repeatedBuys NUMERIC(19,2) = NULL OUTPUT,
	@buysOnClient NUMERIC(19,2) = NULL OUTPUT,

	@errormessage NVARCHAR(100) = NULL OUTPUT
	--AS SET NOCOUNT ON
	AS
	BEGIN
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT 
				@menQty = COALESCE(SUM(r.men),0),
				@womenQty = COALESCE(SUM(r.women),0),
				@unknownGender = COALESCE(SUM(r.unknown),0),
				@clientsWithBuys = COALESCE(SUM(r.with_buys),0),
				@clientsWithoutBuys = COALESCE(SUM(r.without_buys),0),
				@clientsWithTenBuys = COALESCE(SUM(r.with_ten_buys),0),
				@clientsWithOneBuys = COALESCE(SUM(r.with_one_buy),0),
				@clientsWithPhone = COALESCE(SUM(r.with_phone),0),
				@clientsWithEmail = COALESCE(SUM(r.with_email),0),
				@menBuys = COALESCE(SUM(r.men_buys),0),
				@womenBuys = COALESCE(SUM(r.women_buys),0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys),0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys),0),
				@buysOnClient = COALESCE(SUM(r.buys_on_client),0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner IS NULL AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT 
				@menQty = COALESCE(SUM(r.men),0),
				@womenQty = COALESCE(SUM(r.women),0),
				@unknownGender = COALESCE(SUM(r.unknown),0),
				@clientsWithBuys = COALESCE(SUM(r.with_buys),0),
				@clientsWithoutBuys = COALESCE(SUM(r.without_buys),0),
				@clientsWithTenBuys = COALESCE(SUM(r.with_ten_buys),0),
				@clientsWithOneBuys = COALESCE(SUM(r.with_one_buy),0),
				@clientsWithPhone = COALESCE(SUM(r.with_phone),0),
				@clientsWithEmail = COALESCE(SUM(r.with_email), 0),
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				@buysOnClient = COALESCE(SUM(r.buys_on_client), 0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT 
				@menQty = COALESCE(SUM(r.men),0),
				@womenQty = COALESCE(SUM(r.women),0),
				@unknownGender = COALESCE(SUM(r.unknown),0),
				@clientsWithBuys = COALESCE(SUM(r.with_buys),0),
				@clientsWithoutBuys = COALESCE(SUM(r.without_buys),0),
				@clientsWithTenBuys = COALESCE(SUM(r.with_ten_buys),0),
				@clientsWithOneBuys = COALESCE(SUM(r.with_one_buy),0),
				@clientsWithPhone = COALESCE(SUM(r.with_phone),0),
				@clientsWithEmail = COALESCE(SUM(r.with_email), 0),
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				@buysOnClient = COALESCE(SUM(r.buys_on_client), 0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;
		END
		RETURN(0)
	END'

	--Изменено. В процедуре GetAnalyticClientBaseActive расширены поля с типом NUMERIC(9,2) до NUMERIC(19,2)
	IF OBJECT_ID('GetAnalyticClientBaseActive') IS NOT NULL DROP PROCEDURE GetAnalyticClientBaseActive
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GetAnalyticClientBaseActive]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,

	@menBuys NUMERIC(19,2) = NULL OUTPUT,
	@womenBuys NUMERIC(19,2) = NULL OUTPUT,
	@unknownGenderBuys NUMERIC(19,2) = NULL OUTPUT,
	@repeatedBuys NUMERIC(19,2) = NULL OUTPUT,
	@buysOnClient NUMERIC(19,2) = NULL OUTPUT,
	@clientActiveQty INT = NULL OUTPUT,
	@gain NUMERIC(19,2) = NULL OUTPUT,
	@avgCheque NUMERIC(19,2) = NULL OUTPUT,
	@buysWeekdays INT = NULL OUTPUT,
	@buysWeekOff INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS SET NOCOUNT ON
	BEGIN
		DECLARE @buyWeekdayQty NUMERIC(19,2), @buyWeekoffQty  NUMERIC(19,2), @buyQty  NUMERIC(19,2);
		
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT 
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				--@buysOnClient = COALESCE(SUM(r.buys_on_client), 0),
				@clientActiveQty = COALESCE(SUM(r.client_active_count), 0),
				@gain = COALESCE(SUM(r.gain), 0)
				--@avgCheque = COALESCE(SUM(r.avg_cheque), 0),
				--@buysWeekdays = COALESCE(AVG(r.buys_weekday), 0),
				--@buysWeekOff = COALESCE(AVG(r.buys_weekoff), 0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner IS NULL AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;

			/*Средний чек*/
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque WITH (NOLOCK)
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator)
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;		
				
			/*Покупки в будни и выходные*/
			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce WITH (NOLOCK)
				WHERE 
					partner IN (SELECT id FROM partner WHERE operator = @operator)
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
					AND ce.proctime>=@beginDate AND ce.proctime<@endDate
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque WITH (NOLOCK)
			WHERE 
				partner IN (SELECT id FROM partner WHERE operator = @operator) 
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			IF (@buyQty > 0)
			BEGIN
				SET @buysWeekdays = ROUND(((@buyWeekdayQty/@buyQty)*100), 0);
				SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
			END
			ELSE
			BEGIN
				SET @buysWeekdays = 0;
				SET @buysWeekOff = 0;
			END	
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT 				
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				--@buysOnClient = COALESCE(SUM(r.buys_on_client), 0),
				@clientActiveQty = COALESCE(SUM(r.client_active_count), 0),
				@gain = COALESCE(SUM(r.gain), 0)
				--@avgCheque = COALESCE(SUM(r.avg_cheque), 0),
				--@buysWeekdays = COALESCE(AVG(r.buys_weekday), 0),
				--@buysWeekOff = COALESCE(AVG(r.buys_weekoff), 0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;

			/*Средний чек*/
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque WITH (NOLOCK)
			WHERE 
				partner = @partner
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund = 0 OR refund IS NULL)
				AND proctime>=@beginDate AND proctime<@endDate;

			/*Покупки в будни и выходные*/			
			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce WITH (NOLOCK)
				WHERE 
					partner = @partner
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
					AND ce.proctime>=@beginDate AND ce.proctime<@endDate
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque WITH (NOLOCK)
			WHERE 
				partner = @partner 
				AND (refund IS NULL OR refund = 0) 
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			IF(@buyQty > 0)
			BEGIN
				SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
				SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
			END
			ELSE
			BEGIN
				SET @buysWeekdays = 0;
				SET @buysWeekOff = 0;
			END
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT
				@menBuys = COALESCE(SUM(r.men_buys), 0),
				@womenBuys = COALESCE(SUM(r.women_buys), 0),
				@unknownGenderBuys = COALESCE(SUM(r.unknown_buys), 0),
				@repeatedBuys = COALESCE(SUM(r.repeated_buys), 0),
				--@buysOnClient = COALESCE(SUM(r.buys_on_client), 0),
				@clientActiveQty = COALESCE(SUM(r.client_active_count), 0),
				@gain = COALESCE(SUM(r.gain), 0)
				--@avgCheque = COALESCE(SUM(r.avg_cheque), 0),
				--@buysWeekdays = COALESCE(AVG(r.buys_weekday), 0),
				--@buysWeekOff = COALESCE(AVG(r.buys_weekoff), 0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;

			/*Средний чек*/
			SELECT 			
				@avgCheque = COALESCE(AVG(amount), 0)
			FROM 
				cheque WITH (NOLOCK)
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund = 0 OR refund IS NULL)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			/*Покупки в будни и выходные*/			
			WITH cte AS
			(
				SELECT
					COUNT(id) chequeQty,
					DATEPART(WEEKDAY, ce.proctime) AS dayweek
				FROM
					cheque AS ce WITH (NOLOCK)
				WHERE 
					partner = @partner
					AND pos = @pos
					AND (refund = 0 OR refund IS NULL)
					AND (cancelled IS NULL OR cancelled = 0)
					AND proctime>=@beginDate AND proctime<@endDate
				GROUP BY
					DATEPART(WEEKDAY, ce.proctime)
			)
			SELECT
				@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
				@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


			SELECT 
				@buyQty = COUNT(id) 
			FROM 
				cheque WITH (NOLOCK)
			WHERE 
				partner = @partner
				AND pos = @pos
				AND (refund IS NULL OR refund = 0)
				AND (cancelled IS NULL OR cancelled = 0)
				AND proctime>=@beginDate AND proctime<@endDate;

			IF(@buyQty > 0)
			BEGIN
				SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
				SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
			END
			ELSE
			BEGIN
				SET @buysWeekdays = 0;
				SET @buysWeekOff = 0;
			END
		END

		BEGIN /*Покупок на клиента*/
			IF (@clientActiveQty > 0)
			BEGIN
				SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientActiveQty
			END
			ELSE
			BEGIN
				SET @buysOnClient = 0
			END
		END
		

		RETURN(0)
	END'

	--Изменено. В процедуре GainOperatorPeriod расширены поля с типом NUMERIC(9,2) до NUMERIC(19,2)
	IF OBJECT_ID('GainOperatorPeriod') IS NOT NULL DROP PROCEDURE GainOperatorPeriod
	EXEC sp_executesql @statement = N'CREATE PROCEDURE [dbo].[GainOperatorPeriod] @operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@from DATE = NULL,
			@to DATE = NULL,
			@errormessage NVARCHAR(100) = NULL OUTPUT
		AS
		BEGIN
			IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
			BEGIN
				SET @errormessage = N''Не найден оператор''
				RETURN(1)
			END
			IF(@partner = 0)
			BEGIN
				SET @partner = NULL
			END

			IF(@pos = 0)
			BEGIN
				SET @pos = NULL
			END
			DECLARE @table AS table
			(
				gain NUMERIC(19,2),
				avgcheque NUMERIC(19,2),
				monthnum INT
			)

			DECLARE @gainTable AS TABLE
			(
				gain NUMERIC(19,2),
				monthnum INT
			)

			DECLARE @gainRefund AS TABLE
			(
				gainRefund NUMERIC(19,2),
				monthNum INT
			)

			IF(@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND (ce.refund = 0 OR ce.refund IS NULL)
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainRefund(gainRefund, monthNum)
				SELECT
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner IN (SELECT id FROM partner WHERE operator = @operator) 
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND ce.refund = 1
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END
			ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner = @partner 
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner 
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND (ce.refund = 0 OR ce.refund IS NULL)
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainRefund(gainRefund, monthNum)
				SELECT
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND ce.refund = 1
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END
			ELSE IF(@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
			BEGIN
				INSERT INTO @table(avgcheque, monthnum)
				SELECT
					COALESCE(AVG(ce.amount), 0) AS avgcheque,
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					cheque AS ce
				WHERE
					ce.partner = @partner
					AND ce.pos = @pos
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.proctime > @from
					AND ce.proctime <= @to
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainTable(gain, monthnum)
				SELECT 
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM 
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner
					AND ce.pos = @pos
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND (ce.refund = 0 OR ce.refund IS NULL)
				GROUP BY
					DATEPART(MONTH, ce.proctime)

				INSERT INTO @gainRefund(gainRefund, monthNum)
				SELECT
					COALESCE(SUM(ABS(ce.amount) - COALESCE(ABS(ce.paidbybonus), 0)), 0),
					DATEPART(MONTH, proctime) AS monthnum
				FROM
					@table AS te
					INNER JOIN cheque AS ce ON te.monthnum = DATEPART(MONTH, ce.proctime)
				WHERE
					ce.partner = @partner
					AND ce.proctime > @from
					AND ce.proctime <= @to
					AND ce.refund = 1
					AND ce.pos = @pos
				GROUP BY
					DATEPART(MONTH, ce.proctime)
			END

			MERGE @gainTable AS target
				USING @gainRefund AS source
				ON (target.monthnum = source.monthnum)
				WHEN MATCHED THEN UPDATE SET gain = gain - source.gainRefund
				WHEN NOT MATCHED THEN INSERT (gain, monthnum) VALUES((-1)*source.gainRefund, source.monthnum);

			MERGE @table AS target
				USING @gaintable AS source
				ON (target.monthnum = source.monthnum)
				WHEN MATCHED THEN UPDATE SET gain = source.gain
				WHEN NOT MATCHED THEN INSERT (gain, avgcheque, monthnum) VALUES(source.gain, 0, source.monthnum);

			SELECT
				gain,
				avgcheque,
				monthnum
			FROM
				@table AS te
			RETURN(0)
		END'

		--Изменено. Удалена внешняя ссылка на старую таблицук poslist_old
		IF (OBJECT_ID('FK_poslistitems_poslistnew', 'F') IS NOT NULL)
		BEGIN
			ALTER TABLE dbo.poslistitems DROP CONSTRAINT FK_poslistitems_poslistnew
		END

		--Добавлено. Создана связь таблицы poslist и poslistitems
		IF (OBJECT_ID('FK_poslistitems_poslist', 'F') IS NULL)
		BEGIN
			ALTER TABLE [dbo].[poslistitems]  WITH NOCHECK ADD  CONSTRAINT [FK_poslistitems_poslist] FOREIGN KEY([poslist])
			REFERENCES [dbo].[poslist] ([id])
			NOT FOR REPLICATION 

			ALTER TABLE [dbo].[poslistitems] NOCHECK CONSTRAINT [FK_poslistitems_poslist]
		END

END ELSE IF @version = 395 BEGIN
	SELECT '3.96 20180503 Смирнов'

	--Изменено. Оптимизирован запрос получения данных
	IF OBJECT_ID('[Reports].[OperatorClient]', 'P') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [Reports].[OperatorClient] @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@partner smallint = NULL,
		@pos smallint = NULL,

		@f_fio NVARCHAR(250) = NULL,
		@f_phone NVARCHAR(11) = NULL,
		@f_email NVARCHAR(250) = NULL,
		@f_birthdate DATE = NULL,
		@f_sex int = NULL,
		@f_type NVARCHAR(250) = NULL,
		@f_card NVARCHAR(250) = NULL,
		@f_level NVARCHAR(250) = NULL,
		@f_balance_more int = NULL,
		@f_balance_less int = NULL,

		@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		DECLARE @SQLStr NVARCHAR(MAX) = '''', @whereStr NVARCHAR(MAX) = '''', @ParamDefinition NVARCHAR(500), @joinStr NVARCHAR(MAX) = '''';

		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		SET @ParamDefinition = N''@operator smallint, @partner smallint, @pos smallint, @from date=NULL, @to date = NULL'';  

		SET @SQLStr = N''
		DECLARE @beginDate DATE, @endDate DATE;

		IF(@from IS NOT NULL)
		BEGIN
			SET @beginDate = @from
		END
		ELSE
		BEGIN
			SET @beginDate = (SELECT MIN(regdate) FROM clientoperator WHERE operator = @operator)
		END

		IF(@to IS NOT NULL)
		BEGIN
			SET @to = DATEADD(DAY, 1, (@to))		
			SET @endDate = @to
		END
		ELSE
		BEGIN
			SET @endDate = DATEADD(DAY, 1, (GETDATE()))
		END
			
		DECLARE @cheques AS TABLE
		(
			amount DECIMAL(9,2),
			card BIGINT,
			qty INT,
			UNIQUE CLUSTERED (card)
		)
		INSERT INTO @cheques (amount, card, qty)
		SELECT
			COALESCE(SUM(amount), 0),
			card,
			COUNT(id)
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			AND (cancelled IS NULL OR cancelled = 0)
			AND (refund IS NULL OR refund = 0)
		GROUP BY
			card

		DECLARE @chequesRefund AS TABLE
		(
			amount DECIMAL(9,2),
			card BIGINT,
			qty INT,
			UNIQUE CLUSTERED (card)
		)
		INSERT INTO @chequesRefund (amount, card, qty)
		SELECT
			COALESCE(SUM(amount), 0),
			card,
			COUNT(id)
		FROM
			cheque
		WHERE
			chequetime >= @beginDate 
			AND chequetime < @endDate
			AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
			AND (cancelled IS NULL OR cancelled = 0)
			AND refund = 1
		GROUP BY
			card

		DECLARE @bonusesAdd AS TABLE
		(
			bonus NUMERIC(9,2),
			card BIGINT,
			UNIQUE CLUSTERED(card)
		)
		INSERT INTO @bonusesAdd
		(
			bonus, 
			card
		)
		SELECT
			COALESCE(SUM(bonus), 0), 
			card
		FROM
			bonus
		WHERE
			operator = @operator
			AND proctime >= @beginDate
			AND proctime < @endDate
			AND (refund = 0 OR refund IS NULL)
			AND bonus >= 0
			AND source = 1
		GROUP BY
			card

		DECLARE @bonusesRedeemed AS TABLE
		(
			bonus NUMERIC(9,2),
			card BIGINT
			UNIQUE CLUSTERED(card)
		)
		INSERT INTO @bonusesRedeemed
		(
			bonus, 
			card
		)
		SELECT
			COALESCE(SUM(bonus), 0),
			card
		FROM
			bonus
		WHERE
			operator = @operator
			AND proctime >= @beginDate
			AND proctime < @endDate
			AND (refund = 0 OR refund IS NULL)
			AND bonus < 0
			AND source = 1
		GROUP BY
			card

		DECLARE @bonusesNotBuy AS TABLE
		(
			bonus NUMERIC(9,2),
			card BIGINT
			UNIQUE CLUSTERED(card)
		)
		INSERT INTO @bonusesNotBuy
		(
			bonus, 
			card
		)
		SELECT
			COALESCE(SUM(bonus), 0),
			card
		FROM
			bonus
		WHERE
			operator = @operator
			AND proctime >= @beginDate
			AND proctime < @endDate
			AND (refund = 0 OR refund IS NULL)
			AND bonus > 0 
			AND source > 1
		GROUP BY
			card

		SELECT
			(SELECT smssender FROM operator WHERE id = @operator) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''''''') + '''' '''' + COALESCE(address, '''''''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''''''') + '''' '''' + COALESCE(address, '''''''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''''M5TT21'''' AND pr.operator = @operator), N''''Lcpos'''')
				WHEN cr.pos IS NULL AND cr.appdevice IS NOT NULL AND cr.password IS NOT NULL THEN cr.appregistrator
				ELSE N''''Нет''''
			END AS address,
			COALESCE(ct.surname, '''''''') + '''' '''' + coalesce(ct.name, '''''''') + '''' '''' + COALESCE(ct.patronymic, '''''''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''''Женский''''
				WHEN 1 THEN N''''Мужской''''
				ELSE N''''Неизвестен''''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''''''') as email,
			cd.number,
			COALESCE(cp.name, N''''Клиент'''') AS ClientType, 
			cs.qty AS [Количество покупок],		
			cs.amount AS [Сумма покупок],
			bsAdd.bonus AS [Начислено бонусов],
			(-1)*bsRedeem.bonus AS [Списано бонусов],
			crd.qty AS [Количество возвратов],
			crd.amount AS [Сумма возвратов],
			cd.fullbalance,
			COALESCE((SELECT condition FROM level WHERE id = cd.level), (SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'''' %'''' FROM chequerule WHERE operator = @operator)) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			bsNotBuy.bonus AS [Бонусы не за покупки],
			cr.regdate
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN operator AS op ON cd.operator = op.id
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
			LEFT JOIN @cheques AS cs ON cd.number = cs.card
			LEFT JOIN @chequesRefund AS crd ON crd.card = cd.number
			LEFT JOIN @bonusesAdd AS bsAdd ON bsAdd.card = cd.number
			LEFT JOIN @bonusesRedeemed AS bsRedeem ON bsRedeem.card = cd.number
			LEFT JOIN @bonusesNotBuy AS bsNotBuy ON bsNotBuy.card = cd.number

		''

		SET @whereStr=N''
		WHERE
			cr.regdate >= @beginDate
			AND cr.regdate < @endDate '';

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN 
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator '';
		END
		
		IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN 
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator 
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner) "'';
		END		

		IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN 
			SET @joinStr = @joinStr + N'' INNER JOIN pos p on p.id = cr.pos''
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator 
				AND cr.pos = @pos'';
		END	

		IF (@f_fio IS NOT NULL) /*Фильтр по ФИО*/
		BEGIN
			SET @whereStr = @whereStr + N'' 
			AND (
					COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''%'' + @f_fio + '''''' ''+
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''%''+ @f_fio + N''%'''''' +
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''''+@f_fio+N''%''''''+ 
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') = ''''''+@f_fio+''''''
				) ''
		END

		IF (@f_phone IS NOT NULL) /*Фильтр по телефону*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (ct.phone LIKE ''''%'' + @f_phone + ''%'''' OR ct.phone LIKE ''''%'' + @f_phone + '''''' OR ct.phone LIKE '''''' + @f_phone + ''%'''' OR ct.phone =''''''+ @f_phone + '''''') ''
		END

		IF (@f_email IS NOT NULL) /*Фильтр по email*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (ct.email LIKE ''''%'' + @f_email + ''%'''' OR ct.email LIKE ''''%'' + @f_email  + '''''' OR ct.email LIKE '''''' + @f_email + ''%'''' OR ct.email ='''''' + @f_email + '''''') '';
		END

		IF (@f_birthdate IS NOT NULL) /*Фильтр по дате рождения*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, COALESCE(cr.birthdate, ct.birthdate))='''''' + CONVERT(NVARCHAR(20), @f_birthdate) + '''''' '';
		END

		IF (@f_sex IS NOT NULL) /*Фильтр по полу*/
		BEGIN
			IF (@f_sex=0) SET @whereStr = @whereStr + N'' AND ct.gender=0 '';
			ELSE IF (@f_sex=1) SET @whereStr = @whereStr + N'' AND ct.gender=1 '';
			ELSE IF (@f_sex=2) SET @whereStr = @whereStr + N'' AND ct.gender IS NULL '';
		END

		IF (@f_type IS NOT NULL) /*Фильтр по типу*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND COALESCE(cp.name, N''''Клиент'''') = ''''''+ @f_type +'''''''';
		END

		IF (@f_card IS NOT NULL) /*Фильтр по номеру карты*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (cd.number LIKE ''''%'' + @f_card + ''%''''OR cd.number LIKE ''''%'' + @f_card + '''''' OR cd.number LIKE '''''' + @f_card + ''%'''' OR cd.number ='''''' + @f_card + '''''') '';
		END

		IF (@f_balance_more IS NOT NULL) /*Фильтр по балансу нижняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance>=''+CONVERT(NVARCHAR(10), @f_balance_more);
		END

		IF (@f_balance_less IS NOT NULL) /*Фильтр по балансу верхняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance<''+CONVERT(NVARCHAR(10), @f_balance_less);
		END

		IF (@f_balance_more IS NOT NULL) /*Фильтр по начислению нижняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance>=''+CONVERT(NVARCHAR(10), @f_balance_more);
		END

		IF (@f_balance_less IS NOT NULL) /*Фильтр по начислению верхняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance<''+CONVERT(NVARCHAR(10), @f_balance_less);
		END

		 
            

		SET @SQLStr = @SQLStr + @whereStr;

		--SET @errormessage = @SQLStr;

		--print @errormessage;

		EXECUTE sp_executesql @SQLStr, @ParamDefinition, @operator, @partner, @pos;
		
		RETURN(0)
	END'

END ELSE IF @version = 396 BEGIN
	SELECT '3.97 20180513 Юсупов'

	--ChequesPaging. Добавлено. Пагинации продаж
	IF OBJECT_ID('[dbo].[ClientsPaging]', 'P') IS NOT NULL DROP PROCEDURE [dbo].[ClientsPaging]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [dbo].[ClientsPaging]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos NVARCHAR(10) = NULL,

	@f_fio NVARCHAR(250) = NULL,
	@f_phone NVARCHAR(20) = NULL,
	@f_email NVARCHAR(100) = NULL,
	@f_birthdate DATE = NULL,
	@f_sex INT = NULL,
	@f_type NVARCHAR(200) = NULL,
	@f_card NVARCHAR(200) = NULL,
	@f_level NVARCHAR(20) = NULL,
	@f_balance_more INT = NULL,
	@f_balance_less INT = NULL,

	@start INT = NULL,
	@length INT = NULL,

	@total_rows INT = NULL OUTPUT,
	@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		DECLARE 
			@sqlStr NVARCHAR(MAX) = '''', 
			@sqlCountStr NVARCHAR(MAX) = '''', 
			@whereStr NVARCHAR(MAX) = '''', 
			@joinStr NVARCHAR(MAX) = '''', 
			@paramDefinition NVARCHAR(500) = ''@operator smallint, @partner smallint, @pos NVARCHAR(100), @start int, @length int, @rows int OUTPUT'';

		SET @sqlStr = N''
			SELECT
				cr.client,
				COALESCE(cr.surname + '''' '''', '''''''') + COALESCE(cr.name + '''' '''', '''''''') + COALESCE(cr.patronymic + '''' '''', '''''''') AS fullname,
				cr.phone,
				COALESCE(ct.email, cr.email, N''''Отсутствует'''') AS email,
				cr.birthdate,
				CASE
					WHEN cr.gender = 1 THEN N''''Мужской''''
					WHEN cr.gender = 0 THEN N''''Женский''''
					ELSE N''''Не указан''''
				END AS gender,
				COALESCE(ce.name, N''''Клиент'''') AS client_type,
				cd.number,
				COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'''' %'''' FROM chequerule WHERE operator = @operator), N''''Отсутствует'''') AS level,
				cd.fullbalance,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buyqty,
				(SELECT SUM(amount) FROM cheque WHERE card = cd.number AND (refund = 0 OR refund IS NULL) AND (cancelled IS NULL OR cancelled = 0)) AS buysum,
				(SELECT proctime FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyDate,
				(SELECT amount FROM cheque WHERE card = cd.number AND proctime = (SELECT MAX(proctime) FROM cheque WHERE card = cd.number) AND (cancelled IS NULL OR cancelled = 0) AND id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)) AS lastBuyAmount,
				(SELECT 
					COUNT(bs.id) 
				FROM 
					bonus AS bs 
					INNER JOIN cheque AS ce ON bs.cheque = ce.id 
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemqty,
				(SELECT 
					COALESCE(SUM(ABS(bonus)), 0) 
				FROM 
					bonus AS bs
					INNER JOIN cheque AS ce ON bs.cheque = ce.id
				WHERE 
					bs.bonus < 0 
					AND bs.card = cd.number
					AND (ce.cancelled IS NULL OR ce.cancelled = 0)
					AND (ce.refund = 0 OR ce.refund IS NULL)
					AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
				) AS bonusredeemsum,
				(SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number) AS welcomeBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 4 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 4 AND card = cd.number)) AS welcomeBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number) AS promoBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 2 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 2 AND card = cd.number)) AS promoBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number) AS operatorBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 3 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 3 AND card = cd.number)) AS operatorBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number) AS friendBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 5 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS friendBonus,
				(SELECT MAX(proctime) FROM bonus WHERE source = 6 AND card = cd.number) AS birthdayBonusDate,
				(SELECT SUM(bonus) FROM bonus WHERE source = 6 AND card = cd.number AND proctime = (SELECT MAX(proctime) FROM bonus WHERE source = 5 AND card = cd.number)) AS birthdayBonus,
				CASE
					WHEN cr.appdevice IS NOT NULL AND cr.pos IS NULL THEN N''''Мобилка''''
					WHEN cr.appdevice IS NULL AND cr.pos IS NULL THEN N''''Сайт''''
					WHEN cr.pos IS NOT NULL THEN (SELECT name FROM pos WHERE id = cr.pos)
				END AS posRegistrator,
				cr.regdate,
				(SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1) AS refundQty,
				(SELECT COALESCE(SUM(ABS(amount)), 0) FROM cheque WHERE card = cd.number AND refund = 1) AS refund,
                ROW_NUMBER() OVER ( ORDER BY cr.regdate DESC ) AS RowNum
			FROM
				clientoperator AS cr
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id 
				LEFT JOIN client ct ON ct.id = cr.client'';

		SET @sqlCountStr = N''
			SELECT @rows = COUNT(*) 
            FROM  
                clientoperator as cr 
				INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
				LEFT JOIN cardtype AS ce ON ce.id = cd.type
				LEFT JOIN level AS ll ON cd.level = ll.id 
				LEFT JOIN client ct ON ct.id = cr.client '';


		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @whereStr = N'' WHERE cr.operator = @operator '';
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @whereStr = N'' WHERE cr.operator = @operator AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner) '';
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @joinStr = @joinStr + N'' INNER JOIN pos AS ps ON cr.pos = ps.id '';
			SET @whereStr = N'' WHERE cr.operator = @operator AND ps.code = @pos '';
		END

		/*Фильтр по ФИО*/
		IF (@f_fio IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' 
				AND (
                        COALESCE(cr.surname +'''' '''', '''''''') +COALESCE(cr.name + '''' '''', '''''''') + COALESCE(cr.patronymic + '''' '''', '''''''') like ''''%'' + @f_fio + '''''' 
                        OR COALESCE(cr.surname +'''' '''', '''''''') +COALESCE(cr.name + '''' '''', '''''''') + COALESCE(cr.patronymic + '''' '''', '''''''') like ''''%'' + @f_fio + ''%'''' 
                        OR COALESCE(cr.surname +'''' '''', '''''''') +COALESCE(cr.name + '''' '''', '''''''') + COALESCE(cr.patronymic + '''' '''', '''''''') like '''''' + @f_fio + ''%'''' 
                        OR COALESCE(cr.surname +'''' '''', '''''''') +COALESCE(cr.name + '''' '''', '''''''') + COALESCE(cr.patronymic + '''' '''', '''''''') = '''''' + @f_fio + '''''') '';
		END

		/*Фильтр по телефону */
		IF (@f_phone IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N''  AND (cr.phone LIKE ''''%'' + @f_phone + ''%'''' OR cr.phone LIKE ''''%'' + @f_phone + '''''' OR cr.phone LIKE '''''' + @f_phone + ''%'''' OR cr.phone ='''''' + @f_phone + '''''') '';
		END

		/*Фильтр по email */
		IF (@f_email IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND (cr.email LIKE ''''%'' + @f_email + ''%'''' OR cr.email LIKE ''''%'' + @f_email + '''''' OR cr.email LIKE '''''' + @f_email + ''%'''' OR cr.email ='''''' + @f_email + '''''') '';
		END

		/*Фильтр по дате рождения*/
		IF (@f_birthdate IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, cr.birthdate)='''''' + CONVERT(NVARCHAR(20), @f_birthdate) + '''''' '';
		END

		/*Фильтр по полу*/
		IF (@f_sex IS NOT NULL)
		BEGIN
			IF (@f_sex = 0) BEGIN SET @whereStr = @whereStr + N'' AND cr.gender = 0 '' END
			ELSE IF (@f_sex = 1) BEGIN SET @whereStr = @whereStr + N'' AND cr.gender = 1 '' END
			IF (@f_sex = 2) BEGIN SET @whereStr = @whereStr + N'' AND cr.gender IS NULL '' END
		END

		/*Фильтр по типу клиента*/
		IF (@f_type IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND COALESCE(ce.name, N''''Клиент'''')='''''' + @f_type + '''''' '';
		END

		/*Фильтр по № карты*/
		IF (@f_card IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND (cd.number LIKE ''''%'' + @f_card + ''%''''OR cd.number LIKE ''''%'' + @f_card + '''''' OR cd.number LIKE '''''' + @f_card + ''%'''' OR cd.number = '''''' + @f_card + '''''') '';
		END

		/*Фильтр по уровню*/
		IF (@f_level IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N''  AND COALESCE(ll.condition,(SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'''' %'''' FROM chequerule WHERE operator = @operator), N''''Отсутствует'''') = '''''' + @f_level + '''''' '';
		END

		/*Фильтр по балансу */
		IF (@f_balance_more IS NOT NULL AND @f_balance_less IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance>='' + CONVERT(NVARCHAR(10), @f_balance_more) + '' AND cd.fullbalance<'' + CONVERT(NVARCHAR(10), @f_balance_less) + '' '';
		END 

		SET @sqlStr = @sqlStr + @joinStr + @whereStr;
		SET @sqlCountStr = @sqlCountStr + @joinStr + @whereStr;

		SET @sqlStr = @sqlCountStr + N'' SELECT  * FROM ('' + @sqlStr + N'') AS RowConstrainedResult WHERE   RowNum >= @start AND RowNum < @length ORDER BY RowNum '';

		--SET @errormessage = @sqlStr;

		EXECUTE sp_executesql @sqlStr, @paramDefinition, @operator, @partner, @pos, @start, @length, @rows = @total_rows OUTPUT;

		RETURN (0)
	END'

	--ChequesPaging. Добавлено. Пагинации продаж
	IF OBJECT_ID('[dbo].[ChequesPaging]', 'P') IS NOT NULL DROP PROCEDURE [dbo].[ChequesPaging]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [dbo].[ChequesPaging]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,

	@f_date_buy DATE = NULL,
	@f_date_start DATE = NULL,
	@f_date_end DATE = NULL,
	@f_pos NVARCHAR(200) = NULL,
	@f_phone NVARCHAR(20) = NULL,
	@f_operation NVARCHAR(20) = NULL,
	@f_cheque NVARCHAR(200) = NULL,
	@f_sum_more INT = NULL,
	@f_sum_less INT = NULL,
	@f_added_more INT = NULL,
	@f_added_less INT = NULL,
	@f_redeemed_more INT = NULL,
	@f_redeemed_less INT = NULL,

	@start INT = NULL,
	@length INT = NULL,

	@total_rows INT = NULL OUTPUT,
	@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		DECLARE 
			@sqlStr NVARCHAR(MAX) = '''', 
			@sqlCountStr NVARCHAR(MAX) = '''', 
			@whereStr NVARCHAR(MAX) = '''', 
			@joinStr NVARCHAR(MAX) = '''', 
			@paramDefinition NVARCHAR(500) = ''@operator smallint, @partner smallint, @pos smallint, @start int, @length int, @rows int OUTPUT'';

		SET @sqlStr = N''
			SELECT 
	            c.id, 
	            c.number, 
	            c.chequetime, 
	            c.refund, 
	            ABS(c.amount) AS amount, 
	            c.discount, 
	            p.name AS partner, 
	            pos.code AS pos, 
	            c.card, 
	            b1.summa AS added, 
	            -b2.summa AS redeemed, 
	            pos.name AS posname,
	            co.phone AS clientPhone,
	            ROW_NUMBER() OVER ( ORDER BY c.proctime DESC ) AS RowNum
            FROM 
	            cheque as c '';

		SET @sqlCountStr = N''SELECT @rows = COUNT(*) FROM  cheque as c '';

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			SET @joinStr = N''
				LEFT JOIN partner as p ON c.partner = p.id 
		                LEFT JOIN pos ON c.pos = pos.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
		                left join card cd on cd.number = c.card
		                inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator
	                WHERE 
                        c.partner IN(SELECT id FROM partner WHERE operator = @operator) AND(c.cancelled IS NULL OR c.cancelled = 0) '';
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			SET @joinStr = N''
				LEFT JOIN partner as p ON c.partner = p.id 
		                LEFT JOIN pos ON c.pos = pos.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
		                left join card cd on cd.number = c.card
		                inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator
	                WHERE 
		                c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0) '';
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			SET @joinStr = N''
				LEFT JOIN partner as p ON c.partner = p.id 
		                LEFT JOIN pos ON c.pos = pos.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
		                left join card cd on cd.number = c.card
		                inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator
	                WHERE 
                        c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0) '';
		END

		/*Фильтр по дате покупки*/
		IF (@f_date_buy IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, c.proctime)='''''' + CONVERT(NVARCHAR(20), @f_date_buy) + '''''' '';
		END

		/*Фильтр по дате покупки нижняя граница*/
		IF (@f_date_start IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, c.proctime)>='''''' + CONVERT(NVARCHAR(20), @f_date_start) + '''''' '';
		END

		/*Фильтр по дате покупки нижняя граница*/
		IF (@f_date_end IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, c.proctime)<'''''' + CONVERT(NVARCHAR(20), DATEADD(day, 1, @f_date_end)) + '''''' '';
		END

		/*Фильтр по точке продажи*/
		IF (@f_pos IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND pos.name LIKE ''''%'' + @f_pos + ''%'''' '';
		END

		/*Фильтр по операции*/
		IF (@f_operation IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND c.refund='' + @f_operation + '' '';
		END

		/*Фильтр по № чека*/
		IF (@f_cheque IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND (c.number LIKE ''''%'' + @f_cheque + ''%'''' OR c.number LIKE ''''%'' + @f_cheque + '''''' OR c.number LIKE '''''' + @f_cheque + ''%'''' OR c.number ='''''' + @f_cheque + '''''') '';
		END
        
		/*Фильтр по телефону */
		IF (@f_phone IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND (co.phone LIKE ''''%'' + @f_phone + ''%'''' OR co.phone LIKE ''''%'' + @f_phone+ '''''' OR co.phone LIKE '''''' + @f_phone+ ''%'''' OR co.phone ='''''' + @f_phone+ '''''') '';
		END   
		
		/*Фильтр по сумме */
		IF (@f_sum_more IS NOT NULL AND @f_sum_less IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND ABS(c.amount)>='' + CONVERT(NVARCHAR(10), @f_sum_more) + '' AND ABS(c.amount)<'' + CONVERT(NVARCHAR(10),@f_sum_less) + '' '';
		END 

		/*Фильтр по начислениям */
		IF (@f_added_more IS NOT NULL AND @f_added_less IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND b1.summa>='' + CONVERT(NVARCHAR(10), @f_added_more) + '' AND b1.summa<'' + CONVERT(NVARCHAR(10), @f_added_less) + '' '';
		END 

		/*Фильтр по списаниям */
		IF (@f_redeemed_more IS NOT NULL AND @f_redeemed_less IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND ABS(b2.summa)>='' + CONVERT(NVARCHAR(10), @f_redeemed_more) + '' AND ABS(b2.summa)<'' + CONVERT(NVARCHAR(10), @f_redeemed_less) + '' '';
		END 



		SET @sqlStr = @sqlStr + @joinStr;
		SET @sqlCountStr = @sqlCountStr + @joinStr;

		SET @sqlStr = @sqlStr + @whereStr;
		SET @sqlCountStr = @sqlCountStr + @whereStr;

		SET @sqlStr = @sqlCountStr + N'' SELECT  * FROM ('' + @sqlStr + N'') AS RowConstrainedResult WHERE   RowNum >= @start AND RowNum < @length ORDER BY RowNum '';

		EXECUTE sp_executesql @sqlStr, @paramDefinition, @operator, @partner, @pos, @start, @length, @rows = @total_rows OUTPUT;

		RETURN (0)
	END'

	--Изменено. Правка расчетов в блоках структура и активность
	IF OBJECT_ID('[dbo].[CalcAnalytics]', 'P') IS NOT NULL DROP PROCEDURE [dbo].[CalcAnalytics]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [dbo].[CalcAnalytics]
		@calcDay DATE = NULL,
		@beginDate DATE = NULL,
		@endDate DATE = NULL,
	
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
		DECLARE 
			@day DATE = NULL,
			@operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,

			/*Структура клиентской базы*/
			@menCnt INT = 0,
			@womenCnt INT = 0,
			@unknownGenderCnt INT = 0,
			@clientsWithBuysCnt INT = 0,
			@clientsWithoutBuysCnt INT = 0,
			@clientsWithTenBuysCnt INT = 0,
			@clientsWithOneBuysCnt INT = 0,
			@clientsWithPhoneCnt INT = 0,
			@clientsWithEmailCnt INT = 0,
			/*END Структура клиентской базы*/

			/*Активность клиентской базы*/
			@womenBuys NUMERIC(19,2) = 0,
			@menBuys NUMERIC(19,2) = 0,
			@unknownGenderBuys NUMERIC(19,2) = 0,
			@repeatedBuys NUMERIC(19,2) = 0,
			@buysOnClient NUMERIC(19,2) = 0,
			--@clientsQty INT = 0,
			@clientActiveQty INT = 0,
			@gain NUMERIC(19,2) = 0,
			@gainBuys NUMERIC(19,2),
			@gainRefund NUMERIC(19,2),
			@avgCheque NUMERIC(19,2) = 0,
			@buysWeekdays INT = 0,
			@buysWeekOff INT = 0,
			@buyWeekdaySum NUMERIC(19,2), @buyWeekOffAmount NUMERIC(19,2), @chequeSum NUMERIC(19,2),  @buyWeekdayQty NUMERIC(19,2), @buyWeekoffQty NUMERIC(19,2), @buyQty NUMERIC(19,2),
			/*END Активность клиентской базы*/

			/*Сегментация по возрасту*/
			@clients INT = 0,
			@less25 INT = 0,
			@more25less35 INT = 0,
			@more35less45 INT = 0,
			@more45 INT = 0,
			@unknown INT = 0,
			@withBirthDate INT = 0,
			@withoutBirthDate INT = 0,
			/*END Сегментация по возрасту*/

			/*БОНУСЫ*/
			@addedBonus NUMERIC(19,2) = 0,
			@avgCharge NUMERIC(19,2) = 0,
			@redeemedBonus NUMERIC(19,2) = 0,
			@avgRedeem NUMERIC(19,2) = 0,
			@avgBalance NUMERIC(19,2) = 0,
			@avgDiscount NUMERIC(19,2) = 0,
			@addedBonusQty INT = 0, 
			@redeemedBonusQty INT = 0
			/*END БОНУСЫ*/
		BEGIN
			set @day = CONVERT (date, GETDATE());
			IF (@calcDay IS NOT NULL) set @day=CONVERT(date, @calcDay);
			if (@beginDate IS NULL) set @beginDate = @day
			if (@endDate IS NULL) set @endDate = DATEADD(dd,1,@day)

			--DELETE FROM reganalytics where [date] = @day
		
			BEGIN TRY /*Расчет итогов по оператору*/
				DECLARE Operator_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id FROM operator --where id = 6

				OPEN Operator_Cursor
				FETCH NEXT FROM Operator_Cursor INTO @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator WHERE gender = 1 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator and regdate>=@beginDate and regdate<@endDate) t3

						-- клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
							--LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE
							cr.regdate>=@beginDate and cr.regdate<@endDate
							AND cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							--AND ce2.id IS NULL;	


						-- клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							ce.id IS NULL
							--OR (
							--	(ce.refund = 0 OR ce.refund IS NULL) 
							--	AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
							--	AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							--))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
								--LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
							WHERE
								cr.regdate>=@beginDate and cr.regdate<@endDate								
								AND cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								--AND ce2.id IS NULL	
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1

						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
								--LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
							WHERE
								cr.operator = @operator
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								--AND ce2.id IS NULL	
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл					
						SELECT 
							@clientsWithPhoneCnt = COUNT(DISTINCT client) 
						FROM clientoperator 
						WHERE operator = @operator AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						
						SELECT 
							@clientsWithEmailCnt = COUNT(DISTINCT client) 
						FROM clientoperator cr 
						JOIN client c on c.id = cr.client 
						WHERE operator = @operator AND (cr.email IS NOT NULL OR c.email IS NOT NULL) AND cr.regdate>=@beginDate and cr.regdate<@endDate;
						
					END /*Окончание блока "Структура клиентской базы*/
				
					BEGIN /* Начало блока "Активность клиентской базы" */

						--Покупок на женщин,мужчин и без пола
						select @womenBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN clientoperator cr ON cr.operator=@operator AND cr.gender = 0
							INNER JOIN card cd ON ce.card=cd.number AND cd.operator = cr.operator AND cr.client = cd.client
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;							

						select @menBuys = COALESCE(sum(ce.amount  - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN clientoperator cr ON cr.operator=@operator AND cr.gender = 1
							INNER JOIN card cd ON ce.card=cd.number AND cd.operator = cr.operator AND cr.client = cd.client
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;

						select @unknownGenderBuys = COALESCE(sum(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN clientoperator cr ON cr.operator=@operator AND cr.gender IS NULL
							INNER JOIN card cd ON ce.card=cd.number AND cd.operator = cr.operator AND cr.client = cd.client
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;


						--SELECT
						--	@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
						--	@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
						--	@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON ce.card = cd.number
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;


						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT * FROM (
								SELECT 
									ce.id, 
									ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
								FROM
									cheque AS ce
									INNER JOIN card AS cd ON ce.card = cd.number
									LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
								WHERE
									cd.operator = @operator
									AND (ce.refund IS NULL OR ce.refund = 0)
									AND (ce.cancelled IS NULL OR ce.cancelled = 0)
									AND ce2.id IS NULL
							) as t where t.rownum != 1							
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate
							LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1 
							INNER JOIN cheques ce3 ON ce3.id = ce.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce2.id IS NULL

						--SELECT
						--	@clientsQty = COUNT(DISTINCT cr.client)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON cd.number = ce.card
						--WHERE
						--	cr.operator = @operator				
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END
						---

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON cd.number = ce.card AND ce.proctime>=@beginDate AND ce.proctime<@endDate
								LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1 
							WHERE 
								cr.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce2.id IS NULL
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
								--AND cr.regdate>=@beginDate and cr.regdate<@endDate
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque c
							INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator
						WHERE 
							--partner IN (SELECT id FROM partner WHERE operator = @operator)
							proctime>=@beginDate AND proctime<@endDate
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL);

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque c
							INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator
						WHERE
							--partner IN (SELECT id FROM partner WHERE operator = @operator)
							proctime>=@beginDate AND proctime<@endDate
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (cancelled IS NULL OR cancelled = 0) 
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator) 
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
					END /*Окончание блока "Активность клиентской базы"*/	
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND regdate>=@beginDate AND regdate<@endDate);
					
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND regdate>=@beginDate AND regdate<@endDate);

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/		

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus b
							left join cheque c ON c.refund = 1 AND c.id = b.cheque
						WHERE 
							operator = @operator 
							AND bonus > 0 
							AND (b.refund = 0 OR b.refund IS NULL)
							AND (c.id IS NULL OR b.cheque IS NULL)
							AND b.proctime>=@beginDate and b.proctime<@endDate;


						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus 
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND (cheque IS NOT NULL OR source = 1) 
							AND (refund = 0 OR refund IS NULL)
							AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
							AND proctime>=@beginDate and proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (SELECT 
													COUNT(id) 
												FROM 
													bonus 
												WHERE 
													operator = @operator 
													AND bonus > 0 
													AND (refund = 0 OR refund IS NULL)
													AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
													AND proctime>=@beginDate AND proctime<@endDate
												);
					
						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(id) 
											FROM 
												bonus 
											WHERE 
												operator = @operator 
												AND bonus < 0 
												AND (cheque IS NOT NULL OR source = 1) 
												AND (refund = 0 OR refund IS NULL)
												AND cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND proctime>=@beginDate AND proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator AND cr.regdate>=@beginDate AND cr.regdate<@endDate)/@clients
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END


					END /*Окончание блока "БОНУСЫ*/


					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men, women,unknown, with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)      
						VALUES(
							@calcDay, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt, @clientsWithoutBuysCnt, @clientsWithTenBuysCnt, @clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt,
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Operator_Cursor INTO @operator
				END
				CLOSE Operator_Cursor
				DEALLOCATE Operator_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору''
				RETURN (1)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			--set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/

			BEGIN TRY /*Расчет итогов по оператору и партнеру*/
				DECLARE Partner_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id, operator FROM partner --where operator = 6

				OPEN Partner_Cursor
				FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t3
			
						--клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = p.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;
							--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)

						--клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							ce.id IS NULL
							--OR (
							--	(ce.refund = 0 OR ce.refund IS NULL) 
							--	AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
							--	AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							--))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;
							--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM
							(SELECT
								cd.number
							FROM
								clientoperator AS cr			
								INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner					
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = p.id
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1								
				
						--клиенты с 1 покупкой	
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner	
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = p.id
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						
						SELECT 
							@clientsWithEmailCnt = COUNT(DISTINCT client) 
						FROM clientoperator cr 
						JOIN client c on c.id = cr.client 
						JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner
						WHERE operator = @operator AND pos = @pos AND (cr.email IS NOT NULL OR c.email IS NOT NULL) AND cr.regdate>=@beginDate and cr.regdate<@endDate;
					


					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						select @womenBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN pos AS p ON p.id = ce.pos AND p.partner = @partner
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 0 AND cr.pos = p.id
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);

						select @menBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN pos AS p ON p.id = ce.pos AND p.partner = @partner
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 1  AND cr.pos = p.id
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);

						select @unknownGenderBuys =COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN pos AS p ON p.id = ce.pos AND p.partner = @partner
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender IS NULL AND cr.pos = p.id
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);
							
						--SELECT
						--	@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
						--	@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
						--	@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON ce.card = cd.number
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT * FROM (
								SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN pos p ON p.partner = @partner AND ce.pos = p.id
								INNER JOIN card AS cd ON ce.card = cd.number AND ce.pos = p.id
								LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce2.id IS NULL
							) as t where t.rownum != 1
							
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate
							INNER JOIN pos p ON p.partner = @partner AND ce.pos=p.id
							LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							INNER JOIN cheques ce3 ON ce3.id = ce.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce2.id IS NULL

						--SELECT
						--	@clientsQty = COUNT(DISTINCT cr.client)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON cd.number = ce.card
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr 
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN pos p ON p.partner = @partner
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate AND ce.pos=p.id
								LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							WHERE 
								cr.operator = @operator 
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce2.id IS NULL
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;
						

						--Покупка в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner 
						--	AND (refund IS NULL OR refund = 0) 
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END

					END /*Окончание блока "Активность клиентской базы"*/
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							AND bs.bonus > 0 
							AND ce.partner = @partner
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND bs.bonus > 0 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
											WHERE 
												bs.operator = @operator 
												AND ce.partner = @partner
												AND bs.bonus < 0 
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--					SELECT 
						--						SUM(cd.fullbalance) 
						--					FROM 
						--						clientoperator AS cr 
						--						INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--					WHERE 
						--						cr.operator = @operator 
						--						AND cr.regdate>=@beginDate AND cr.regdate<@beginDate
						--				)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/
					
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)        
						VALUES(
							@day, @operator, @partner,
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)       
						VALUES(
							@calcDay, @operator, @partner, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				END
				CLOSE Partner_Cursor
				DEALLOCATE Partner_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору и партнеру''
				RETURN (2)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			--set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/


			BEGIN TRY /*Расчет итогов по оператору, партнеру и торговой точке*/
				DECLARE Pos_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT  pos.id, pos.partner, p.operator from pos pos join partner p on p.id=pos.partner --AND p.operator = 6
				
				OPEN Pos_Cursor
				FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/
					
						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t3

						--клиенты с покупками
						SELECT
							@clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = @pos
						WHERE
							cr.regdate>=@beginDate and cr.regdate<@endDate
							AND cr.operator = @operator							
							AND cr.pos = @pos
							AND (ce.refund IS NULL OR ce.refund = 0)
							--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							--AND cr.pos = @pos
							--AND ce.pos = @pos							

						--клиенты без покупок
						SELECT
							@clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							ce.id IS NULL
							--OR (
							--	(ce.refund = 0 OR ce.refund IS NULL) 
							--	AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
							--	AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							--))
							AND cr.operator = @operator
							AND cr.pos = @pos
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = @pos
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND ce.pos = @pos
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1
						
						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = @pos
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND ce.pos = @pos
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						
						SELECT 
							@clientsWithEmailCnt = COUNT(DISTINCT client) 
						FROM clientoperator cr 
						JOIN client c on c.id = cr.client 
						WHERE operator = @operator AND pos = @pos AND (cr.email IS NOT NULL OR c.email IS NOT NULL) AND cr.regdate>=@beginDate and cr.regdate<@endDate;
					
					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						select @womenBuys =  COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 0
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							AND ce.pos = @pos;

						select @menBuys =  COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 1
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							AND ce.pos = @pos;

						select @unknownGenderBuys =  COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender IS NULL
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							AND ce.pos = @pos;


						--SELECT
						--	@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
						--	@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
						--	@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON ce.card = cd.number
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND ce.pos = @pos
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT * FROM (
								SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN pos p ON p.partner = @partner AND p.id = @pos AND p.id = ce.pos
								INNER JOIN card AS cd ON ce.card = cd.number
								LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce2.id IS NULL
							) as t WHERE t.rownum != 1
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number  AND ce.proctime>=@beginDate AND ce.proctime<@endDate
							INNER JOIN pos p ON p.partner = @partner AND p.id = @pos AND ce.pos=p.id
							LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							INNER JOIN cheques ce3 ON ce3.id = ce.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce2.id IS NULL

						--SELECT
						--	@clientsQty = COUNT(DISTINCT cr.client)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON cd.number = ce.card
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND ce.pos = @pos
						--	AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						SET @clientActiveQty = 
							(SELECT 
								COUNT(DISTINCT cr.client) 
							FROM 
								clientoperator AS cr 
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN pos p ON p.partner = @partner AND p.id = @pos
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate AND ce.pos=p.id
								LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							WHERE 
								cr.operator = @operator 
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND ce2.id IS NULL
							);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							--partner = @partner
							pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в выходные и будни
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
						----


					END /*Окончание блока "Активность клиентской базы"*/

					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);			

						-- С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						-- БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos = @pos
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/
					
					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							AND bs.bonus > 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND ce.pos = @pos
											AND bs.bonus > 0 
											AND (bs.refund = 0 OR bs.refund IS NULL)
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
											WHERE 
												bs.operator = @operator 
												AND bs.bonus < 0 
												AND ce.pos = @pos
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--						SELECT 
						--							SUM(cd.fullbalance) 
						--						FROM 
						--							clientoperator AS cr 
						--							INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--						WHERE 
						--							cr.operator = @operator
						--							AND cr.pos = @pos
						--							AND cr.regdate>=@beginDate AND cr.regdate<@endDate
						--					)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/	
								
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos, 
							men, women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)         
						VALUES(
							@calcDay, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator 
				END
				CLOSE Pos_Cursor
				DEALLOCATE Pos_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору, партнеру и торговой точке''
				RETURN (3)
			END CATCH
		END'

END ELSE IF @version = 397 BEGIN
	SELECT '3.98 20180520 Смирнов'

	--Изменено. Добавлена выборка ТТ, у которых флаг shown в значении 1
	IF OBJECT_ID('OperatorGetPos') IS NOT NULL DROP PROCEDURE OperatorGetPos
	EXEC sp_executesql @statement = N'CREATE PROCEDURE OperatorGetPos @operator SMALLINT = NULL,
		@errormessage NVARCHAR(100) OUTPUT
	AS
	BEGIN
		IF NOT EXISTS(SELECT id FROM operator WHERE id = @operator)
		BEGIN
			SET @errormessage = N''Указанный оператор не найден''
			RETURN(1)
		END
		SELECT
			rn.name AS region,
			cy.name AS city,
			ps.address AS posaddress,
			ps.id AS id
		FROM
			pos AS ps
			LEFT JOIN city AS cy ON ps.city = cy.id
			LEFT JOIN region AS rn ON cy.region = rn.id
		WHERE
			partner in (SELECT id FROM partner WHERE operator = @operator)
			AND ps.name <> N''Анкета_офис''
			AND ps.shown = 1
	END'

END ELSE IF @version = 398 BEGIN
	SELECT '3.99 20180523 Смирнов'
	
	IF OBJECT_ID('[dbo].[OperatorAdd]') IS NOT NULL DROP PROCEDURE [dbo].[OperatorAdd]
	
	--Добавлено. Процедура добавления/обновления информации об операторе
	IF OBJECT_ID('[dbo].[OperatorAddUpdate]') IS NOT NULL DROP PROCEDURE [dbo].[OperatorAddUpdate]
	EXEC sp_executesql @statement = N'create procedure OperatorAddUpdate
		@operatorName nvarchar(20) = NULL,
		@operatorSender nvarchar(20) = NULL,
		@smsprovidername nvarchar(20) = NULL,
		@smsproviderusername nvarchar(20) = NULL,
		@smsproviderpassword nvarchar(20) = NULL,
		@operatorsmssendregistration bit = NULL,
		@operatorsmssendcheque bit = NULL,
		@operatorsmssendredeem bit = NULL,
		@paidbybonus bit = NULL,
		@operatorLKUAddress nvarchar(50) = NULL,
		@operatoremailAddress nvarchar(20) = NULL,
		@operatoremailSender nvarchar(20) = NULL,

		@operatorWelcomeBonus numeric(9,2) = NULL,
		@operatorBonusToFriend numeric(9,2) = NULL,
		@operatorBonusForFriend numeric(9,2) = NULL,
		@operatorBirthdayBonus numeric(9,2) = NULL,
		@operatorDaysBeforeBirthday tinyint = NULL,
		@operatorExpDaysBirthday tinyint = NULL,
		@operatorEmail nvarchar(50) = NULL,
		@operatorMaxRedeem numeric(9,2) = NULL,
		@operatorWelcomeBonusLKU numeric(9,2) = NULL,
		@operatorPromobonusFriend numeric(9,2) = NULL,
		@operatorPromobonusClient numeric(9,2) = NULL,
		@operatorPromocode bit = NULL,
		@operatorSetClientPassword bit = NULL,
		@operator smallint = NULL OUTPUT, 
		@errormessage nvarchar(100) = NULL OUTPUT
	as
	begin
		set nocount on
		declare @company smallint, 	
				@level smallint, 		
				@freeCard bit

		if(@operatorName is null)
		begin
			SET @errormessage = N''Не заполнено имя оператора''
			RETURN(1)
		end
		if(@smsprovidername is null)
		begin
			SET @errormessage = N''Не заполнено наименование sms провайдера''
			RETURN(3)
		end
		if(@smsproviderusername is null)
		begin
			SET @errormessage = N''Не заполнен login sms провайдера''
			RETURN(3)
		end
		if(@smsproviderpassword is null)
		begin
			SET @errormessage = N''Не заполнен пароль sms провайдера''
			RETURN(3)
		end		

		if(@operatorsmssendregistration is null)
		begin
			SET @errormessage = N''Не заполнен флаг отправки регистрационных смс''
			return(7)
		end

		if(@operatorsmssendcheque is null)
		begin
			SET @errormessage = N''Не заполнен флаг отправки смс о начислении''
			return(7)
		end

		if(@operatorsmssendredeem is null)
		begin
			SET @errormessage = N''Не заполнен флаг отправки смс о списании''
			return(7)
		end

		if(@operatorsmssendregistration = 0)
		begin
			set @operatorsmssendregistration = 1
		end
		else
		begin
			set @operatorsmssendregistration = 0
		end
		if(@operatorsmssendcheque = 0)
		begin
			set @operatorsmssendcheque = 1
		end
		else
		begin
			set @operatorsmssendcheque = 0
		end
		if(@operatorsmssendredeem = 0)
		begin
			set @operatorsmssendredeem = 1
		end
		else
		begin
			set @operatorsmssendredeem = 0
		end
		set @freeCard = 1


		if not exists(select id from operator where name = @operatorName)
		begin
			insert into operator 
			(
				name, 
				freecard, 
				freeredeem, 
				noregistrationsms, 
				nochequesms, 
				noredeemsms, 
				smssender,
				LKUAddress,
				emailaddress,
				emailsender,
				welcomebonus,
				bonustofriend,
				bonusforfriend,
				birthdaybonus,
				daysbeforebirthday,
				expdaysbirthday,
				email,
				maxredeem,
				welcomebonusLKU,
				promobonusfriend,
				promobonusclient,
				promocode,
				setclientpassword,
				smsprovider,
				smsusername,
				smspassword
			)
			values 
			(
				@operatorName, 
				@freeCard, 
				1, 
				@operatorsmssendregistration, 
				@operatorsmssendcheque, 
				@operatorsmssendredeem, 
				@operatorSender,
				@operatorLKUAddress,
				@operatoremailAddress,
				@operatoremailSender,
				@operatorWelcomeBonus,
				@operatorBonusToFriend,
				@operatorBonusForFriend,
				@operatorBirthdayBonus,
				@operatorDaysBeforeBirthday,
				@operatorExpDaysBirthday,
				@operatorEmail,
				@operatorMaxRedeem,
				@operatorWelcomeBonusLKU,
				@operatorPromobonusFriend,
				@operatorPromobonusClient,
				@operatorPromocode,
				@operatorSetClientPassword,
				@smsprovidername,
				@smsproviderusername,
				@smsproviderpassword
			)
			set @operator = @@IDENTITY
		end
		else
		begin
			set @operator = (select id from operator where name = @operatorName)
			update 
				operator 
			set 
				freeCard = @freeCard, 
				freeredeem = 1, 
				noregistrationsms = @operatorsmssendregistration,
				nochequesms = @operatorsmssendcheque,
				noredeemsms = @operatorsmssendredeem,
				smssender = @operatorSender,
				LKUAddress = @operatorLKUAddress,
				emailaddress = @operatoremailAddress,
				emailsender = @operatoremailSender,
				welcomebonus = @operatorWelcomeBonus,
				bonustofriend = @operatorBonusToFriend,
				bonusforfriend = @operatorBonusForFriend,
				birthdaybonus = @operatorDaysBeforeBirthday,
				daysbeforebirthday = @operatorDaysBeforeBirthday,
				expdaysbirthday = @operatorExpDaysBirthday,
				email = @operatorEmail,
				maxredeem = @operatorMaxRedeem,
				welcomebonusLKU = @operatorWelcomeBonusLKU,
				promobonusfriend = @operatorPromobonusFriend,
				promobonusclient = @operatorPromobonusClient,
				promocode = @operatorPromocode,
				setclientpassword = @operatorSetClientPassword,
				smsprovider = @smsprovidername,
				smsusername = @smsproviderusername,
				smspassword = @smsproviderpassword
			where 
				id = @operator
		end

		if not exists(select operator from operatorsms where operator = @operator)
		begin
			insert into operatorsms (operator, provider, username, password, sender)
			values (@operator, @smsprovidername, @smsproviderusername, @smsproviderpassword, @operatorSender)
		end
		else
		begin
			update
				operatorsms
			set
				provider = @smsprovidername,
				username = @smsproviderusername,
				password = @smsproviderpassword,
				sender = @operatorSender
			where
				operator = @operator
		end		

		return(0)
	end'

	IF OBJECT_ID('[dbo].[PartnerAddUpdate]') IS NOT NULL DROP PROCEDURE [dbo].[PartnerAddUpdate]	
	IF EXISTS (SELECT * FROM systypes WHERE name = 'Partners') DROP TYPE Partners
	--Добавлено. Тип партнёры для добавления партнёров
	create type Partners AS TABLE
	(
		Name nvarchar(30),
		Description nvarchar(max),
		Logo nvarchar(100),
		Showonsite bit,
		Mainpage bit,
		Condition nvarchar(100),
		Tagline nvarchar(100),
		Internetshop nvarchar(50),
		Givescard bit,
		Recommended bit,
		Biglogo nvarchar(100),
		Maxredeem numeric(9,2),
		Rownum int,
		Id smallint
	)

	--Добавлено. Добавление/изменение информации о партнёрах
	EXEC sp_executesql @statement = N'create procedure PartnerAddUpdate
			@operator smallint = NULL, 
			@partner Partners READONLY,
			@errormessage nvarchar(100) = NULL OUTPUT
		as
		begin
			set nocount on
			declare @company smallint, 	
					@qtyPartner int,
					@partnerId smallint,
					@partnerAdded Partners

			if not exists(select id from operator where id = @operator)
			begin
				set @errormessage = N''Указанный оператор не найден''
				return(2)
			end

			set @qtyPartner = (select count(*) from @partner)
			if (@qtyPartner = 0)
			begin
				set @errormessage = N''Отсутствуют партнёры для добавления''
				return(1)
			end
			if(@qtyPartner > 0)
			begin
				declare @j int = 0;
				while(@j <= @qtyPartner)
				begin
					if not exists(select pr.id from partner as pr inner join @partner as pra on pr.name = pra.Name where pr.operator = @operator and pra.Rownum = @j)
					begin
						insert into partner
						(
							name,
							description,
							logo,
							showonsite,
							mainpage,
							condition,
							tagline,
							internetshop,
							givescard,
							recommended,
							biglogo,
							maxredeem,
							operator
						)
						select
							Name,
							Description,
							Logo,
							Showonsite,
							Mainpage,
							Condition,
							Tagline,
							Internetshop,
							Givescard,
							Recommended,
							Biglogo,
							Maxredeem,
							@operator
						from
							@partner
						where
							Rownum = @j

						set @partnerId = @@IDENTITY
					end
					else
					begin
						update
							pr
						set
							pr.description = pra.Description,
							pr.logo = pra.Logo,
							pr.showonsite = pra.Showonsite,
							pr.mainpage = pra.Mainpage,
							pr.condition = pra.Condition,
							pr.tagline = pra.Tagline,
							pr.internetshop = pra.Internetshop,
							pr.givescard = pra.Givescard,
							pr.recommended = pra.Recommended,
							pr.biglogo = pra.Biglogo,
							pr.maxredeem = pra.Maxredeem
						from 
							partner as pr 
							inner join @partner as pra on pr.name = pra.Name 
						where 
							pr.operator = @operator 
							and pra.Rownum = @j
					
						select 
							@partnerId = pr.id 
						from 
							partner as pr 
							inner join @partner as pra on pr.name = pra.Name 
						where 
							pr.operator = @operator 
							and pra.Rownum = @j
					end
					insert into @partnerAdded
					(
						Name,
						Description,
						Logo,
						Showonsite,
						Mainpage,
						Condition,
						Tagline,
						Internetshop,
						Givescard,
						Recommended,
						Biglogo,
						Maxredeem,
						Rownum,
						Id
					)
					select
						Name,
						Description,
						Logo,
						Showonsite,
						Mainpage,
						Condition,
						Tagline,
						Internetshop,
						Givescard,
						Recommended,
						Biglogo,
						Maxredeem,
						Rownum,
						@partnerId
					from
						@partner
					where
						Rownum = @j

					set @j += 1
				end
			end

			select
				Name,
				Description,
				Logo,
				Showonsite,
				Mainpage,
				Condition,
				Tagline,
				Internetshop,
				Givescard,
				Recommended,
				Biglogo,
				Maxredeem,
				Rownum,
				@partnerId
			from
				@partnerAdded

			return(0)
		end'

	IF OBJECT_ID('[dbo].[PosAddUpdate]') IS NOT NULL DROP PROCEDURE [dbo].[PosAddUpdate]
	IF EXISTS (SELECT * FROM systypes WHERE name = 'Poses') DROP TYPE Poses
	--Добавлено. Список ТТ.
	create type Poses AS TABLE
	(
		PartnerName nvarchar(30),
		PartnerId smallint,
		Code nvarchar(10),
		City smallint,
		Address nvarchar(50),
		Name nvarchar(20),
		Mapposition nvarchar(20),
		Phone nvarchar(20),
		Shown bit,
		Rownum int,
		Id smallint
	)
	--Добавлено. Добавление/обновление информации о ТТ партнёра
	EXEC sp_executesql @statement = N'create procedure PosAddUpdate
			@operator smallint = NULL, 
			@pos Poses READONLY,
			@errormessage nvarchar(100) = NULL OUTPUT
		as
		begin
			set nocount on
			declare @company smallint, 	
					@qtyPos int,
					@posid smallint,
					@posAdded Poses

			if not exists(select id from operator where id = @operator)
			begin
				set @errormessage = N''Указанный оператор не найден''
				return(2)
			end

			set @qtyPos = (select count(*) from @pos)
			if (@qtyPos = 0)
			begin
				set @errormessage = N''Отсутствуют ТТ для добавления''
				return(1)
			end
			if(@qtyPos > 0)
			begin
				declare @k int = 0;
				while(@k <= @qtyPos)
				begin
					if not exists
					(
						select
							ps.id
						from
							pos as ps
							inner join partner as pr on ps.partner = pr.id
							inner join @pos as psa on psa.Code = ps.code and psa.PartnerName = pr.name
						where
							pr.operator = @operator
							and psa.Rownum = @k
					)
					begin
						insert into pos 
						(
							code,
							city,
							address,
							name,
							mapposition,
							phone,
							shown,
							partner
						)
						select
							ps.Code,
							ps.City,
							ps.Address,
							ps.Name,
							ps.Mapposition,
							ps.Phone,
							ps.Shown,
							pr.id
						from
							@pos as ps
							inner join partner as pr on ps.PartnerName = pr.name
						where
							pr.operator = @operator
							and ps.Rownum = @k

						set @posid = @@IDENTITY					
					end
					else
					begin
						update
							ps
						set
							ps.name = psa.Name,
							ps.city = psa.City,
							ps.address = psa.Address,
							ps.mapposition = psa.Mapposition,
							ps.phone = psa.Phone,
							ps.shown = psa.Shown
						from
							pos as ps
							inner join partner as pr on ps.partner = pr.id
							inner join @pos as psa on psa.Code = ps.code and psa.PartnerName = pr.name
						where
							pr.operator = @operator
							and psa.Rownum = @k

						select 
							@posid = ps.id
						from
							pos as ps
							inner join partner as pr on ps.partner = pr.id
							inner join @pos as psa on psa.Code = ps.code and psa.PartnerName = pr.name
						where
							pr.operator = @operator
							and psa.Rownum = @k
					end
					insert into @posAdded 
					(
						Code,
						City,
						Address,
						Name,
						Mapposition,
						Phone,
						Shown,
						PartnerId,
						PartnerName,
						Rownum,
						Id
					)
					select
						ps.Code,
						ps.City,
						ps.Address,
						ps.Name,
						ps.Mapposition,
						ps.Phone,
						ps.Shown,
						pr.id,
						pr.name,
						ps.Rownum,
						@posid
					from
						@pos as ps
						inner join partner as pr on ps.PartnerName = pr.name
					where
						pr.operator = @operator
						and ps.Rownum = @k

					set @k += 1
				end
			end

			select
				Code,
				City,
				Address,
				Name,
				Mapposition,
				Phone,
				Shown,
				PartnerId,
				PartnerName,
				Rownum,
				Id
			from
				@posAdded

			return(0)
		end'

	IF OBJECT_ID('[dbo].[UserAdd]') IS NOT NULL DROP PROCEDURE [dbo].[UserAdd]
	IF EXISTS (SELECT * FROM systypes WHERE name = 'UserRoles') DROP TYPE UserRoles
	--Добавлено. Список ролей пользователя
	create type UserRoles AS TABLE
	(
		Name nvarchar(30)
	)
	--Добавлено. Процедура добавляет пользователей
	EXEC sp_executesql @statement = N'create procedure UserAdd
			@login NVARCHAR(20) = NULL, 
			@password NVARCHAR(20) = NULL,
			@operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,
			@rolename NVARCHAR(50) = NULL,
			@permissioncode NVARCHAR(20) = NULL,
			@defaultpartner SMALLINT = NULL,
			@defaultpos SMALLINT = NULL,
			@defaultposcode NVARCHAR(10) = NULL,
			@roles UserRoles READONLY,
			@errormessage nvarchar(100) = NULL OUTPUT
		as
		begin
			set nocount on
			if (@login is null or @password is null)
			begin
				set @errormessage = N''Не указаны авторизационные данные''
				return(2)
			end
			if exists(select login from Users where login = @login)
			begin
				set @errormessage = N''Указанный логин уже существует''
				return(1)
			end

			declare @usersId int,
					@managerid int,
					@roleid smallint,
					@permissionId smallint

			insert into Users(login, password)
			values(@login, @password)

			set @usersId = @@IDENTITY

			insert into manager(operator, partner, pos, users, defaultpartner, defaultpos, defaultposcode)
			values(@operator, @partner, @pos, @usersId, @defaultpartner, @defaultpos, @defaultposcode)

			set @managerid = @@IDENTITY

			insert into role(name)
			values(@rolename)

			set @roleid = @@IDENTITY

			insert into usersrole(users, role)
			values(@usersId, @roleid)

			set @permissionId = (select id from permission where code = @permissioncode)

			insert into rolepermission(role, permission)
			values(@roleid, @permissionId)

			insert into roleroledescription
			(
				role, 
				roledescription
			)
			select
				@roleid,
				rn.id
			from
				roledescription as rn
				inner join @roles as rs on rn.name = rs.Name

			return(0)
		end'

	--Добавлено. Процедура добавляет уровни начисления у оператора
	IF OBJECT_ID('[dbo].[OperatorAddLevels]') IS NOT NULL DROP PROCEDURE [dbo].[OperatorAddLevels]
	IF EXISTS (SELECT * FROM systypes WHERE name = 'Levels') DROP TYPE Levels
	--Добавлено. Тип список уровней.
	create type Levels AS TABLE
	(
		QueueLevel int,
		Name nvarchar(20),
		Value numeric(9,2),
		Threshold numeric(9,2)
	)	
	--Добавлено. Процедура добавления уровней.
	EXEC sp_executesql @statement = N'create procedure OperatorAddLevels
		@operator smallint = NULL,
		@levels Levels READONLY,
		@paidbybonus bit = null,
		@errormessage nvarchar(100) = NULL OUTPUT
		as
		begin		
			declare @usersId int,
					@managerid int,
					@roleid smallint,
					@permissionId smallint

			--if not exists(select id from level where operator = @operator)
			--begin
			--	insert into level (operator, name, condition, level, threshold)
			--	select 
			--		@operator,
			--		Name,
			--		CAST(Value as nvarchar(10)) + N''%'',
			--		QueueLevel,
			--		Threshold
			--	from
			--		@levels
			--end
			--else
			--begin
			--	update
			--		ll
			--	set
			--		ll.threshold = lls.threshold
			--	from
			--		level as ll
			--		inner join @levels as lls on ll.name = lls.Name and ll.level = lls.QueueLevel
			--	where
			--		ll.operator = @operator
			--end

			merge level as tgt
			using (select 
						QueueLevel,
						Name,
						Value,
						Threshold 
					from 
						@levels
				) as src on (src.Name = tgt.name and src.QueueLevel = tgt.level and tgt.operator = @operator)
			when matched then 
				update set 
					tgt.threshold = src.threshold, 
					tgt.condition = CAST(src.Value as nvarchar(10)) + N''%''
			when not matched then 
				insert (
						operator, 
						name, 
						condition, 
						level, 
						threshold
						) 
				values(
						@operator, 
						src.Name,
						CAST(src.Value as nvarchar(10)) + N''%'',
						src.QueueLevel,
						src.Threshold);

			--select 
			--	@level = id 
			--from 
			--	level 
			--where 
			--	operator = @operator 
			--	and name = (select Name from @levels where QueueLevel = 1) 
			--	and condition = (select CAST(Value as nvarchar(10)) + N''%'' from @levels where QueueLevel = 1) 

			--if not exists(select id from chequerule where operator = @operator)
			--begin
			--	insert into chequerule(active, interest, level, nopaidbybonus, operator)
			--	select
			--		1,
			--		Value,
			--		(select id from level AS ll where ll.operator = @operator and ll.name = ls.Name and ll.condition = CAST(ls.Value AS nvarchar(10)) + N''%''),
			--		@paidbybonus,
			--		@operator
			--	from
			--		@levels AS ls
			--end

			merge chequerule as tgt
			using (select 
						ls.QueueLevel,
						ls.Name,
						ls.Value,
						ls.Threshold,
						ll.id,
						ll.operator
					from 
						@levels as ls
						inner join level as ll on ll.name = ls.Name and ll.level = ls.QueueLevel and ll.operator = @operator
				) as src on (src.id = tgt.level and tgt.operator = src.operator)
			when matched then 
				update set 
					tgt.interest = src.Value
			when not matched then 
				insert (
						operator, 
						interest, 
						level, 
						nopaidbybonus
						) 
				values(
						@operator, 
						src.Value,
						src.id,
						@paidbybonus);

			return(0)
		end'

	--Добавлено. Процедура добавляет правило начисления бонусов
	IF OBJECT_ID('[dbo].[OperatorAddChequeRule]') IS NOT NULL DROP PROCEDURE [dbo].[OperatorAddChequerule]
	EXEC sp_executesql @statement = N'create procedure OperatorAddChequeRule
		@operator smallint = NULL,
		@partner smallint = NULL,
		@begdate date = NULL,
		@enddate date = NULL,
		@interest numeric(9,2) = NULL,
		@minsum numeric(9,2) = NULL,
		@maxsum numeric(9,2) = NULL,
		@begtime time(0) = NULL,
		@endtime time(0) = NULL,
		@paidbybonus bit = null,
		@begweekday tinyint = NULL,
		@endweekday tinyint = NULL,
		@birthday bit = NULL,
		@birthdaybefore tinyint = NULL,
		@birthdayafter tinyint = NULL,
		@pos smallint = NULL,
		@errormessage nvarchar(100) = NULL OUTPUT
	as
	begin		
		if not exists(select id from operator where id = @operator)
		begin
			set @errormessage = N''Не найден указанный оператор''
			return(1)
		end
		if @partner is not null and @partner > 0 and not exists(select id from partner where id = @partner)
		begin
			set @errormessage = N''Не найден указанный партнёр''
			return(2)
		end
		if @minsum = 0
		begin
			set @minsum = null
		end
		if @maxsum = 0
		begin
			set @maxsum = null
		end
		if @begweekday = 0
		begin
			set @begweekday = null
		end
		if @endweekday = 0
		begin
			set @endweekday = null
		end
		if @birthdaybefore = 0
		begin
			set @birthdaybefore = null
		end
		if @birthdayafter = 0
		begin
			set @birthdayafter = null
		end
		if @pos = 0
		begin
			set @pos = null
		end
		insert into chequerule
		(
			[active]
			,[partner]
			,[begdate]
			,[enddate]
			,[interest]
			,[minsum]
			,[maxsum]
			,[begtime]
			,[endtime]
			,[nopaidbybonus]
			,[operator]
			,[begweekday]
			,[endweekday]
			,[birthday]
			,[birthdaybefore]
			,[birthdayafter]
			,[pos]
		)
		values
		(
			1,
			@partner,
			@begdate,
			@enddate,
			@interest,
			@minsum,
			@maxsum,
			@begtime,
			@endtime,
			@paidbybonus,
			@operator,
			@begweekday,
			@endweekday,
			@birthday,
			@birthdaybefore,
			@birthdayafter,
			@pos
		)

		return(0)
	end'

	--Изменено. Добавлен флаг отправки пароля у партнёра
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'setclientpassword' AND id = (SELECT id FROM sysobjects WHERE name = 'partner'))
		ALTER TABLE partner ADD setclientpassword BIT

	--Изменено. Добавлен флаг отправки пароля в ТТ
	IF NOT EXISTS(SELECT name FROM syscolumns WHERE name = 'setclientpassword' AND id = (SELECT id FROM sysobjects WHERE name = 'pos'))
		ALTER TABLE pos ADD setclientpassword BIT

	--Изменено. Добавлены проверки на отправку пароля у партнёра и ТТ.
	IF OBJECT_ID('ClientAdd') IS NOT NULL DROP PROCEDURE ClientAdd
	EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE ClientAdd
	@partner SMALLINT = NULL,
	@phone BIGINT = NULL OUTPUT,
	@card BIGINT = NULL OUTPUT,
	@client INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) OUTPUT,
	@novalidated BIT = NULL,
	@operator SMALLINT = NULL, -- добавлено для прямого задания оператора
	@posCode NVARCHAR(10) = NULL,
	@pos SMALLINT = NULL OUTPUT,
	@agreepersonaldata BIT = NULL,
	@friend BIGINT = NULL,
	@reglku BIT = NULL,
	@clientsetpassword BIT = NULL,
	@email NVARCHAR(50) = NULL,
	@promocode NVARCHAR(20) = NULL
	AS SET NOCOUNT ON
	DECLARE @validated BIT = NULL, 
			@prefix SMALLINT = NULL, 
			@numlen TINYINT = NULL, 
			@maxlocal BIGINT = NULL, 
			@cardoperator SMALLINT = NULL, 
			@virtual BIT = 0, 
			@welcomebonus NUMERIC(9,2) = NULL, 
			@friendphone BIGINT = NULL, 
			@friendcard BIGINT = NULL, 
			@result INT = NULL, 
			@friendclient INT = NULL, 
			@bonustofriend NUMERIC(9,2) = NULL, 
			@bonusforfriend NUMERIC(9,2) = NULL, 
			@base10 BIGINT = NULL, 
			@welcomebonuslku NUMERIC(9,2) = NULL, 
			@activationlink BIT = NULL,
			@clientsetpasswordOperator BIT = NULL,
			@clientsetpasswordPartner BIT = NULL,
			@clientsetpasswordPos BIT = NULL
	SET @base10 = 10
	IF @partner = 0 SET @partner = NULL 
	IF @phone = 0 SET @phone = NULL 
	IF @card = 0 SET @card = NULL 
	IF @client = 0 SET @client = NULL 
	IF @novalidated = 0 SET @novalidated = NULL 
	IF @operator = 0 SET @operator = NULL 
	IF @reglku = 0 SET @reglku = NULL
	IF @phone IS NULL 
	BEGIN 
		SET @errormessage = ''Не задан номер телефона'' 
		RETURN(1) 
	END
	SET @phone %= 10000000000
	IF @phone < 9000000000 OR @phone > 9999999999 BEGIN SET @errormessage = ''Номер телефона - 10 цифр на "9"'' RETURN(2) END
	IF @promocode IS NOT NULL
	BEGIN
		IF NOT EXISTS(SELECT client FROM clientoperator WHERE promocode = @promocode AND operator = @operator)
		BEGIN
			SET @errormessage = N''Введен неверный промокод. Повторите попытку снова!''
			RETURN(14)
		END
	END
	SELECT @validated = validated FROM phone WHERE number = @phone
	IF @@ROWCOUNT = 0 -- номер телефона еще не существует
		IF @novalidated IS NULL BEGIN SET @errormessage = ''Заданный номер телефона не найден'' RETURN(3)	END -- если валидация обязательна - тогда нужно, чтобы телефон уже был
		ELSE INSERT INTO phone (number) VALUES (@phone) -- если говорим, что не проверять, валиден телефон или нет - можно и создать
	IF @novalidated IS NULL AND (@validated IS NULL OR @validated = 0) BEGIN SET @errormessage = ''Номер телефона еще не подтвержден'' RETURN(4) END
	IF @card IS NOT NULL SELECT @cardoperator = operator FROM card WHERE number = @card -- если карта задана, то оператора можно взять из нее
	IF @operator IS NULL BEGIN
		IF @partner IS NOT NULL BEGIN -- ищем оператора у заданного партнера
			SELECT @operator = operator FROM partner WHERE id = @partner
			IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Партнера'' RETURN (5) END
			SELECT 
				@prefix = prefix, 
				@numlen = numlen, 
				@welcomebonus = welcomebonus, 
				@bonustofriend = bonustofriend, 
				@bonusforfriend = bonusforfriend, 
				@welcomebonuslku = welcomebonuslku, 
				@activationlink = activationlink 
			FROM 
				operator 
			WHERE 
				id = @operator
			IF @cardoperator IS NOT NULL -- проверяем на совпадение оператора заданного партнера и оператора заданной карты
				IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и оператор партнера'' RETURN (6) END
		END
		IF @partner IS NULL
			IF @cardoperator IS NOT NULL SET @operator = @cardoperator -- если партнер не задан и карта задана и найдена - оператор из карты
			ELSE 
			BEGIN -- если партнер не задан и карта не задана - оператор по умолчанию
				SELECT 
					@operator = id, 
					@prefix = prefix, 
					@numlen = numlen, 
					@welcomebonus = welcomebonus, 
					@bonustofriend = bonustofriend, 
					@bonusforfriend = bonusforfriend, 
					@welcomebonuslku = welcomebonuslku, 
					@activationlink = activationlink 
				FROM 
					operator 
				WHERE 
					name = ''Оператор''
				IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Не задан идентификатор Партнера, отсутствует Оператор по умолчанию'' RETURN (7) END
			END
	END 
	ELSE 
	BEGIN
		SELECT 
			@operator = id, 
			@prefix = prefix, 
			@numlen = numlen, 
			@welcomebonus = welcomebonus, 
			@bonustofriend = bonustofriend, 
			@bonusforfriend = bonusforfriend, 
			@welcomebonuslku = welcomebonuslku, 
			@activationlink = activationlink 
		FROM 
			operator 
		WHERE 
			id = @operator
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Неверно задан идентификатор Оператора ПЛ'' RETURN(8) END
		IF @cardoperator IS NOT NULL -- проверяем на совпадение заданного оператора партнера и оператора заданной карты
			IF @operator != @cardoperator BEGIN SET @errormessage = ''Не совпадают оператор карты и заданный оператор'' RETURN (6) END
	END
	IF @card IS NULL BEGIN -- карта не задана - находим для клиента первую свободную виртуальную карту
		SELECT @card = MIN(number) FROM card WHERE operator = @operator AND virtual = 1 AND free = 1
		IF @card IS NULL BEGIN SET @errormessage = ''Не найдены свободные виртуальные карты'' RETURN(9) END
		SET @virtual = 1
	END ELSE BEGIN
		SET @maxlocal = POWER(@base10, @numlen - LEN(@prefix))
		IF @cardoperator IS NULL -- номер карты был задан не полностью, формируем глобальный номер из локального
			IF @prefix IS NOT NULL AND @numlen IS NOT NULL
				SET @card = @prefix * @maxlocal + @card%@maxlocal
		SELECT @client = client FROM card WHERE number = @card
		IF @@ROWCOUNT = 0 BEGIN SET @errormessage = ''Заданный номер карты не существует'' RETURN(10) END
		IF @client IS NOT NULL BEGIN SET @errormessage = ''Заданный номер карты уже привязан к Клиенту'' RETURN(11) END
	END
	SELECT @client = client FROM phone WHERE number = @phone -- смотрим, есть ли уже клиент по заданному номеру телефона
	IF @client IS NULL BEGIN -- клиент еще не создан
		INSERT INTO client (status) VALUES (0)
		SET @client = SCOPE_IDENTITY()
		UPDATE phone SET client = @client WHERE number = @phone -- и привязываем к нему телефон
	END
	SET @pos = (SELECT id FROM pos WHERE code = @poscode AND partner = @partner)
	SELECT @cardoperator = operator FROM clientoperator WHERE client = @client AND operator = @operator
	IF @@ROWCOUNT > 0 BEGIN
		IF @virtual = 1 BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть виртуальная карта данного Оператора'' RETURN(12) END
		ELSE BEGIN SET @card = NULL SET @errormessage = ''У Клиента уже есть пластиковая карта данного Оператора'' RETURN(13) END
	END
	INSERT INTO clientoperator (client, operator, pos, agreepersonaldata, phone) VALUES (@client, @operator, @pos, @agreepersonaldata, @phone) -- добавляем информацию клиента для определенного оператора
	UPDATE card SET client = @client, free = 0 WHERE number = @card -- привязываем карту к клиенту
	DECLARE @last6 INT, @last4 SMALLINT, @middle2 TINYINT
	SET @last6 = @phone%1000000 SET @last4 = @last6%10000 SET @middle2 = FLOOR((@last6%1000000)/10000)
	SELECT @last4 = last4 FROM phoneend WHERE operator = @operator AND last4 = @last4 AND middle2 = @middle2
	IF @@ROWCOUNT = 0 INSERT INTO phoneend (operator, last4, middle2, card) VALUES (@operator, @last4, @middle2, @card) -- добавляем окончание телефона в связи с оператором
	IF @reglku IS NOT NULL SET @welcomebonus = @welcomebonuslku
	IF @welcomebonus = 0 SET @welcomebonus = NULL
	IF @welcomebonus IS NOT NULL BEGIN
		EXEC BonusAdd @card = @card, @operator = @operator, @bonus = @welcomebonus, @source = 4
		EXEC ClientNotificationBonus @phone = @phone, @operator = @operator, @added = @welcomebonus, @welcomebonus = 1, @errormessage = @errormessage OUTPUT
	END
	SELECT @clientsetpasswordOperator = setclientpassword FROM operator WHERE id = @operator
	SELECT @clientsetpasswordPartner = setclientpassword FROM partner WHERE id = @partner
	SELECT @clientsetpasswordPos = setclientpassword FROM pos WHERE id = @pos
	IF @clientsetpassword = 1 AND @clientsetpasswordOperator = 1 AND @clientsetpasswordPartner = 1 AND @clientsetpasswordPos = 1
	BEGIN
		EXEC ClientSetSendPassword @phone = @phone, @operator = @operator, @client = @client, @errormessage = @errormessage OUTPUT
	END
	IF @email IS NOT NULL
	BEGIN
		EXEC @result = ClientAddEmail @client = @client, @email = @email, @errormessage = @errormessage OUTPUT, @novalidated = 1, @operator = @operator
	END
	IF @friend IS NOT NULL BEGIN
		SELECT 0
		IF @friend >= 9000000000 AND @friend < 10000000000 SET @friendphone = @friend ELSE SET @friendcard = @friend
		EXECUTE @result = Identify @phone = @friendphone, @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
		IF NOT @result = 0 BEGIN
			SET @friendclient = @friend
			EXECUTE @result = Identify @card = @friendcard OUTPUT, @client = @friendclient OUTPUT, @operator = @operator OUTPUT, @errormessage = @errormessage OUTPUT
			IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
		END
		IF @result = 0 BEGIN
			IF @bonustofriend = 0 SET @bonustofriend = NULL
			IF @bonustofriend IS NOT NULL AND @friendcard IS NOT NULL BEGIN
				SELECT @friendphone = cr.phone FROM card AS cd INNER JOIN clientoperator AS cr ON cd.operator = cr.operator AND cd.client = cr.client WHERE cd.number = @friendcard
				EXEC @result = BonusAdd @card = @friendcard, @bonus = @bonustofriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
				ELSE EXEC ClientNotificationBonus @phone = @friendphone, @operator = @operator, @added = @bonustofriend, @friendbonus = 1, @errormessage = @errormessage OUTPUT
			END
			IF @bonusforfriend = 0 SET @bonusforfriend = NULL
			IF @bonusforfriend IS NOT NULL BEGIN
				EXEC @result = BonusAdd @card = @card, @bonus = @bonusforfriend, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
				IF NOT @result = 0 SET @errormessage = @errormessage + '' (друг)''
			END
		END
	END
	IF @promocode IS NOT NULL
	BEGIN
		DECLARE @promobonusclient NUMERIC(9,2) = NULL
		SELECT @promobonusclient = promobonusclient FROM operator WHERE id = @operator
		EXEC @result = BonusAdd @card = @card, @bonus = @promobonusclient, @operator = @operator, @errormessage = @errormessage OUTPUT, @source = 5
		IF @result <> 0 SET @errormessage = @errormessage + '' (промокод)''
		UPDATE clientoperator SET promocodefriend = @promocode WHERE client = @client AND operator = @operator
	END
	RETURN (0)'

	--Добавлено. Процедура добавления карт оператору
	IF OBJECT_ID('[dbo].[OperatorAddCards]') IS NOT NULL DROP PROCEDURE [dbo].[OperatorAddCards]
	EXEC sp_executesql @statement = N'create procedure OperatorAddCards
		@operator smallint = NULL,
		@operatorCardPrefix smallint = NULL,
		@operatorCardNumlen tinyint = NULL,
		@operatorCardVirtual bit = NULL,
		@operatorCardQty int = NULL,
		@operatorCardNumType nvarchar(10) = NULL,
		@errormessage nvarchar(100) = NULL OUTPUT
	as
	begin		
		if not exists(select id from operator where id = @operator)
		begin
			set @errormessage = N''Не найден указанный оператор''
			return(1)
		end
		declare @lastcard bigint = NULL,
				@operatorname nvarchar(20) = NULL,
				@return_value int = NULL,
				@first bigint = NULL,
				@i int = 0

		select @operatorname = name from operator where id = @operator
		declare @cards as table
				(
					number bigint,
					operator smallint,
					fullbalance numeric(9,2),
					balance numeric(9,2),
					purchases smallint,
					purchasesum numeric(9,2),
					charged numeric(9,2),
					redeemed numeric(9,2)
				)

		if not exists(select number from card where operator = @operator)
		begin
			if(@operatorCardNumType = N''ean13'')
			begin
				EXEC @return_value = [dbo].[Cards]
					@length = 13,
					@control = 1,
					@prefix = @operatorCardPrefix,
					@amount = @operatorCardQty,
					@first = @first OUTPUT,
					@write = 1,
					@virtual = @operatorCardVirtual,
					@operator = @operatorname,
					@errormessage = @errormessage OUTPUT
				if @errormessage is not null
				begin
					return(@return_value)
				end
			end
			else if(@operatorCardNumType = N''ean8'')
			begin
				EXEC @return_value = [dbo].[Cards]
					@length = 8,
					@control = 1,
					@prefix = @operatorCardPrefix,
					@amount = @operatorCardQty,
					@first = @first OUTPUT,
					@write = 1,
					@virtual = @operatorCardVirtual,
					@operator = @operatorname,
					@errormessage = @errormessage OUTPUT
				if @errormessage is not null
				begin
					return(@return_value)
				end
			end
			else
			begin				
				while @i < @operatorcardqty
				begin
					set @i += 1
					insert into @cards 
					(
						number
						,operator
						,fullbalance
						,balance
						,[purchases]
						,[purchasesum]
						,[charged]
						,[redeemed]
					) 
					select 
						@operatorCardPrefix * POWER(10, @operatorCardNumlen - LEN(cast(@operatorCardPrefix as nvarchar(10)))) + @i, 
						@operator, 
						0, 0, 0, 0, 0, 0
				end

				insert into card([number]
					  ,[operator]
					  ,[fullbalance]
					  ,[balance]
					  ,[purchases]
					  ,[purchasesum]
					  ,[charged]
					  ,[redeemed]
					  ,[free]
					  ,[virtual])
					select [number]
					  ,[operator]
					  ,[fullbalance]
					  ,[balance]
					  ,[purchases]
					  ,[purchasesum]
					  ,[charged]
					  ,[redeemed]
					  ,1
					  ,@operatorCardVirtual
					 from @cards
			end
		end
		else
		begin
			set @lastcard = (select max(number) from card where operator = @operator)
			if(@operatorCardNumType = N''ean13'')
			begin
				EXEC @return_value = [dbo].[Cards]
					@length = 13,
					@control = 1,
					@prefix = @operatorCardPrefix,
					@amount = @operatorCardQty,
					@first = @lastcard OUTPUT,
					@write = 1,
					@virtual = @operatorCardVirtual,
					@operator = @operatorname,
					@errormessage = @errormessage OUTPUT
				if @errormessage is not null
				begin
					return(@return_value)
				end
			end
			else if(@operatorCardNumType = N''ean8'')
			begin
				EXEC @return_value = [dbo].[Cards]
					@length = 8,
					@control = 1,
					@prefix = @operatorCardPrefix,
					@amount = @operatorCardQty,
					@first = @lastcard OUTPUT,
					@write = 1,
					@virtual = @operatorCardVirtual,
					@operator = @operatorname,
					@errormessage = @errormessage OUTPUT
				if @errormessage is not null
				begin
					return(@return_value)
				end
			end
			else
			begin		
				set @i = (@lastcard % (POWER(10, @operatorCardNumlen - LEN(cast(@operatorCardPrefix as nvarchar(10))))))
				declare @j int = 0		
				while @j < @operatorcardqty
				begin
					set @i += 1
					set @j += 1
					insert into @cards 
					(
						number
						,operator
						,fullbalance
						,balance
						,[purchases]
						,[purchasesum]
						,[charged]
						,[redeemed]
					) 
					select 
						@operatorCardPrefix * POWER(10, @operatorCardNumlen - LEN(cast(@operatorCardPrefix as nvarchar(10)))) + @i, 
						@operator, 
						0, 0, 0, 0, 0, 0
				end

				insert into card([number]
					  ,[operator]
					  ,[fullbalance]
					  ,[balance]
					  ,[purchases]
					  ,[purchasesum]
					  ,[charged]
					  ,[redeemed]
					  ,[free]
					  ,[virtual])
					select [number]
					  ,[operator]
					  ,[fullbalance]
					  ,[balance]
					  ,[purchases]
					  ,[purchasesum]
					  ,[charged]
					  ,[redeemed]
					  ,1
					  ,@operatorCardVirtual
					 from @cards
			end
		end
		return(0)
	end'
END ELSE IF @version = 399 BEGIN
	SELECT '3.100 20180602 Юсупов'
	
	--Изменено. Процедура расчета аналитики. Изменен раздел рассчета бонусов
	IF OBJECT_ID('[dbo].[CalcAnalytics]') IS NOT NULL DROP PROCEDURE [dbo].[CalcAnalytics]
	EXEC sp_executesql @statement = N'
		Create PROCEDURE [dbo].[CalcAnalytics]
		@calcDay DATE = NULL,
		@beginDate DATE = NULL,
		@endDate DATE = NULL,
	
		@errormessage NVARCHAR(100) = NULL OUTPUT
		AS SET NOCOUNT ON
		DECLARE 
			@day DATE = NULL,
			@operator SMALLINT = NULL,
			@partner SMALLINT = NULL,
			@pos SMALLINT = NULL,

			/*Структура клиентской базы*/
			@menCnt INT = 0,
			@womenCnt INT = 0,
			@unknownGenderCnt INT = 0,
			@clientsWithBuysCnt INT = 0,
			@clientsWithoutBuysCnt INT = 0,
			@clientsWithTenBuysCnt INT = 0,
			@clientsWithOneBuysCnt INT = 0,
			@clientsWithPhoneCnt INT = 0,
			@clientsWithEmailCnt INT = 0,
			/*END Структура клиентской базы*/

			/*Активность клиентской базы*/
			@womenBuys NUMERIC(19,2) = 0,
			@menBuys NUMERIC(19,2) = 0,
			@unknownGenderBuys NUMERIC(19,2) = 0,
			@repeatedBuys NUMERIC(19,2) = 0,
			@buysOnClient NUMERIC(19,2) = 0,
			--@clientsQty INT = 0,
			@clientActiveQty INT = 0,
			@gain NUMERIC(19,2) = 0,
			@gainBuys NUMERIC(19,2),
			@gainRefund NUMERIC(19,2),
			@avgCheque NUMERIC(19,2) = 0,
			@buysWeekdays INT = 0,
			@buysWeekOff INT = 0,
			@buyWeekdaySum NUMERIC(19,2), @buyWeekOffAmount NUMERIC(19,2), @chequeSum NUMERIC(19,2),  @buyWeekdayQty NUMERIC(19,2), @buyWeekoffQty NUMERIC(19,2), @buyQty NUMERIC(19,2),
			/*END Активность клиентской базы*/

			/*Сегментация по возрасту*/
			@clients INT = 0,
			@less25 INT = 0,
			@more25less35 INT = 0,
			@more35less45 INT = 0,
			@more45 INT = 0,
			@unknown INT = 0,
			@withBirthDate INT = 0,
			@withoutBirthDate INT = 0,
			/*END Сегментация по возрасту*/

			/*БОНУСЫ*/
			@addedBonus NUMERIC(19,2) = 0,
			@avgCharge NUMERIC(19,2) = 0,
			@redeemedBonus NUMERIC(19,2) = 0,
			@avgRedeem NUMERIC(19,2) = 0,
			@avgBalance NUMERIC(19,2) = 0,
			@avgDiscount NUMERIC(19,2) = 0,
			@addedBonusQty INT = 0, 
			@redeemedBonusQty INT = 0
			/*END БОНУСЫ*/
		BEGIN
			set @day = CONVERT (date, GETDATE());
			IF (@calcDay IS NOT NULL) set @day=CONVERT(date, @calcDay);
			if (@beginDate IS NULL) set @beginDate = @day
			if (@endDate IS NULL) set @endDate = DATEADD(dd,1,@day)

			--DELETE FROM reganalytics where [date] = @day
		
			BEGIN TRY /*Расчет итогов по оператору*/
				DECLARE Operator_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id FROM operator --where id = 6

				OPEN Operator_Cursor
				FETCH NEXT FROM Operator_Cursor INTO @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator WHERE gender = 1 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator and regdate>=@beginDate and regdate<@endDate) t3

						-- клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number
							--LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE
							cr.regdate>=@beginDate and cr.regdate<@endDate
							AND cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							--AND ce2.id IS NULL;	


						-- клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							ce.id IS NULL
							--OR (
							--	(ce.refund = 0 OR ce.refund IS NULL) 
							--	AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
							--	AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							--))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
								--LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
							WHERE
								cr.regdate>=@beginDate and cr.regdate<@endDate								
								AND cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								--AND ce2.id IS NULL	
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1

						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number
								--LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
							WHERE
								cr.operator = @operator
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								--AND ce2.id IS NULL	
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл					
						SELECT 
							@clientsWithPhoneCnt = COUNT(DISTINCT client) 
						FROM clientoperator 
						WHERE operator = @operator AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						
						SELECT 
							@clientsWithEmailCnt = COUNT(DISTINCT client) 
						FROM clientoperator cr 
						JOIN client c on c.id = cr.client 
						WHERE operator = @operator AND (cr.email IS NOT NULL OR c.email IS NOT NULL) AND cr.regdate>=@beginDate and cr.regdate<@endDate;
						
					END /*Окончание блока "Структура клиентской базы*/
				
					BEGIN /* Начало блока "Активность клиентской базы" */

						--Покупок на женщин,мужчин и без пола
						select @womenBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN clientoperator cr ON cr.operator=@operator AND cr.gender = 0
							INNER JOIN card cd ON ce.card=cd.number AND cd.operator = cr.operator AND cr.client = cd.client
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;							

						select @menBuys = COALESCE(sum(ce.amount  - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN clientoperator cr ON cr.operator=@operator AND cr.gender = 1
							INNER JOIN card cd ON ce.card=cd.number AND cd.operator = cr.operator AND cr.client = cd.client
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;

						select @unknownGenderBuys = COALESCE(sum(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN clientoperator cr ON cr.operator=@operator AND cr.gender IS NULL
							INNER JOIN card cd ON ce.card=cd.number AND cd.operator = cr.operator AND cr.client = cd.client
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;


						--SELECT
						--	@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
						--	@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
						--	@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON ce.card = cd.number
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;


						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT * FROM (
								SELECT 
									ce.id, 
									ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
								FROM
									cheque AS ce
									INNER JOIN card AS cd ON ce.card = cd.number
									LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
								WHERE
									cd.operator = @operator
									AND (ce.refund IS NULL OR ce.refund = 0)
									AND (ce.cancelled IS NULL OR ce.cancelled = 0)
									AND ce2.id IS NULL
							) as t where t.rownum != 1							
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate
							LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1 
							INNER JOIN cheques ce3 ON ce3.id = ce.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce2.id IS NULL

						--SELECT
						--	@clientsQty = COUNT(DISTINCT cr.client)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON cd.number = ce.card
						--WHERE
						--	cr.operator = @operator				
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END
						---
												
						--SET @clientActiveQty = 
						--	(SELECT 
						--		COUNT(DISTINCT cr.client) 
						--	FROM 
						--		clientoperator AS cr
						--		INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--		INNER JOIN cheque AS ce ON cd.number = ce.card AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--		LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1 
						--	WHERE 
						--		cr.operator = @operator
						--		AND (ce.refund IS NULL OR ce.refund = 0)
						--		AND ce2.id IS NULL
						--		--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--		--AND cr.regdate>=@beginDate and cr.regdate<@endDate
						--	);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque c
							INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator
						WHERE 
							--partner IN (SELECT id FROM partner WHERE operator = @operator)
							proctime>=@beginDate AND proctime<@endDate
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL);

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque c
							INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator
						WHERE
							--partner IN (SELECT id FROM partner WHERE operator = @operator)
							proctime>=@beginDate AND proctime<@endDate
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (cancelled IS NULL OR cancelled = 0) 
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner IN (SELECT id FROM partner WHERE operator = @operator)
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator) 
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner IN (SELECT id FROM partner WHERE operator = @operator)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
					END /*Окончание блока "Активность клиентской базы"*/	
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND regdate>=@beginDate AND regdate<@endDate);
					
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND regdate>=@beginDate AND regdate<@endDate);

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/		

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus b
							--left join cheque c ON c.refund = 1 AND c.id = b.cheque
						WHERE 
							operator = @operator 
							--AND bonus > 0
							AND b.refund IS NOT NULL 
							--AND (b.refund = 0 OR b.refund IS NULL)
							--AND (c.id IS NULL OR b.cheque IS NULL)
							AND b.proctime>=@beginDate and b.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus 
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND (cheque IS NOT NULL OR source = 1) 
							AND (refund = 0 OR refund IS NULL)
							--AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
							AND proctime>=@beginDate and proctime<@endDate;							

						--Кол-во начислений
						SET @addedBonusQty = (SELECT 
													COUNT(id) 
												FROM 
													bonus b
												WHERE 
													operator = @operator 
													--AND bonus > 0
													AND b.refund IS NOT NULL 
													--AND (b.refund = 0 OR b.refund IS NULL)
													--AND (c.id IS NULL OR b.cheque IS NULL)
													AND b.proctime>=@beginDate and b.proctime<@endDate
												);
					
						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(id) 
											FROM 
												bonus 
											WHERE 
												operator = @operator 
												AND bonus < 0 
												AND (cheque IS NOT NULL OR source = 1) 
												AND (refund = 0 OR refund IS NULL)
												--AND (cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1) OR cheque IS NULL)
												AND proctime>=@beginDate and proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator AND cr.regdate>=@beginDate AND cr.regdate<@endDate)/@clients
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END


					END /*Окончание блока "БОНУСЫ*/


					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men, women,unknown, with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] IS NULL AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)      
						VALUES(
							@calcDay, @operator, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt, @clientsWithoutBuysCnt, @clientsWithTenBuysCnt, @clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt,
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Operator_Cursor INTO @operator
				END
				CLOSE Operator_Cursor
				DEALLOCATE Operator_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору''
				RETURN (1)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			--set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/

			BEGIN TRY /*Расчет итогов по оператору и партнеру*/
				DECLARE Partner_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT DISTINCT id, operator FROM partner --where operator = 6

				OPEN Partner_Cursor
				FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/

						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) and regdate>=@beginDate and regdate<@endDate) t3
			
						--клиенты с покупками
						SELECT @clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = p.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;
							--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
							--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)

						--клиенты без покупок
						SELECT @clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							ce.id IS NULL
							--OR (
							--	(ce.refund = 0 OR ce.refund IS NULL) 
							--	AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
							--	AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							--))
							AND cr.operator = @operator
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;
							--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM
							(SELECT
								cd.number
							FROM
								clientoperator AS cr			
								INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner					
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = p.id
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1								
				
						--клиенты с 1 покупкой	
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner	
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = p.id
							WHERE
								cr.operator = @operator
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						
						SELECT 
							@clientsWithEmailCnt = COUNT(DISTINCT client) 
						FROM clientoperator cr 
						JOIN client c on c.id = cr.client 
						JOIN pos AS p ON p.id = cr.pos AND p.partner = @partner
						WHERE operator = @operator AND pos = @pos AND (cr.email IS NOT NULL OR c.email IS NOT NULL) AND cr.regdate>=@beginDate and cr.regdate<@endDate;
					


					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						select @womenBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN pos AS p ON p.id = ce.pos AND p.partner = @partner
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 0 AND cr.pos = p.id
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);

						select @menBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN pos AS p ON p.id = ce.pos AND p.partner = @partner
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 1  AND cr.pos = p.id
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);

						select @unknownGenderBuys =COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN pos AS p ON p.id = ce.pos AND p.partner = @partner
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender IS NULL AND cr.pos = p.id
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL;
							--AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner);
							
						--SELECT
						--	@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
						--	@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
						--	@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON ce.card = cd.number
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT * FROM (
								SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN pos p ON p.partner = @partner AND ce.pos = p.id
								INNER JOIN card AS cd ON ce.card = cd.number AND ce.pos = p.id
								LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce2.id IS NULL
							) as t where t.rownum != 1
							
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate
							INNER JOIN pos p ON p.partner = @partner AND ce.pos=p.id
							LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							INNER JOIN cheques ce3 ON ce3.id = ce.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce2.id IS NULL

						--SELECT
						--	@clientsQty = COUNT(DISTINCT cr.client)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON cd.number = ce.card
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.pos IN (SELECT id FROM pos WHERE partner = @partner)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--SET @clientActiveQty = 
						--	(SELECT 
						--		COUNT(DISTINCT cr.client) 
						--	FROM 
						--		clientoperator AS cr 
						--		INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--		INNER JOIN pos p ON p.partner = @partner
						--		INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate AND ce.pos=p.id
						--		LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
						--	WHERE 
						--		cr.operator = @operator 
						--		AND (ce.refund IS NULL OR ce.refund = 0)
						--		AND ce2.id IS NULL
						--	);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND (refund = 0 OR refund IS NULL)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							partner = @partner
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;
						

						--Покупка в будни и выходные
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND ce.proctime>=@beginDate AND ce.proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner 
						--	AND (refund IS NULL OR refund = 0) 
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END

					END /*Окончание блока "Активность клиентской базы"*/
				
					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			
						--С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
					
						--БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos IN (SELECT id FROM pos WHERE partner = @partner) AND regdate>=@beginDate AND regdate<@endDate);
			

						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos IN (SELECT id FROM pos WHERE partner = @partner)
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/

					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							--AND bs.bonus > 0 
							AND ce.partner = @partner
							--AND (bs.refund = 0 OR bs.refund IS NULL)
							AND bs.refund IS NOT NULL
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							AND (bs.refund = 0 OR bs.refund IS NULL)
							--AND bs.refund IS NULL
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;					

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
										WHERE 
											bs.operator = @operator 
											--AND bs.bonus > 0 
											AND ce.partner = @partner
											--AND (bs.refund = 0 OR bs.refund IS NULL)
											AND bs.refund IS NOT NULL
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
											WHERE 
												operator = @operator 
												AND bonus < 0 
												AND ce.partner = @partner
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												--AND bs.refund IS NULL
												AND (ce.cancelled IS NULL OR ce.cancelled = 0)
												--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--					SELECT 
						--						SUM(cd.fullbalance) 
						--					FROM 
						--						clientoperator AS cr 
						--						INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--					WHERE 
						--						cr.operator = @operator 
						--						AND cr.regdate>=@beginDate AND cr.regdate<@beginDate
						--				)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/
					
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)        
						VALUES(
							@day, @operator, @partner,
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos IS NULL;

						INSERT INTO reganalytics(
							[date],operator,[partner],
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)       
						VALUES(
							@calcDay, @operator, @partner, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Partner_Cursor INTO @partner, @operator
				END
				CLOSE Partner_Cursor
				DEALLOCATE Partner_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору и партнеру''
				RETURN (2)
			END CATCH

			/*Зануляем показателия для следующего блока расчетов*/
			set @menCnt = 0
			set @womenCnt = 0
			set @unknownGenderCnt = 0
			set @clientsWithBuysCnt = 0
			set @clientsWithoutBuysCnt = 0
			set @clientsWithTenBuysCnt = 0
			set @clientsWithOneBuysCnt = 0
			set @clientsWithPhoneCnt = 0
			set @clientsWithEmailCnt = 0

			set @womenBuys = 0
			set @menBuys = 0
			set @unknownGenderBuys = 0
			set @repeatedBuys = 0
			set @buysOnClient = 0
			--set @clientsQty = 0
			set @clientActiveQty = 0

			set @clients = 0
			set @less25 = 0
			set @more25less35 = 0
			set @more35less45 = 0
			set @more45 = 0
			set @unknown = 0

			set @addedBonus  = 0
			set @addedBonusQty = 0
			set @avgCharge  = 0
			set @redeemedBonus  = 0
			set @redeemedBonusQty = 0
			set @avgRedeem  = 0
			set @avgBalance  = 0
			set @avgDiscount  = 0
			set @addedBonusQty = 0
			set @redeemedBonusQty =0
			/*END*/


			BEGIN TRY /*Расчет итогов по оператору, партнеру и торговой точке*/
				DECLARE Pos_Cursor CURSOR 
				LOCAL STATIC READ_ONLY FORWARD_ONLY
				FOR 
					SELECT  pos.id, pos.partner, p.operator from pos pos join partner p on p.id=pos.partner --AND p.operator = 6
				
				OPEN Pos_Cursor
				FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator
				WHILE @@FETCH_STATUS = 0
				BEGIN 
					BEGIN /*Начало блока "Структура клиентской базы"*/
					
						-- Кол-во мужчин, женщин, без пола
						SELECT @menCnt = t1.cnt, @womenCnt = t2.cnt, @unknownGenderCnt = t3.cnt
						FROM 
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 1 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t1,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender = 0 and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t2,
							(SELECT COUNT(*) as cnt FROM clientoperator where gender is NULL and operator = @operator AND pos = @pos and regdate>=@beginDate and regdate<@endDate) t3

						--клиенты с покупками
						SELECT
							@clientsWithBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = @pos
						WHERE
							cr.regdate>=@beginDate and cr.regdate<@endDate
							AND cr.operator = @operator							
							AND cr.pos = @pos
							AND (ce.refund IS NULL OR ce.refund = 0)
							--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							--AND cr.pos = @pos
							--AND ce.pos = @pos							

						--клиенты без покупок
						SELECT
							@clientsWithoutBuysCnt = COUNT(DISTINCT cd.number)
						FROM
							clientoperator AS cr
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							LEFT JOIN cheque AS ce ON ce.card = cd.number
						WHERE
							ce.id IS NULL
							--OR (
							--	(ce.refund = 0 OR ce.refund IS NULL) 
							--	AND ce.id IN (SELECT cheque FROM cheque WHERE refund = 1)
							--	AND (SELECT COUNT(id) FROM cheque WHERE card = cd.number and (refund = 0 OR refund IS NULL)) = (SELECT COUNT(id) FROM cheque WHERE card = cd.number AND refund = 1)
							--))
							AND cr.operator = @operator
							AND cr.pos = @pos
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--с более 10 покупками
						SELECT @clientsWithTenBuysCnt = COUNT(*)
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = @pos
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND ce.pos = @pos
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) >= 10) as t1
						
						--клиенты с 1 покупкой
						SELECT @clientsWithOneBuysCnt = COUNT(*) 
						FROM 
							(SELECT
								cd.number
							FROM
								clientoperator AS cr
								INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
								INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.pos = @pos
							WHERE
								cr.operator = @operator
								AND cr.pos = @pos
								AND (ce.refund = 0 OR ce.refund IS NULL)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND cr.regdate>=@beginDate and cr.regdate<@endDate
								--AND ce.pos = @pos
								--AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							GROUP BY
								cd.number
							HAVING
								COUNT(ce.id) = 1) as t1

						-- клиентов с телефонами и емайл
						SELECT @clientsWithPhoneCnt = COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND phone IS NOT NULL AND regdate>=@beginDate and regdate<@endDate;
						
						SELECT 
							@clientsWithEmailCnt = COUNT(DISTINCT client) 
						FROM clientoperator cr 
						JOIN client c on c.id = cr.client 
						WHERE operator = @operator AND pos = @pos AND (cr.email IS NOT NULL OR c.email IS NOT NULL) AND cr.regdate>=@beginDate and cr.regdate<@endDate;
					
					END /*Окончание блока "Структура клиентской базы"*/

					BEGIN /*Начало блока "Активность клиентской базы"*/

						--Покупок на женщин,мужчин и без пола
						select @womenBuys =  COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 0
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							AND ce.pos = @pos;

						select @menBuys =  COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender = 1
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							AND ce.pos = @pos;

						select @unknownGenderBuys =  COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0) from cheque ce
							INNER JOIN card cd ON ce.card=cd.number
							INNER JOIN clientoperator cr ON cr.client=cd.client AND cr.operator=@operator AND cr.gender IS NULL
							LEFT JOIN cheque ce2 ON ce2.cheque=ce.id and ce2.refund = 1
						WHERE ce.proctime>=@beginDate AND ce.proctime<@endDate
							AND (ce.refund IS NULL OR ce.refund = 0) 
							AND (ce.cancelled IS NULL OR ce.cancelled = 0) 
							AND ce2.id IS NULL
							AND ce.pos = @pos;


						--SELECT
						--	@womenBuys = COALESCE(SUM(CASE WHEN cr.gender = 0 THEN ce.amount ELSE 0 END), 0),
						--	@menBuys = COALESCE(SUM(CASE WHEN cr.gender = 1 THEN ce.amount ELSE 0 END), 0),
						--	@unknownGenderBuys = COALESCE(SUM(CASE WHEN cr.gender IS NULL THEN ce.amount ELSE 0 END), 0)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON ce.card = cd.number
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND ce.id NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
						--	AND ce.pos = @pos
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--Повторные покупки и покупок на клиента
						WITH cheques AS
						(
							SELECT * FROM (
								SELECT 
								ce.id, 
								ROW_NUMBER() OVER(PARTITION BY ce.card ORDER BY ce.proctime) AS rownum
							FROM
								cheque AS ce
								INNER JOIN pos p ON p.partner = @partner AND p.id = @pos AND p.id = ce.pos
								INNER JOIN card AS cd ON ce.card = cd.number
								LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							WHERE
								cd.operator = @operator
								AND (ce.refund IS NULL OR ce.refund = 0)
								AND (ce.cancelled IS NULL OR ce.cancelled = 0)
								AND ce2.id IS NULL
							) as t WHERE t.rownum != 1
						)
						SELECT
							@repeatedBuys = COALESCE(SUM(ce.amount - COALESCE(ABS(ce.paidbybonus), 0)), 0)
						FROM
							clientoperator AS cr 
							INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
							INNER JOIN cheque AS ce ON ce.card = cd.number  AND ce.proctime>=@beginDate AND ce.proctime<@endDate
							INNER JOIN pos p ON p.partner = @partner AND p.id = @pos AND ce.pos=p.id
							LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
							INNER JOIN cheques ce3 ON ce3.id = ce.id
						WHERE
							cr.operator = @operator
							AND (ce.refund IS NULL OR ce.refund = 0)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND ce2.id IS NULL

						--SELECT
						--	@clientsQty = COUNT(DISTINCT cr.client)
						--FROM
						--	clientoperator AS cr
						--	INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--	INNER JOIN cheque AS ce ON cd.number = ce.card
						--WHERE
						--	cr.operator = @operator
						--	AND (ce.cancelled IS NULL OR ce.cancelled = 0)
						--	AND (ce.refund IS NULL OR ce.refund = 0)
						--	AND ce.pos = @pos
						--	AND ce.id NOT IN (SELECT cheque FROM cheque where refund = 1 AND pos = @pos)
						--	AND cr.regdate>=@beginDate and cr.regdate<@endDate;

						--SET @clientActiveQty = 
						--	(SELECT 
						--		COUNT(DISTINCT cr.client) 
						--	FROM 
						--		clientoperator AS cr 
						--		INNER JOIN card AS cd ON cr.client = cd.client AND cr.operator = cd.operator
						--		INNER JOIN pos p ON p.partner = @partner AND p.id = @pos
						--		INNER JOIN cheque AS ce ON ce.card = cd.number AND ce.proctime>=@beginDate AND ce.proctime<@endDate AND ce.pos=p.id
						--		LEFT JOIN cheque ce2 ON ce2.cheque = ce.id and ce2.refund = 1
						--	WHERE 
						--		cr.operator = @operator 
						--		AND (ce.refund IS NULL OR ce.refund = 0)
						--		AND ce2.id IS NULL
						--	);

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--IF (@clientsQty > 0)
						--BEGIN
						--	SET @buysOnClient = (@womenBuys + @menBuys + @unknownGenderBuys)/@clientsQty
						--END
						--ELSE
						--BEGIN
						--	SET @buysOnClient = 0
						--END

						/*Считается в GetAnalyticClientBaseActive при данных за период*/
						--Средний чек
						--SELECT 			
						--	@avgCheque = COALESCE(AVG(amount), 0)
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund = 0 OR refund IS NULL)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;

						--Выручка
						SELECT 
							@gainBuys = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM 
							cheque 
						WHERE 
							pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND (refund = 0 OR refund IS NULL)
							AND proctime>=@beginDate AND proctime<@endDate;

						SELECT
							@gainRefund = COALESCE(SUM(ABS(amount) - COALESCE(ABS(paidbybonus), 0)), 0)
						FROM
							cheque
						WHERE
							--partner = @partner
							pos = @pos
							AND (cancelled IS NULL OR cancelled = 0)
							AND refund = 1
							AND proctime>=@beginDate AND proctime<@endDate;

						SET @gain = @gainBuys - @gainRefund;

						--Покупки в выходные и будни
						--WITH cte AS
						--(
						--	SELECT	
						--		SUM(ce.amount) AS chequeSum,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT	
						--	@buyWeekdaySum = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekOffAmount = (SELECT COALESCE(SUM(cte.chequesum), 0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));

						--WITH cte AS
						--(
						--	SELECT
						--		COUNT(id) chequeQty,
						--		DATEPART(WEEKDAY, ce.proctime) AS dayweek
						--	FROM
						--		cheque AS ce
						--	WHERE 
						--		partner = @partner
						--		AND pos = @pos
						--		AND (refund = 0 OR refund IS NULL)
						--		AND (cancelled IS NULL OR cancelled = 0)
						--		AND proctime>=@beginDate AND proctime<@endDate
						--	GROUP BY
						--		DATEPART(WEEKDAY, ce.proctime)
						--)
						--SELECT
						--	@buyWeekdayQty = (SELECT COALESCE(SUM(cte.chequeQty), 0) FROM cte WHERE dayweek >= 2 AND dayweek <= 6),
						--	@buyWeekoffQty = (SELECT COALESCE(SUM(cte.chequeQty) ,0) FROM cte WHERE (dayweek = 1 OR dayweek = 7));


						--SELECT 
						--	@buyQty = COUNT(id) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (refund IS NULL OR refund = 0)
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;;

						--SELECT 
						--	@chequeSum = COALESCE(SUM(amount), 0) 
						--FROM 
						--	cheque 
						--WHERE 
						--	partner = @partner
						--	AND pos = @pos
						--	AND (cancelled IS NULL OR cancelled = 0)
						--	AND proctime>=@beginDate AND proctime<@endDate;


						--IF(@buyQty > 0)
						--BEGIN
						--	SET @buysWeekdays = ROUND((@buyWeekdayQty/@buyQty)*100, 0);
						--	SET @buysWeekOff = ROUND((@buyWeekoffQty/@buyQty)*100, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @buysWeekdays = 0;
						--	SET @buysWeekOff = 0;
						--END
						----


					END /*Окончание блока "Активность клиентской базы"*/

					BEGIN /*Начало блока "Сегментация по возрасту"*/

						--Общее количество клиентов
						SET @clients = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);			

						-- С ДР
						SET @withBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND birthdate IS NOT NULL AND birthdate <> ''1900-01-01'' AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						-- БЕЗ ДР
						SET @withoutBirthDate = (SELECT COUNT(DISTINCT client) FROM clientoperator WHERE operator = @operator AND (birthdate IS NULL OR birthdate = ''1900-01-01'') AND pos = @pos AND regdate>=@beginDate AND regdate<@endDate);
					
						--Количество по возрастам
						SELECT
							@less25 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more25less35 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*25, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*35, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more35less45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*35, GETDATE()) >= birthdate AND DATEADD(YEAR, (-1)*45, GETDATE()) < birthdate THEN 1 ELSE 0 END),0),
							@more45 = COALESCE(SUM(CASE WHEN DATEADD(YEAR, (-1)*45, GETDATE()) >= birthdate AND birthdate <> ''1900-01-01'' THEN 1 ELSE 0 END),0),
							@unknown = COALESCE(SUM(CASE WHEN birthdate IS NULL OR birthdate = ''1900-01-01'' THEN 1 ELSE 0 END),0)
						FROM
							clientoperator
						WHERE
							operator = @operator
							AND pos = @pos
							AND regdate>=@beginDate AND regdate<@endDate
					END	/*Окончание блока "Сегментация по возрасту"*/
					
					BEGIN /*Начало блока "БОНУСЫ"*/

						--Начислено бонусов
						SELECT 
							@addedBonus = COALESCE(SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							bs.operator = @operator 
							--AND bs.bonus > 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							--AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							AND bs.refund IS NOT NULL
							--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Списано бонусов
						SELECT 
							@redeemedBonus = COALESCE((-1)*SUM(bonus), 0) 
						FROM 
							bonus AS bs
							INNER JOIN cheque AS ce ON bs.cheque = ce.id
						WHERE 
							operator = @operator 
							AND bonus < 0 
							AND ce.partner = @partner
							AND ce.pos = @pos
							AND (bs.cheque IS NOT NULL OR bs.source = 1) 
							--AND bs.refund IS NULL
							AND (bs.refund = 0 OR bs.refund IS NULL)
							AND (ce.cancelled IS NULL OR ce.cancelled = 0)
							--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
							AND bs.proctime>=@beginDate AND bs.proctime<@endDate;

						--Кол-во начислений
						SET @addedBonusQty = (
										SELECT 
											COUNT(DISTINCT ce.id) 
										FROM 
											bonus AS bs
											INNER JOIN cheque AS ce ON bs.cheque = ce.id
											LEFT JOIN cheque AS ce2 ON ce2.cheque = bs.cheque AND ce2.refund = 1
										WHERE 
											bs.operator = @operator 
											AND ce.partner = @partner
											AND ce.pos = @pos
											--AND bs.bonus > 0 
											--AND (bs.refund = 0 OR bs.refund IS NULL)
											AND (ce.cancelled IS NULL OR ce.cancelled = 0)
											AND bs.refund IS NOT NULL
											--AND ce2.id IS NULL
											--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
											AND bs.proctime>=@beginDate AND bs.proctime<@endDate
									);

						--Кол-во списаний
						SET @redeemedBonusQty = (
											SELECT 
												COUNT(DISTINCT ce.id) 
											FROM 
												bonus AS bs
												INNER JOIN cheque AS ce ON bs.cheque = ce.id
												LEFT JOIN cheque AS ce2 ON ce2.cheque = bs.cheque AND ce2.refund = 1
											WHERE 
												bs.operator = @operator 
												AND bs.bonus < 0 
												AND ce.pos = @pos
												AND (bs.cheque IS NOT NULL OR bs.source = 1) 
												AND (bs.refund = 0 OR bs.refund IS NULL)
												--AND bs.refund IS NULL
												AND (bs.refund = 0 OR bs.refund IS NULL)
												AND (ce.cancelled IS NULL OR ce.cancelled = 0)
												--AND ce2.id IS NULL
												--AND bs.cheque NOT IN (SELECT cheque FROM cheque WHERE refund = 1)
												AND bs.proctime>=@beginDate AND bs.proctime<@endDate
										)

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее начисление
						--IF(@addedBonusQty > 0)
						--BEGIN
						--	SET @avgCharge = ROUND(@addedBonus/@addedBonusQty, 0)
						--END
						--ELSE
						--BEGIN
						--	SET @avgCharge = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Среднее списание
						--IF(@redeemedBonusQty > 0)
						--BEGIN
						--	SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusQty, 0);
						--END
						--ELSE
						--BEGIN
						--	SET @avgRedeem = 0;
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Средний баланс
						--IF(@clients > 0)
						--BEGIN
						--	SET @avgBalance = (
						--						SELECT 
						--							SUM(cd.fullbalance) 
						--						FROM 
						--							clientoperator AS cr 
						--							INNER JOIN card AS cd ON cd.client = cr.client AND cd.operator = cr.operator 
						--						WHERE 
						--							cr.operator = @operator
						--							AND cr.pos = @pos
						--							AND cr.regdate>=@beginDate AND cr.regdate<@endDate
						--					)/@clients
						
						--END
						--ELSE
						--BEGIN
						--	SET @avgBalance = 0
						--END

						/*Расчет выполняется в GetAnalyticClientBonuses при выборке данных за период*/
						--Фактическая скидка
						--IF(@addedBonus > 0)
						--BEGIN
						--	SET @avgDiscount = ROUND((@redeemedBonus/@addedBonus), 2);
						--END
						--ELSE
						--BEGIN
						--	SET @avgDiscount = 0
						--END

					END /*Окончание блока "БОНУСЫ*/	
								
					IF (@calcDay IS NULL)
					BEGIN
						DELETE FROM reganalytics where [date] = @day AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos,
							men,women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)    
						VALUES(
							@day, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END ELSE
					BEGIN
						DELETE FROM reganalytics where [date] = @calcDay AND operator = @operator AND [partner] = @partner AND pos = @pos;

						INSERT INTO reganalytics(
							[date],operator,[partner], pos, 
							men, women,unknown,with_buys, without_buys, with_ten_buys, with_one_buy, with_phone, with_email, 
							men_buys, women_buys, unknown_buys, repeated_buys, buys_on_client, client_active_count, gain, avg_cheque, buys_weekday, buys_weekoff,
							age_less_25, age_more_25_less_35, age_more_35_less_45, age_more_45, age_unknown, client_count, with_birthdate, without_birthdate,
							added_bonus, added_bonus_count, avg_charge, redeemed_bonus, redeemed_bonus_count, avg_redeem, avg_balance, avg_discount)         
						VALUES(
							@calcDay, @operator, @partner, @pos, 
							@menCnt, @womenCnt, @unknownGenderCnt, @clientsWithBuysCnt,@clientsWithoutBuysCnt,@clientsWithTenBuysCnt,@clientsWithOneBuysCnt,@clientsWithPhoneCnt,@clientsWithEmailCnt, 
							@menBuys, @womenBuys, @unknownGenderBuys, @repeatedBuys, @buysOnClient, @clientActiveQty, @gain, @avgCheque, @buysWeekdays, @buysWeekOff,
							@less25, @more25less35, @more35less45, @more45, @unknown, @clients, @withBirthDate, @withoutBirthDate,
							@addedBonus, @addedBonusQty, @avgCharge, @redeemedBonus, @redeemedBonusQty, @avgRedeem, @avgBalance, @avgDiscount);
					END
					FETCH NEXT FROM Pos_Cursor INTO @pos, @partner, @operator 
				END
				CLOSE Pos_Cursor
				DEALLOCATE Pos_Cursor;
			END TRY
			BEGIN CATCH
				set @errormessage = N''Ошибка при расчете аналитики по оператору, партнеру и торговой точке''
				RETURN (3)
			END CATCH
		END'

	--Изменено. Отчет по клиентам. Изменен рассчет начислении бонусов
	IF OBJECT_ID('[Reports].[OperatorClient]') IS NOT NULL DROP PROCEDURE [Reports].[OperatorClient]
	EXEC sp_executesql @statement = N'
		CREATE PROCEDURE [Reports].[OperatorClient] @from date = null,
		@to date = null, 
		@operator smallint = NULL,
		@partner smallint = NULL,
		@pos smallint = NULL,

		@f_fio NVARCHAR(250) = NULL,
		@f_phone NVARCHAR(11) = NULL,
		@f_email NVARCHAR(250) = NULL,
		@f_birthdate DATE = NULL,
		@f_sex int = NULL,
		@f_type NVARCHAR(250) = NULL,
		@f_card NVARCHAR(250) = NULL,
		@f_level NVARCHAR(250) = NULL,
		@f_balance_more int = NULL,
		@f_balance_less int = NULL,

		@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		DECLARE @SQLStr NVARCHAR(MAX) = '''', @whereStr NVARCHAR(MAX) = '''', @ParamDefinition NVARCHAR(500), @joinStr NVARCHAR(MAX) = '''';

		IF (NOT EXISTS(SELECT id FROM operator WHERE id = @operator))
		BEGIN
			SET @errormessage = N''Оператор не найден''
			RETURN(1)
		END

		SET @ParamDefinition = N''@operator smallint, @partner smallint, @pos smallint, @from date=NULL, @to date = NULL'';  

		SET @SQLStr = N''
		DECLARE @beginDate DATE, @endDate DATE;

		IF(@from IS NOT NULL)
		BEGIN
			SET @beginDate = @from
		END
		ELSE
		BEGIN
			SET @beginDate = (SELECT MIN(regdate) FROM clientoperator WHERE operator = @operator)
		END

		IF(@to IS NOT NULL)
		BEGIN
			SET @to = DATEADD(DAY, 1, (@to))		
			SET @endDate = @to
		END
		ELSE
		BEGIN
			SET @endDate = DATEADD(DAY, 1, (GETDATE()))
		END
			
		/* Все чеки */
		DECLARE @cheques AS TABLE
		(
			amount DECIMAL(19,2),
			card BIGINT,
			qty INT,
			UNIQUE CLUSTERED (card)
		)

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @cheques (amount, card, qty)
			SELECT
				COALESCE(SUM(amount), 0),
				card,
				COUNT(c.id)
			FROM
				cheque c
				INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator
				INNER JOIN pos AS pos ON pos.id = c.pos AND pos.partner = p.id
			WHERE
				chequetime >= @beginDate 
				AND chequetime < @endDate
				--AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund IS NULL OR refund = 0)
			GROUP BY
				card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @cheques (amount, card, qty)
			SELECT
				COALESCE(SUM(c.amount), 0),
				card,
				COUNT(c.id)
			FROM
				cheque c
				INNER JOIN partner AS p ON p.id = c.partner AND p.id= @partner
				INNER JOIN pos AS pos ON pos.id = c.pos AND pos.partner = p.id
			WHERE
				chequetime >= @beginDate 
				AND chequetime < @endDate
				--AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
				AND (cancelled IS NULL OR cancelled = 0)
				AND (refund IS NULL OR refund = 0)
			GROUP BY
				card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			INSERT INTO @cheques (amount, card, qty)
			SELECT
				COALESCE(SUM(c.amount), 0),
				card,
				COUNT(c.id)
			FROM
				cheque c
				INNER JOIN partner AS p ON p.id = c.partner AND p.id= @partner
				INNER JOIN pos AS pos ON pos.id = c.pos AND pos.partner = p.id AND pos.id = @pos
			WHERE
				c.chequetime >= @beginDate 
				AND c.chequetime < @endDate
				AND (c.cancelled IS NULL OR c.cancelled = 0)
				AND (c.refund IS NULL OR c.refund = 0)
			GROUP BY
				c.card
		END


		/* Возвраты */
		DECLARE @chequesRefund AS TABLE
		(
			amount DECIMAL(19,2),
			card BIGINT,
			qty INT,
			UNIQUE CLUSTERED (card)
		)

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @chequesRefund (amount, card, qty)
			SELECT
				COALESCE(SUM(amount), 0),
				card,
				COUNT(c.id)
			FROM
				cheque c
				INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator
				INNER JOIN pos AS pos ON pos.id = c.pos AND pos.partner = p.id
			WHERE
				chequetime >= @beginDate 
				AND chequetime < @endDate
				--AND pos IN (SELECT id FROM pos WHERE partner IN (SELECT id FROM partner WHERE operator = @operator))
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1
			GROUP BY card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @chequesRefund (amount, card, qty)
			SELECT
				COALESCE(SUM(amount), 0),
				card,
				COUNT(c.id)
			FROM
				cheque c
				INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator AND p.id = @partner
				INNER JOIN pos AS pos ON pos.id = c.pos AND pos.partner = p.id
			WHERE
				chequetime >= @beginDate 
				AND chequetime < @endDate
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1
			GROUP BY card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			INSERT INTO @chequesRefund (amount, card, qty)
			SELECT
				COALESCE(SUM(amount), 0),
				card,
				COUNT(c.id)
			FROM
				cheque c
				INNER JOIN partner AS p ON p.id = c.partner AND p.operator = @operator AND p.id = @partner
				INNER JOIN pos AS pos ON pos.id = c.pos AND pos.partner = p.id AND pos.id = @pos
			WHERE
				chequetime >= @beginDate 
				AND chequetime < @endDate
				AND (cancelled IS NULL OR cancelled = 0)
				AND refund = 1
			GROUP BY c.card
		END


		/* НАчислено бонусов */
		DECLARE @bonusesAdd AS TABLE
		(
			bonus NUMERIC(9,2),
			card BIGINT,
			UNIQUE CLUSTERED(card)
		)

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @bonusesAdd
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0), 
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
			WHERE
				b.operator = @operator 
				AND refund IS NOT NULL 
				AND b.proctime>=@beginDate and b.proctime<@endDate
				AND b.source = 1
			GROUP BY b.card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @bonusesAdd
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0), 
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
				INNER JOIN pos ON pos.partner = @partner AND pos.id = cr.pos
			WHERE
				b.operator = @operator 
				AND refund IS NOT NULL 
				AND b.proctime>=@beginDate and b.proctime<@endDate
				AND b.source = 1
			GROUP BY b.card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			INSERT INTO @bonusesAdd
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0), 
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
				INNER JOIN pos ON pos.id = @pos AND pos.id = cr.pos
			WHERE
				b.operator = @operator 
				AND refund IS NOT NULL 
				AND b.proctime>=@beginDate and b.proctime<@endDate
				AND b.source = 1
			GROUP BY b.card
		END
		

		/* Списания */
		DECLARE @bonusesRedeemed AS TABLE
		(
			bonus NUMERIC(9,2),
			card BIGINT
			UNIQUE CLUSTERED(card)
		)

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @bonusesRedeemed
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0),
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
			WHERE
				b.operator = @operator 
				AND b.source = 1
				AND b.bonus < 0 
				AND (b.cheque IS NOT NULL OR b.source = 1) 
				AND (b.refund = 0 OR b.refund IS NULL)
				AND b.proctime>=@beginDate and b.proctime<@endDate			
			GROUP BY b.card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @bonusesRedeemed
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0),
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
				INNER JOIN pos ON pos.partner = @partner AND pos.id = cr.pos
			WHERE
				b.operator = @operator 
				AND b.source = 1
				AND b.bonus < 0 
				AND (b.cheque IS NOT NULL OR b.source = 1) 
				AND (b.refund = 0 OR b.refund IS NULL)
				AND b.proctime>=@beginDate and b.proctime<@endDate			
			GROUP BY b.card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			INSERT INTO @bonusesRedeemed
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0),
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
				INNER JOIN pos ON pos.id = @pos AND pos.id = cr.pos
			WHERE
				b.operator = @operator 
				AND b.source = 1
				AND b.bonus < 0 
				AND (b.cheque IS NOT NULL OR b.source = 1) 
				AND (b.refund = 0 OR b.refund IS NULL)
				AND b.proctime>=@beginDate and b.proctime<@endDate			
			GROUP BY b.card
		END
		

		/* Бонусы не за покупки */
		DECLARE @bonusesNotBuy AS TABLE
		(
			bonus NUMERIC(9,2),
			card BIGINT
			UNIQUE CLUSTERED(card)
		)

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @bonusesNotBuy
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0),
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
			WHERE
				b.operator = @operator
				AND b.proctime >= @beginDate
				AND b.proctime < @endDate
				AND (b.refund = 0 OR b.refund IS NULL)
				AND b.bonus > 0 
				AND b.source > 1
			GROUP BY b.card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN
			INSERT INTO @bonusesNotBuy
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0),
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
				INNER JOIN pos ON pos.partner = @partner AND pos.id = cr.pos
			WHERE
				b.operator = @operator
				AND b.proctime >= @beginDate
				AND b.proctime < @endDate
				AND (b.refund = 0 OR b.refund IS NULL)
				AND b.bonus > 0 
				AND b.source > 1
			GROUP BY b.card
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN
			INSERT INTO @bonusesNotBuy
			(
				bonus, 
				card
			)
			SELECT
				COALESCE(SUM(b.bonus), 0),
				b.card
			FROM
				bonus b
				INNER JOIN card AS cd ON cd.number = b.card
				INNER JOIN clientoperator AS cr ON cr.client = cd.client AND cr.operator = @operator
				INNER JOIN pos ON pos.id = @pos AND pos.id = cr.pos
			WHERE
				b.operator = @operator
				AND b.proctime >= @beginDate
				AND b.proctime < @endDate
				AND (b.refund = 0 OR b.refund IS NULL)
				AND b.bonus > 0 
				AND b.source > 1
			GROUP BY b.card
		END

		SELECT
			(SELECT smssender FROM operator WHERE id = @operator) AS brand,
			CASE 
				WHEN cr.pos IS NOT NULL THEN (SELECT COALESCE(cy.Name, '''''''') + '''' '''' + COALESCE(address, '''''''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.id = cr.pos)
				WHEN cr.pos IS NULL AND cr.password IS NULL THEN COALESCE((SELECT COALESCE(cy.Name, '''''''') + '''' '''' + COALESCE(address, '''''''') FROM partner AS pr INNER JOIN pos AS ps ON pr.id = ps.partner LEFT JOIN city AS cy ON ps.city = cy.id  WHERE ps.code = N''''M5TT21'''' AND pr.operator = @operator), N''''Lcpos'''')
				WHEN cr.pos IS NULL AND cr.appdevice IS NOT NULL AND cr.password IS NOT NULL THEN cr.appregistrator
				ELSE N''''Нет''''
			END AS address,
			COALESCE(ct.surname, '''''''') + '''' '''' + coalesce(ct.name, '''''''') + '''' '''' + COALESCE(ct.patronymic, '''''''') as name, 
			CASE ct.gender
				WHEN 0 THEN N''''Женский''''
				WHEN 1 THEN N''''Мужской''''
				ELSE N''''Неизвестен''''
			END, 
			COALESCE(ct.phone, cr.phone, 0) AS phone,
			coalesce(ct.email, cr.email, '''''''') as email,
			cd.number,
			COALESCE(cp.name, N''''Клиент'''') AS ClientType, 
			cs.qty AS [Количество покупок],		
			cs.amount AS [Сумма покупок],
			bsAdd.bonus AS [Начислено бонусов],
			(-1)*bsRedeem.bonus AS [Списано бонусов],
			crd.qty AS [Количество возвратов],
			crd.amount AS [Сумма возвратов],
			cd.fullbalance,
			COALESCE((SELECT condition FROM level WHERE id = cd.level), (SELECT CAST(CAST(MIN(interest) AS INT) AS NVARCHAR(5)) + N'''' %'''' FROM chequerule WHERE operator = @operator)) AS condition,
			COALESCE(cr.birthdate, ct.birthdate) AS birthdate,
			ct.allowsms,
			ct.allowemail,
			bsNotBuy.bonus AS [Бонусы не за покупки],
			cr.regdate
		FROM
			client AS ct
			INNER JOIN card AS cd ON ct.id = cd.client
			LEFT JOIN operator AS op ON cd.operator = op.id
			LEFT JOIN clientoperator AS cr ON ct.id = cr.client
			LEFT JOIN cardtype AS cp ON cd.type = cp.id
			LEFT JOIN @cheques AS cs ON cd.number = cs.card
			LEFT JOIN @chequesRefund AS crd ON crd.card = cd.number
			LEFT JOIN @bonusesAdd AS bsAdd ON bsAdd.card = cd.number
			LEFT JOIN @bonusesRedeemed AS bsRedeem ON bsRedeem.card = cd.number
			LEFT JOIN @bonusesNotBuy AS bsNotBuy ON bsNotBuy.card = cd.number

		''

		SET @whereStr=N''
		WHERE
			cr.regdate >= @beginDate
			AND cr.regdate < @endDate '';

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL)
		BEGIN 
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator '';
		END
		
		IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL)
		BEGIN 
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator 
				AND cr.pos IN (SELECT id FROM pos WHERE partner = @partner) "'';
		END		

		IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL)
		BEGIN 
			SET @joinStr = @joinStr + N'' INNER JOIN pos p on p.id = cr.pos''
			SET @whereStr = @whereStr + N''
				AND cd.operator = @operator
				AND cr.operator = @operator 
				AND cr.pos = @pos'';
		END	

		IF (@f_fio IS NOT NULL) /*Фильтр по ФИО*/
		BEGIN
			SET @whereStr = @whereStr + N'' 
			AND (
					COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''%'' + @f_fio + '''''' ''+
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''%''+ @f_fio + N''%'''''' +
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') like ''''''+@f_fio+N''%''''''+ 
					N'' OR COALESCE(ct.surname +'''' '''', '''''''') +COALESCE(ct.name + '''' '''', '''''''') + COALESCE(ct.patronymic + '''' '''', '''''''') = ''''''+@f_fio+''''''
				) ''
		END

		IF (@f_phone IS NOT NULL) /*Фильтр по телефону*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (ct.phone LIKE ''''%'' + @f_phone + ''%'''' OR ct.phone LIKE ''''%'' + @f_phone + '''''' OR ct.phone LIKE '''''' + @f_phone + ''%'''' OR ct.phone =''''''+ @f_phone + '''''') ''
		END

		IF (@f_email IS NOT NULL) /*Фильтр по email*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (ct.email LIKE ''''%'' + @f_email + ''%'''' OR ct.email LIKE ''''%'' + @f_email  + '''''' OR ct.email LIKE '''''' + @f_email + ''%'''' OR ct.email ='''''' + @f_email + '''''') '';
		END

		IF (@f_birthdate IS NOT NULL) /*Фильтр по дате рождения*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, COALESCE(cr.birthdate, ct.birthdate))='''''' + CONVERT(NVARCHAR(20), @f_birthdate) + '''''' '';
		END

		IF (@f_sex IS NOT NULL) /*Фильтр по полу*/
		BEGIN
			IF (@f_sex=0) SET @whereStr = @whereStr + N'' AND ct.gender=0 '';
			ELSE IF (@f_sex=1) SET @whereStr = @whereStr + N'' AND ct.gender=1 '';
			ELSE IF (@f_sex=2) SET @whereStr = @whereStr + N'' AND ct.gender IS NULL '';
		END

		IF (@f_type IS NOT NULL) /*Фильтр по типу*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND COALESCE(cp.name, N''''Клиент'''') = ''''''+ @f_type +'''''''';
		END

		IF (@f_card IS NOT NULL) /*Фильтр по номеру карты*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND (cd.number LIKE ''''%'' + @f_card + ''%''''OR cd.number LIKE ''''%'' + @f_card + '''''' OR cd.number LIKE '''''' + @f_card + ''%'''' OR cd.number ='''''' + @f_card + '''''') '';
		END

		IF (@f_balance_more IS NOT NULL) /*Фильтр по балансу нижняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance>=''+CONVERT(NVARCHAR(10), @f_balance_more);
		END

		IF (@f_balance_less IS NOT NULL) /*Фильтр по балансу верхняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance<''+CONVERT(NVARCHAR(10), @f_balance_less);
		END

		IF (@f_balance_more IS NOT NULL) /*Фильтр по начислению нижняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance>=''+CONVERT(NVARCHAR(10), @f_balance_more);
		END

		IF (@f_balance_less IS NOT NULL) /*Фильтр по начислению верхняя граница*/
		BEGIN
			SET @whereStr = @whereStr + N'' AND cd.fullbalance<''+CONVERT(NVARCHAR(10), @f_balance_less);
		END
            

		SET @SQLStr = @SQLStr + @whereStr;

		--SET @errormessage = @SQLStr;

		--print @errormessage;

		EXECUTE sp_executesql @SQLStr, @ParamDefinition, @operator, @partner, @pos;
		
		RETURN(0)
	END'

	--Изменено. Процедура выборки данных для страницы аналитики (раздел бонусы)
	IF OBJECT_ID('[dbo].[GetAnalyticClientBonuses]') IS NOT NULL DROP PROCEDURE [dbo].[GetAnalyticClientBonuses]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [dbo].[GetAnalyticClientBonuses]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@beginDate DATE = NULL,
	@endDate DATE = NULL,

	@addedBonus NUMERIC(19,2) = NULL OUTPUT,
	@addedBonusCount INT = NULL OUTPUT,
	@avgCharge NUMERIC(19,2) = NULL OUTPUT,
	@redeemedBonus NUMERIC(19,2) = NULL OUTPUT,
	@redeemedBonusCount INT = NULL OUTPUT,
	@avgRedeem NUMERIC(19,2) = NULL OUTPUT,
	@avgBalance NUMERIC(19,2) = NULL OUTPUT,
	@avgDiscount NUMERIC(19,2) = NULL OUTPUT,
	@clientCount INT = NULL OUTPUT,
	@errormessage NVARCHAR(100) = NULL OUTPUT
	AS
	BEGIN
		IF (@operator=0) 
		BEGIN
			set @errormessage = N''Оператор не указан'';
			RETURN (1)
		END

		IF (@operator IS NOT NULL AND @partner IS NULL AND  @pos IS NULL)
		BEGIN
			SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM
				reganalytics r WITH (NOLOCK)
			WHERE
				r.operator = @operator AND r.partner IS NULL AND r.pos IS NULL AND r.[date]>=@beginDate and r.[date]<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (SELECT SUM(cd.fullbalance) FROM clientoperator AS cr WITH (NOLOCK) INNER JOIN card AS cd WITH (NOLOCK) ON cd.client = cr.client AND cd.operator = cr.operator WHERE cr.operator = @operator AND cr.regdate>=@beginDate AND cr.regdate<@endDate)/@clientCount
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END 
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NULL)
		BEGIN
			 SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos IS NULL AND r.date>=@beginDate and r.date<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (
						SELECT 
							SUM(cd.fullbalance) 
						FROM 
							clientoperator AS cr WITH (NOLOCK)
							INNER JOIN card AS cd WITH (NOLOCK) ON cd.client = cr.client AND cd.operator = cr.operator 
						WHERE 
							cr.operator = @operator 
							AND cr.regdate>=@beginDate AND cr.regdate<@beginDate
					)/@clientCount;	
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND  @pos IS NOT NULL)
		BEGIN
			 SELECT
				@addedBonus = COALESCE(SUM(r.added_bonus),0),
				@addedBonusCount = COALESCE(SUM(r.added_bonus_count),0),
				@redeemedBonus = COALESCE(SUM(r.redeemed_bonus),0),
				@redeemedBonusCount = COALESCE(SUM(r.redeemed_bonus_count),0),
				@clientCount = COALESCE(SUM(r.client_count),0)
			FROM reganalytics r WITH (NOLOCK)
			WHERE r.operator=@operator AND r.partner = @partner AND r.pos = @pos AND r.date>=@beginDate and r.date<@endDate;

			/*Средней баланс*/
			IF (@clientCount>0)
			BEGIN
				SET @avgBalance = (
						SELECT 
							SUM(cd.fullbalance) 
						FROM 
							clientoperator AS cr WITH (NOLOCK)
							INNER JOIN card AS cd WITH (NOLOCK) ON cd.client = cr.client AND cd.operator = cr.operator 
						WHERE 
							cr.operator = @operator
							AND cr.pos = @pos
							AND cr.regdate>=@beginDate AND cr.regdate<@endDate
					)/@clientCount	
				
			END
			ELSE 
			BEGIN
				SET @avgBalance = 0;
			END
		END

		/*Среднее начисление*/
		IF (@addedBonusCount>0)
		BEGIN
			SET @avgCharge = ROUND(@addedBonus/@addedBonusCount, 0);
		END 
		ELSE 
		BEGIN
			SET @avgCharge = 0;
		END

		/*Среднее списание*/
		IF (@redeemedBonusCount>0)
		BEGIN
			SET @avgRedeem = ROUND(@redeemedBonus/@redeemedBonusCount, 0);
		END 
		ELSE 
		BEGIN
			SET @avgRedeem = 0;
		END

		/*Фактическая скидка*/
		IF (@addedBonus>0)
		BEGIN
			SET @avgDiscount = ROUND(@redeemedBonus/@addedBonus, 6) * 100;
		END 
		ELSE 
		BEGIN
			SET @avgDiscount = 0;
		END

		RETURN(0)
	END'

	--Изменено. Добавлена пагинация по клиенту
	IF OBJECT_ID('[dbo].[ChequesPaging]') IS NOT NULL DROP PROCEDURE [dbo].[ChequesPaging]
	EXEC sp_executesql @statement = N'
	CREATE PROCEDURE [dbo].[ChequesPaging]
	@operator SMALLINT = NULL,
	@partner SMALLINT = NULL,
	@pos SMALLINT = NULL,
	@client INT = NULL,
	@card BIGINT = NULL,

	@f_date_buy DATE = NULL,
	@f_date_start DATE = NULL,
	@f_date_end DATE = NULL,
	@f_pos NVARCHAR(200) = NULL,
	@f_phone NVARCHAR(20) = NULL,
	@f_operation NVARCHAR(20) = NULL,
	@f_cheque NVARCHAR(200) = NULL,
	@f_sum_more INT = NULL,
	@f_sum_less INT = NULL,
	@f_added_more INT = NULL,
	@f_added_less INT = NULL,
	@f_redeemed_more INT = NULL,
	@f_redeemed_less INT = NULL,

	@start INT = NULL,
	@length INT = NULL,

	@total_rows INT = NULL OUTPUT,
	@errormessage nvarchar(100) OUTPUT
	AS
	BEGIN
		DECLARE 
			@sqlStr NVARCHAR(MAX) = '''', 
			@sqlCountStr NVARCHAR(MAX) = '''', 
			@whereStr NVARCHAR(MAX) = '''', 
			@joinStr NVARCHAR(MAX) = '''', 
			@paramDefinition NVARCHAR(500) = ''@operator smallint, @partner smallint, @pos smallint, @client INT, @card BIGINT, @start int, @length int, @rows int OUTPUT'';

		SET @sqlStr = N''
			SELECT 
	            c.id, 
	            c.number, 
	            c.chequetime, 
	            c.refund, 
	            ABS(c.amount) AS amount, 
	            c.discount, 
	            p.name AS partner, 
	            pos.code AS pos, 
	            c.card, 
	            b1.summa AS added, 
	            -b2.summa AS redeemed, 
	            pos.name AS posname,
	            co.phone AS clientPhone,
	            ROW_NUMBER() OVER ( ORDER BY c.proctime DESC ) AS RowNum
            FROM 
	            cheque as c '';

		SET @sqlCountStr = N''SELECT @rows = COUNT(*) FROM  cheque as c '';

		IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL AND @client IS NULL AND @card IS NULL)
		BEGIN
			SET @joinStr = N''
				LEFT JOIN partner as p ON c.partner = p.id 
		                LEFT JOIN pos ON c.pos = pos.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
		                left join card cd on cd.number = c.card
		                inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator
	                WHERE 
                        c.partner IN(SELECT id FROM partner WHERE operator = @operator) AND(c.cancelled IS NULL OR c.cancelled = 0) '';
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NULL AND @client IS NULL AND @card IS NULL)
		BEGIN
			SET @joinStr = N''
				LEFT JOIN partner as p ON c.partner = p.id 
		                LEFT JOIN pos ON c.pos = pos.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
		                left join card cd on cd.number = c.card
		                inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator
	                WHERE 
		                c.partner = @partner AND (c.cancelled IS NULL OR c.cancelled = 0) '';
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NOT NULL AND @pos IS NOT NULL AND @client IS NULL AND @card IS NULL)
		BEGIN
			SET @joinStr = N''
				LEFT JOIN partner as p ON c.partner = p.id 
		                LEFT JOIN pos ON c.pos = pos.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
		                left join card cd on cd.number = c.card
		                inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator
	                WHERE 
                        c.pos = @pos AND (c.cancelled IS NULL OR c.cancelled = 0) '';
		END
		ELSE IF (@operator IS NOT NULL AND @partner IS NULL AND @pos IS NULL AND @client IS NOT NULL AND @card IS NULL)
		BEGIN 
			SET @joinStr = N''
				LEFT JOIN partner as p ON c.partner = p.id 
		                LEFT JOIN pos ON c.pos = pos.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
		                left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
		                inner join card cd on cd.number = c.card 
		                inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator AND co.operator=@operator AND co.client=@client 
	                WHERE 
                        1 = 1 AND (c.cancelled IS NULL OR c.cancelled = 0) '';
		END
		ELSE IF (@operator IS NULL AND @partner IS NULL AND @pos IS NULL AND @client IS NULL AND @card IS NOT NULL)
		BEGIN
			SET @joinStr = N''
					LEFT JOIN partner as p ON c.partner = p.id 
							LEFT JOIN pos ON c.pos = pos.id
							left join (select cheque, sum(bonus) as summa from bonus where bonus > 0 group by cheque) b1 on b1.cheque=c.id
							left join (select cheque, sum(bonus) as summa from bonus where bonus < 0 group by cheque) b2 on b2.cheque=c.id
							inner join card cd on cd.number = c.card AND cd.number = @card
							inner join clientoperator co on cd.client = co.client AND cd.operator = co.operator
						WHERE 
							1 = 1 AND (c.cancelled IS NULL OR c.cancelled = 0) '';
		END

		/*Фильтр по дате покупки*/
		IF (@f_date_buy IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, c.chequetime)='''''' + CONVERT(NVARCHAR(20), @f_date_buy) + '''''' '';
		END

		/*Фильтр по дате покупки нижняя граница*/
		IF (@f_date_start IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, c.proctime)>='''''' + CONVERT(NVARCHAR(20), @f_date_start) + '''''' '';
		END

		/*Фильтр по дате покупки нижняя граница*/
		IF (@f_date_end IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND CONVERT(date, c.proctime)<'''''' + CONVERT(NVARCHAR(20), DATEADD(day, 1, @f_date_end)) + '''''' '';
		END

		/*Фильтр по точке продажи*/
		IF (@f_pos IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND pos.name LIKE ''''%'' + @f_pos + ''%'''' '';
		END

		/*Фильтр по операции*/
		IF (@f_operation IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND c.refund='' + @f_operation + '' '';
		END

		/*Фильтр по № чека*/
		IF (@f_cheque IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND (c.number LIKE ''''%'' + @f_cheque + ''%'''' OR c.number LIKE ''''%'' + @f_cheque + '''''' OR c.number LIKE '''''' + @f_cheque + ''%'''' OR c.number ='''''' + @f_cheque + '''''') '';
		END
        
		/*Фильтр по телефону */
		IF (@f_phone IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND (co.phone LIKE ''''%'' + @f_phone + ''%'''' OR co.phone LIKE ''''%'' + @f_phone+ '''''' OR co.phone LIKE '''''' + @f_phone+ ''%'''' OR co.phone ='''''' + @f_phone+ '''''') '';
		END   
		
		/*Фильтр по сумме */
		IF (@f_sum_more IS NOT NULL AND @f_sum_less IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND ABS(c.amount)>='' + CONVERT(NVARCHAR(10), @f_sum_more) + '' AND ABS(c.amount)<'' + CONVERT(NVARCHAR(10),@f_sum_less) + '' '';
		END 

		/*Фильтр по начислениям */
		IF (@f_added_more IS NOT NULL AND @f_added_less IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND b1.summa>='' + CONVERT(NVARCHAR(10), @f_added_more) + '' AND b1.summa<'' + CONVERT(NVARCHAR(10), @f_added_less) + '' '';
		END 

		/*Фильтр по списаниям */
		IF (@f_redeemed_more IS NOT NULL AND @f_redeemed_less IS NOT NULL)
		BEGIN
			SET @whereStr = @whereStr + N'' AND ABS(b2.summa)>='' + CONVERT(NVARCHAR(10), @f_redeemed_more) + '' AND ABS(b2.summa)<'' + CONVERT(NVARCHAR(10), @f_redeemed_less) + '' '';
		END 



		SET @sqlStr = @sqlStr + @joinStr;
		SET @sqlCountStr = @sqlCountStr + @joinStr;

		SET @sqlStr = @sqlStr + @whereStr;
		SET @sqlCountStr = @sqlCountStr + @whereStr;

		SET @sqlStr = @sqlCountStr + N'' SELECT  * FROM ('' + @sqlStr + N'') AS RowConstrainedResult WHERE   RowNum >= @start AND RowNum < @length ORDER BY RowNum '';

		EXECUTE sp_executesql @sqlStr, @paramDefinition, @operator, @partner, @pos, @client, @card, @start, @length, @rows = @total_rows OUTPUT;

		RETURN (0)
	END
	'

END ELSE BREAK

	SET @version = @version + 1
	UPDATE version SET value = @version
END -- цикл обновления версий
END TRY BEGIN CATCH
	SELECT 'Ошибка'
END CATCH